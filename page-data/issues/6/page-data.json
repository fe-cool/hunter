{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/6",
    "result": {"data":{"issuesJson":{"id":"a64e924b-e1ff-50b7-8dc5-5cb5ccf06768","title":"实现一个串行请求队列","number":6,"bodyHTML":"<h2 dir=\"auto\">问题描述</h2>\n\n\n<p dir=\"auto\">对于异步请求<code class=\"notranslate\">ajaxN</code>，其中<code class=\"notranslate\">N</code>代表<code class=\"notranslate\">请求的执行时间</code>，如<code class=\"notranslate\">ajax1</code>代表<code class=\"notranslate\">请求1秒后返回</code>。</p>\n<p dir=\"auto\">实现一个串行请求队列<code class=\"notranslate\">serial</code>函数，接收<code class=\"notranslate\">包含异步请求的数组</code>，按顺序依次执行。</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const ajaxArr: Ajax[] = [ajax1, ajax2, ajax4];\n\nfunction serial(ajaxArr: Ajax[]) {\n  // 实现...\n}\n\nserial(ajaxArr)\n// 1秒后ajax1请求完毕\n// 再过2秒，ajax2请求完毕\n// 再过4秒，ajax4请求完毕\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">ajaxArr</span>: <span class=\"pl-v\">Ajax</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">ajax1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ajax2</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ajax4</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ajaxArr</span>: <span class=\"pl-v\">Ajax</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 实现...</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 1秒后ajax1请求完毕</span>\n<span class=\"pl-c\">// 再过2秒，ajax2请求完毕</span>\n<span class=\"pl-c\">// 再过4秒，ajax4请求完毕</span></pre></div>\n<p dir=\"auto\">请给出你的<code class=\"notranslate\">实现方法</code>和<code class=\"notranslate\">文字描述</code></p>\n<h2 dir=\"auto\">最佳答案</h2>\n<p dir=\"auto\">简洁的答案：<a href=\"https://github.com/BetaSu/fe-hunter/issues/6#issuecomment-1075827760\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/6/hovercard\">fightZy的回答</a><br>\n完备的答案：<a href=\"https://github.com/BetaSu/fe-hunter/issues/6#issuecomment-1076140316\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/6/hovercard\">codingJJJ的回答</a></p>\n<h3 dir=\"auto\">答题同学须知</h3>\n<p dir=\"auto\">最佳答案由<code class=\"notranslate\">围观同学</code>的<code class=\"notranslate\">👍</code>和<a href=\"https://github.com/BetaSu\">卡颂</a>共同决定。<strong>非答题相关评论</strong>会被删除，问题相关内容讨论请在<a href=\"https://github.com/BetaSu/fe-hunter\">赏金猎人群</a>里讨论</p>\n<h3 dir=\"auto\">围观同学须知</h3>\n<p dir=\"auto\">对于你满意的答案，请不要吝惜你的<code class=\"notranslate\">👍</code>，这是评选<strong>最佳答案</strong>的标准</p>","updatedAt":"2022-03-24T09:45:32Z","upvoteCount":null,"author":{"login":"BetaSu","avatarUrl":"https://avatars.githubusercontent.com/u/15828041?u=3b08cdf9f9b49dbead9ffb020a94d925904d2b74&v=4","url":"https://github.com/BetaSu"},"category":null,"labels":{"edges":[{"node":{"name":"JS","color":"ffee58"}},{"node":{"name":"动手","color":"42a5f5"}}]},"comments":{"edges":[{"node":{"id":"IC_kwDOHCfdf85AH8M3","bodyHTML":"<ol dir=\"auto\">\n<li>主要思路通过Promise.race来竞速，由于此题是只有一个在执行，那么只需要单个执行即可</li>\n<li>使用Promise.race的好处是，以后扩展为同时2个，3 个。。。。等等执行，都可以使用此实现</li>\n</ol>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function excuteTask(task: string){\n  // 取出执行时间\n  const time = task.substr(task.length - 1, 1);\n  // 通过Promise的特性，结合定时器，模拟ajax执行时间\n  return new Promise((res, rej) =&gt; {\n    console.log(`${task} start`);\n    setTimeout(() =&gt; {\n      console.log(`${task} end`);\n      res();\n    }, time * 1000);\n  });\n}\n\nfunction serial(ajaxArr: Ajax[]){\n  // 这里使用concat，是为了拷贝一份数据源，防止后续操作影响到数据源\n  const queue = [].concat(ajaxArr);\n  let promises = [];\n // 因为是按队列执行，那么这里只需要一个一个截取即可\n  promises = queue.splice(0, 1).map((task, index) =&gt; {\n    // 这里通过模拟执行函数，返回当前执行的ajax的索引，为了之后执行时能正确找到执行函数\n    return excuteTask(task).then(() =&gt; {\n      return index;\n    });\n  });\n  // 通过race,竞速\n  let p = Promise.race(promises); \n  for(let i = 0; i &lt; queue.length; i ++){\n    // 这里就用到之前返回的索引，当执行完成一个后，不断更改竞速队列\n    p = p.then(res =&gt; {\n      promises[res] = excuteTask(queue[i]).then(() =&gt; {\n        return res;\n      });\n      return Promise.race(promises);\n    });\n  }\n}\n\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">excuteTask</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span>: <span class=\"pl-s1\">string</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 取出执行时间</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">task</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">substr</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">// 通过Promise的特性，结合定时器，模拟ajax执行时间</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">rej</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">}</span></span> start`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">}</span></span> end`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-s1\">res</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ajaxArr</span>: <span class=\"pl-v\">Ajax</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 这里使用concat，是为了拷贝一份数据源，防止后续操作影响到数据源</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">queue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">promises</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n <span class=\"pl-c\">// 因为是按队列执行，那么这里只需要一个一个截取即可</span>\n  <span class=\"pl-s1\">promises</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">splice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// 这里通过模拟执行函数，返回当前执行的ajax的索引，为了之后执行时能正确找到执行函数</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">excuteTask</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">// 通过race,竞速</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">p</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">race</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">promises</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> \n  <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// 这里就用到之前返回的索引，当执行完成一个后，不断更改竞速队列</span>\n    <span class=\"pl-s1\">p</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">p</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">promises</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">excuteTask</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">queue</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">race</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">promises</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"CrownNight","avatarUrl":"https://avatars.githubusercontent.com/u/32128133?u=66c2ce393bf2a726f320227300e8bbc7ff3f6957&v=4","url":"https://github.com/CrownNight"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AH8Ov","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"let request = (url) =&gt; {\n    return new Promise((resolve, reject) =&gt; {\n        let sec = url.match(/[0-9]/g).join();\n        setTimeout(function() {\n\t    resolve(url)\n        }, sec * 1000);\n    })\n}\n\nlet serial = async (list) =&gt; {\n    let result = [];\n    for(let i=0; i&lt;list.length; i++) {\n        res = await request(list[i]);\n        console.log(res);\n        result.push(res);\n    }\n    console.log(result);\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">let</span> <span class=\"pl-en\">request</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">url</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">let</span> <span class=\"pl-s1\">sec</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">url</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">match</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-kos\">[</span>0-9<span class=\"pl-kos\">]</span><span class=\"pl-c1\">/</span>g</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">join</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t    <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">url</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">sec</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-en\">serial</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">list</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">=</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">list</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">request</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">list</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"chanchunlei","avatarUrl":"https://avatars.githubusercontent.com/u/34532433?u=bf1081ac39accac1030a2a4f8f93bf74913f419b&v=4","url":"https://github.com/chanchunlei"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AH8vT","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function serial(tasks) {\n  const t = tasks\n  const next = () =&gt; {\n      const task = t.shift()\n      if (task) {\n        return Promise.resolve(task).then(() =&gt; {\n          return next()\n        })    \n      } else {\n          return Promise.resolve('done')\n      }\n    }\n \n   return   next() \n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">t</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">tasks</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">next</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">task</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">t</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-k\">return</span> <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>    \n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-k\">return</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'done'</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n \n   <span class=\"pl-k\">return</span>   <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> \n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"lz-lee","avatarUrl":"https://avatars.githubusercontent.com/u/22316795?u=191a8fcf9eb1d7c149eb869acec9f36c58df3732&v=4","url":"https://github.com/lz-lee"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AH9Qw","bodyHTML":"<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">假设执行ajax返回的都是promise</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function serial(ajaxArr) {\n return ajaxArr.reduce((pre, cur) =&gt; pre.then(() =&gt; cur()), Promise.resolve())\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">pre</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">pre</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</li>\n</ul>","author":{"login":"fightZy","avatarUrl":"https://avatars.githubusercontent.com/u/52490455?u=4a008fd4e5a82484f5eec0f82487368910fc9f65&v=4","url":"https://github.com/fightZy"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AH9VD","bodyHTML":"<p dir=\"auto\">应该<code class=\"notranslate\">reduce</code>就能解决？MDN有相同的代码示例：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#running_promises_in_sequence\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#running_promises_in_sequence</a></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function runPromiseInSequence(arr, input) {\n  return arr.reduce(\n    (promiseChain, currentFunction) =&gt; promiseChain.then(currentFunction),\n    Promise.resolve(input)\n  )\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">runPromiseInSequence</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">input</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span>\n    <span class=\"pl-kos\">(</span><span class=\"pl-s1\">promiseChain</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">currentFunction</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">promiseChain</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">currentFunction</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">input</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"wood3n","avatarUrl":"https://avatars.githubusercontent.com/u/31716713?u=b8b5fc87885be46078a2d2f96676f1d938396f87&v=4","url":"https://github.com/wood3n"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AH9zV","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function serial(arr) {\n  var sequence = Promise.resolve()\n  arr.forEach(function (item) {\n   sequence = sequence.then(item)\n  })\n  return sequence\n }\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">sequence</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n   <span class=\"pl-s1\">sequence</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">sequence</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">sequence</span>\n <span class=\"pl-kos\">}</span></pre></div>","author":{"login":"HSQCoollaughing","avatarUrl":"https://avatars.githubusercontent.com/u/29752874?u=b98f84939d984f739d0fd06928963b744419d4de&v=4","url":"https://github.com/HSQCoollaughing"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AIE9H","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"/**\n * @description 借助 async\n *\n * 原理： async 是 promise + generator 的语法糖，generator 提供了串行的能力\n */\nasync function serialByAsync(ajaxArr) {\n  const result = [];\n\n  for (let i = 0; i &lt; ajaxArr.length; i++) {\n    const ajax = ajaxArr[i];\n    try {\n      const res = await ajax();\n      result.push(res);\n    } catch (error) {\n      result.push(error);\n    }\n  }\n\n  return result;\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">/**</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@description</span> 借助 async</span>\n<span class=\"pl-c\"> *</span>\n<span class=\"pl-c\"> * 原理： async 是 promise + generator 的语法糖，generator 提供了串行的能力</span>\n<span class=\"pl-c\"> */</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">serialByAsync</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">ajax</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">ajax</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"yearth","avatarUrl":"https://avatars.githubusercontent.com/u/12742400?u=0a6e6f05ecb3b00661fd1f04b2ecce8dd4249534&v=4","url":"https://github.com/yearth"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AILH8","bodyHTML":"<p dir=\"auto\">如果希望在使用的时候,可以实时拿到任务返回的值,可以通过封装成异步生成器函数,使用 <code class=\"notranslate\">for await...of</code> 语法访问,每当执行完一个任务时,就能拿到对应的返回值,而不需要等待所有任务都执行完才能获取到值.</p>\n<blockquote>\n<p dir=\"auto\">比如想要显示任务进度的时候,可以根据任务执行的情况,每执行完一个任务时,实时更新进度</p>\n</blockquote>\n<p dir=\"auto\">实现如下:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"async function *serial(tasks) {\n    for (let task of tasks) {\n        yield await task()\n    }\n}\n\nvoid async function() {\n    let sleep = (i)=&gt;new Promise(r=&gt;setTimeout(()=&gt;r(i), i))\n\n    const tasks = [()=&gt;sleep(1000), ()=&gt;sleep(2000), ()=&gt;sleep(4000)]\n\n    let start = new Date().valueOf(), i = 1\n    for await(let res of serial(tasks)) {\n        const time = Math.round((new Date().valueOf() - start) / 1000)\n\n        console.log(`第 ${time} 秒第 ${i++} 个任务执行完成,返回: ${res}`)\n    }\n}()\n\"><pre class=\"notranslate\"><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-c1\">*</span><span class=\"pl-s1\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">task</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">yield</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">task</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">void</span> <span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-en\">sleep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">r</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-en\">r</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">tasks</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>\n\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">start</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Date</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">1</span>\n    <span class=\"pl-k\">for</span> <span class=\"pl-k\">await</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">res</span> <span class=\"pl-k\">of</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Math</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">round</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Date</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">-</span> <span class=\"pl-s1\">start</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">/</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`第 <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span> 秒第 <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">}</span></span> 个任务执行完成,返回: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/38753204/159620149-194d2b78-9563-4464-b173-2147612bc736.png\"><img src=\"https://user-images.githubusercontent.com/38753204/159620149-194d2b78-9563-4464-b173-2147612bc736.png\" alt=\"2022-03-23_11-48-07\" style=\"max-width: 100%;\"></a></p>","author":{"login":"XYShaoKang","avatarUrl":"https://avatars.githubusercontent.com/u/38753204?u=5c9caf75f64b7d41fff6081a665226890f518153&v=4","url":"https://github.com/XYShaoKang"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AIMPx","bodyHTML":"<p dir=\"auto\">先看一个例子：弥补 Promise.all 不按顺序执行，因此我们想要的效果就是：按顺序执行的串行请求队列；</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"(() =&gt; {\n  // 该例子是弥补 Promise.all 不按顺序执行\n  console.log('执行了 sequenceTasksWithPromise')\n\n  const createEvent = () =&gt; {\n    return new Promise((resolve, reject) =&gt; {\n      setTimeout(() =&gt; {\n        console.log('执行了一次 createEvent, time :', new Date().getTime())\n        resolve(1)\n      }, 2000)\n    })\n  }\n  const tasks = [createEvent, createEvent, createEvent];\n  // 第一次 Promise.resolve()，他表示一个动作已经执行完成\n  // 开始正式执行\n  // 第一 prev.then(() =&gt; next()   此刻的 prev == Promise.resolve() 返回的是一个promise对象，执行then ，此刻的 next() == 第一个 createEvent\n  // 当第一个createEvent执行成功resolve， prev.then(() =&gt; next()， 此刻 prev == 第一个createEvent返回的promise 执行它的then，此刻的 next() == 第二个 createEvent\n  // 当第二个createEvent执行成功resolve，prev.then(() =&gt; next()， 此刻 prev == 第二个createEvent返回的promise 执行它的then，此刻的 next() == 第三个 createEvent\n  // 当第三个createEvent执行成功resolve 循环结束，返回一个promise， 就是 doTasks\n  const doTasks = tasks.reduce((prev, next) =&gt; prev.then(() =&gt; next()), Promise.resolve());\n\n  doTasks.then(res =&gt; {\n    console.log(res);\n  })\n\n})();\"><pre class=\"notranslate\"><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 该例子是弥补 Promise.all 不按顺序执行</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'执行了 sequenceTasksWithPromise'</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">createEvent</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'执行了一次 createEvent, time :'</span><span class=\"pl-kos\">,</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Date</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getTime</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2000</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">tasks</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">createEvent</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">createEvent</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">createEvent</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">// 第一次 Promise.resolve()，他表示一个动作已经执行完成</span>\n  <span class=\"pl-c\">// 开始正式执行</span>\n  <span class=\"pl-c\">// 第一 prev.then(() =&gt; next()   此刻的 prev == Promise.resolve() 返回的是一个promise对象，执行then ，此刻的 next() == 第一个 createEvent</span>\n  <span class=\"pl-c\">// 当第一个createEvent执行成功resolve， prev.then(() =&gt; next()， 此刻 prev == 第一个createEvent返回的promise 执行它的then，此刻的 next() == 第二个 createEvent</span>\n  <span class=\"pl-c\">// 当第二个createEvent执行成功resolve，prev.then(() =&gt; next()， 此刻 prev == 第二个createEvent返回的promise 执行它的then，此刻的 next() == 第三个 createEvent</span>\n  <span class=\"pl-c\">// 当第三个createEvent执行成功resolve 循环结束，返回一个promise， 就是 doTasks</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">doTasks</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">prev</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">prev</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-s1\">doTasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">如何明白了上面的原理，那么我们实现我们的题目：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const ajaxArr: Ajax[] = [ajax1, ajax2, ajax4];\n\nfunction serial(ajaxArr: Ajax[]) {\n  // 实现...\n  ajaxArr.reduce((prev, next) =&gt; prev.then(() =&gt; next()), Promise.resolve());\n}\n\nserial(ajaxArr)\n// 1秒后ajax1请求完毕\n// 再过2秒，ajax2请求完毕\n// 再过4秒，ajax4请求完毕\n\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">ajaxArr</span>: <span class=\"pl-v\">Ajax</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">ajax1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ajax2</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ajax4</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ajaxArr</span>: <span class=\"pl-v\">Ajax</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 实现...</span>\n  <span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">prev</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">prev</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 1秒后ajax1请求完毕</span>\n<span class=\"pl-c\">// 再过2秒，ajax2请求完毕</span>\n<span class=\"pl-c\">// 再过4秒，ajax4请求完毕</span></pre></div>","author":{"login":"supermanklk","avatarUrl":"https://avatars.githubusercontent.com/u/28639384?u=02c9e7b01132ff83f7ac72ffce3ea8c4e486f144&v=4","url":"https://github.com/supermanklk"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AIcwd","bodyHTML":"<p dir=\"auto\">先说一下设计的思路：</p>\n<ol dir=\"auto\">\n<li>异步选择串行，那么可能有值传递的需求</li>\n<li>考虑到成功和失败的场景，那么提供中断和继续的能力</li>\n<li>整条链路完成后返回Promise可以进一步拓展能力</li>\n</ol>\n<p dir=\"auto\">实现</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"    async function serial(list, errHandler) {\n      let response = null;\n      for (const task of list) {\n        try {\n          response = await task(response)\n        } catch (e) {\n          if (typeof errHandler !== &quot;function&quot;) {\n            throw e\n          }\n          if (!await errHandler(e, task, response)) {\n            break\n          }\n        }\n      }\n      return response\n    }\"><pre class=\"notranslate\">    <span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">list</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">errHandler</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">let</span> <span class=\"pl-s1\">response</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">task</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">list</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-s1\">response</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">task</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">response</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">errHandler</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">\"function\"</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">throw</span> <span class=\"pl-s1\">e</span>\n          <span class=\"pl-kos\">}</span>\n          <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-k\">await</span> <span class=\"pl-s1\">errHandler</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">task</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">response</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">break</span>\n          <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">response</span>\n    <span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">测试：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"    const generate = (time, succ, cb) =&gt; async params =&gt; await new Promise((resolve, reject) =&gt; {\n      setTimeout(() =&gt; {\n        succ ? resolve(cb &amp;&amp; cb(params)) : reject(cb &amp;&amp; cb(params))\n      }, time)\n    })\n\n    const list = [\n      generate(1000, true, lastRes =&gt; {\n        console.log('one, last return is: ', lastRes)\n        return { name: 'one' }\n      }),\n      generate(2000, false, lastRes =&gt; {\n        console.log('two, last return is: ', lastRes)\n        return { name: 'two' }\n      }),\n      generate(4000, true, lastRes =&gt; {\n        console.log('three, last return is: ', lastRes)\n        return { name: 'three' }\n      }),\n    ]\n\n    serial(list, (error, task, lastResponse) =&gt; {\n      console.error(error)\n      if (error) { /* do something */ }\n      if (task) {/* do someting */ }\n      return true /* continue or not  */\n    })\"><pre class=\"notranslate\">    <span class=\"pl-k\">const</span> <span class=\"pl-en\">generate</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">succ</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">cb</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">async</span> <span class=\"pl-s1\">params</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">await</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">succ</span> ? <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cb</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">cb</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">params</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> : <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cb</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">cb</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">params</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">list</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>\n      <span class=\"pl-en\">generate</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1000</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">lastRes</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'one, last return is: '</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">lastRes</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'one'</span> <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-en\">generate</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2000</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">lastRes</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'two, last return is: '</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">lastRes</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'two'</span> <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-en\">generate</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4000</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">lastRes</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'three, last return is: '</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">lastRes</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'three'</span> <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">]</span>\n\n    <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">list</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">task</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">lastResponse</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c\">/* do something */</span> <span class=\"pl-kos\">}</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-c\">/* do someting */</span> <span class=\"pl-kos\">}</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span> <span class=\"pl-c\">/* continue or not  */</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>","author":{"login":"0753Ljuc","avatarUrl":"https://avatars.githubusercontent.com/u/59270826?u=e3f961f6debc1ef11b75f1c4af28b6c012c4ef34&v=4","url":"https://github.com/0753Ljuc"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AIfLn","bodyHTML":"<p dir=\"auto\">// 写一个构造函数,能添加新任务<br>\nconst createEvent = () =&gt; {<br>\nreturn new Promise((resolve, reject) =&gt; {<br>\nsetTimeout(() =&gt; {<br>\nconsole.log('执行了一次 createEvent, time :', new Date().getTime())<br>\nresolve(1)<br>\n}, 1000)<br>\n})<br>\n}</p>\n<p dir=\"auto\">function Querytask(list){<br>\nthis.tasks = list<br>\nthis.res = []<br>\nthis.querying = true</p>\n<p dir=\"auto\">// 递归调用<br>\nthis.query = async function (){<br>\nconst current = this.tasks?.shift()<br>\nif(current){<br>\nawait current()<br>\nthis.query()<br>\nreturn<br>\n}</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"this.querying = false\"><pre class=\"notranslate\"><code class=\"notranslate\">this.querying = false\n</code></pre></div>\n<p dir=\"auto\">}<br>\n// 添加的时候调起query<br>\nthis.add = function (querylist){<br>\nthis.tasks = this.tasks.concat(querylist)</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if(!this.querying){ \n  this.querying = true,\n  this.query()\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">if(!this.querying){ \n  this.querying = true,\n  this.query()\n}\n</code></pre></div>\n<p dir=\"auto\">}<br>\n// 起始执行一次<br>\nthis.query()<br>\n}</p>\n<p dir=\"auto\">const tashInstance = new Querytask([createEvent, createEvent, createEvent])</p>\n<p dir=\"auto\">tashInstance.add(createEvent)<br>\ntashInstance.add(createEvent)<br>\ntashInstance.add(createEvent)</p>","author":{"login":"cloudflypeng","avatarUrl":"https://avatars.githubusercontent.com/u/44285412?u=197c85674725179445e36cd8918bbfb32a0aada2&v=4","url":"https://github.com/cloudflypeng"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AIo9u","bodyHTML":"<p dir=\"auto\">刚好今天在红宝书里看到 Symbol 的迭代：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class Emitter {\n  constructor(max) {\n    this.max = max;\n    this.asyncIdx = 0;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    while (this.asyncIdx &lt; this.max) {\n      yield new Promise(resolve =&gt; {\n        setTimeout(() =&gt; {\n          resolve(this.asyncIdx++);\n        }, 1000);\n      });\n    }\n  }\n}\n\n(async function asyncCount() {\n  let emitter = new Emitter(5);\n\n  for await (const x of emitter) {\n    console.log(x);\n  }\n})();\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-v\">Emitter</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">max</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">max</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">max</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">asyncIdx</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">async</span> <span class=\"pl-c1\">*</span><span class=\"pl-kos\">[</span><span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">asyncIterator</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">asyncIdx</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">max</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">yield</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">asyncIdx</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">asyncCount</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">emitter</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Emitter</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">for</span> <span class=\"pl-k\">await</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">x</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">emitter</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>","author":{"login":"yearth","avatarUrl":"https://avatars.githubusercontent.com/u/12742400?u=0a6e6f05ecb3b00661fd1f04b2ecce8dd4249534&v=4","url":"https://github.com/yearth"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AIpLU","bodyHTML":"<p dir=\"auto\">异步compose函数</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const serial = function(...args) {\n  const init = args.pop()\n  return function(...arg) {\n    return args.reverse().reduce(function(sequence, func) {\n      return sequence.then(function(result) {\n        return func.call(null, result)\n      })\n    }, Promise.resolve(init.apply(null, arg)))\n  }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">serial</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">init</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">pop</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">arg</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reverse</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">sequence</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">func</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">sequence</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">func</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">init</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">arg</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"fishcoderman","avatarUrl":"https://avatars.githubusercontent.com/u/33595825?u=938416b85277d9b786dd5e00789ea6b2f899fb3b&v=4","url":"https://github.com/fishcoderman"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AIsUt","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const runPromiseInSequence = (array, value) =&gt; {\n  return array.reduce(\n    (promiseChain, currentFunc) =&gt; promiseChain.then(currentFunc),\n    promise.resolve(value)  \n  )\n}\n\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">runPromiseInSequence</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span>\n    <span class=\"pl-kos\">(</span><span class=\"pl-s1\">promiseChain</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">currentFunc</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">promiseChain</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">currentFunc</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s1\">promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span>  \n  <span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"Ha0ran2001","avatarUrl":"https://avatars.githubusercontent.com/u/73927445?u=51b77bd26b8dbe99cd4a9c86f8f5051df49626a2&v=4","url":"https://github.com/Ha0ran2001"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AJJkc","bodyHTML":"<p dir=\"auto\">思想<br>\n借鉴reduce的思维实现串行数据互通<br>\n拓展reduce不能支持异步的功能<br>\n提示：核心代码在 //=================  中间</p>\n<p dir=\"auto\">核心代码</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"async function serial(queue, fn = (p, v) =&gt; [...p, v], initValue = []) {\n    return await asyncReduce(queue, fn, initValue);\n    // 串行执行队列\n    async function asyncReduce(queue, fn, initData) {\n        let resData = initData;\n        for (let i = 0; i &lt; queue.length; i++) {\n            // 保证可以拿到上次的串行结果resData\n            const data = await queue[i](resData).then(d =&gt; d, e =&gt; e)\n            resData = fn(resData, data)\n        }\n        return resData\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">queue</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">p</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">v</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-s1\">p</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">v</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">initValue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">asyncReduce</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">queue</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">initValue</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-c\">// 串行执行队列</span>\n    <span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">asyncReduce</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">queue</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">initData</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">let</span> <span class=\"pl-s1\">resData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">initData</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c\">// 保证可以拿到上次的串行结果resData</span>\n            <span class=\"pl-k\">const</span> <span class=\"pl-s1\">data</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">queue</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resData</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">d</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">e</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">e</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-s1\">resData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resData</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">resData</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">测试代码</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 任务构造器\nconst getTask = (data, delay = 500, isErro = false) =&gt; (preData) =&gt; {\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            console.log(data);\n            isErro ? reject(data) : resolve(data)\n        }, delay)\n    })\n}\n// 创建任务\nconst taskQueue = [getTask(1), getTask(2, 2000, true), getTask(3)];\n\n\n/**\n * 执行任务函数\n * @param {*} queue 队列 \n * @param {*} fn 扩展每步之行后的fn回调 用于处理返回结果\n * @param {*} initValue 串行结果的初始值\n * @returns \n */\n\n\n// ======================================\nasync function serial(queue, fn = (p, v) =&gt; [...p, v], initValue = []) {\n    return await asyncReduce(queue, fn, initValue);\n    // 串行执行队列\n    async function asyncReduce(queue, fn, initData) {\n        let resData = initData;\n        for (let i = 0; i &lt; queue.length; i++) {\n            // 保证可以拿到上次的串行结果resData\n            const data = await queue[i](resData).then(d =&gt; d, e =&gt; e)\n            resData = fn(resData, data)\n        }\n        return resData\n    }\n}\n// ======================================\n\nconsole.log('------测试Demo1------')\nserial(taskQueue).then(console.log)\n\n// 下面是测试Demo\n// demo 比如我们本次需要获取上次任务的请求结果并进行相加\nconst demoRequest = (data) =&gt; (preData) =&gt; new Promise(resolve =&gt; setTimeout(() =&gt; {\n    console.log(`上次请求的数据${preData},本次的数据${data}, 返回的数据${preData + data}`)\n    resolve(data)\n}, 500))\nconst demoTask = [demoRequest(1), demoRequest(2), demoRequest(3)];\nsetTimeout(() =&gt; {\n    console.log('------测试Demo2------');\n    serial(demoTask, (p, v) =&gt; p + v, 0).then(console.log)\n}, 5000)\"><pre class=\"notranslate\"><span class=\"pl-c\">// 任务构造器</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">getTask</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">500</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">isErro</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">preData</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-s1\">isErro</span> ? <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span> : <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// 创建任务</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">taskQueue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">getTask</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">getTask</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2000</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">getTask</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n\n<span class=\"pl-c\">/**</span>\n<span class=\"pl-c\"> * 执行任务函数</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> {<span class=\"pl-smi\">*</span>} queue 队列 </span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> {<span class=\"pl-smi\">*</span>} fn 扩展每步之行后的fn回调 用于处理返回结果</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> {<span class=\"pl-smi\">*</span>} initValue 串行结果的初始值</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@returns</span> </span>\n<span class=\"pl-c\"> */</span>\n\n\n<span class=\"pl-c\">// ======================================</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">queue</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">p</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">v</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-s1\">p</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">v</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">initValue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">asyncReduce</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">queue</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">initValue</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-c\">// 串行执行队列</span>\n    <span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">asyncReduce</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">queue</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">initData</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">let</span> <span class=\"pl-s1\">resData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">initData</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c\">// 保证可以拿到上次的串行结果resData</span>\n            <span class=\"pl-k\">const</span> <span class=\"pl-s1\">data</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">queue</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resData</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">d</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">e</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">e</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-s1\">resData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resData</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">resData</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// ======================================</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'------测试Demo1------'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">taskQueue</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c\">// 下面是测试Demo</span>\n<span class=\"pl-c\">// demo 比如我们本次需要获取上次任务的请求结果并进行相加</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">demoRequest</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">preData</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`上次请求的数据<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">preData</span><span class=\"pl-kos\">}</span></span>,本次的数据<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">}</span></span>, 返回的数据<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">preData</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">500</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">demoTask</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">demoRequest</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">demoRequest</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">demoRequest</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'------测试Demo2------'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">demoTask</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">p</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">v</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">p</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">v</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">5000</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/81680241/159680119-d00f11b9-fba0-46c0-a801-09bdf1339e0c.png\"><img width=\"305\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81680241/159680119-d00f11b9-fba0-46c0-a801-09bdf1339e0c.png\" style=\"max-width: 100%;\"></a></p>","author":{"login":"codingJJJ","avatarUrl":"https://avatars.githubusercontent.com/u/81680241?u=ea1e86c5699c8a80d8cde9e6e7afc1042024bc68&v=4","url":"https://github.com/codingJJJ"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AKAk_","bodyHTML":"<p dir=\"auto\">本来这个方法是写给并行请求的，但将并发参数设置为 1 即可实现串行请求<br>\n原理 promise 为pending 时会阻塞代码运行</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function limitParallel(lists = [], limit = 1) {\n  let cur = 0;\n  let pending = [];\n  let res = [];\n  let done = 0;\n\n  async function add(f, i, allResolve) {\n    if (cur &gt;= limit) {\n      // promise 为pending 时会阻塞代码运行\n      await new Promise((res1, rej1) =&gt; {\n        pending.push(res1);\n      });\n    }\n    cur++;\n    let temp = await f();\n    done++;\n    cur--;\n    if (pending.length &gt; 0) {\n      pending.shift()();\n    }\n    res[i] = temp;\n    if (done === lists.length) {\n      allResolve(res);\n    }\n  }\n\n  return new Promise(async (resolve, reject) =&gt; {\n    lists.forEach((f, i) =&gt; {\n      add(f, i, resolve)\n    });\n  })\n}\n\nfunction genPromise(i) {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(`${i}${i}`)\n    }, Math.random() * 1000);\n  });\n}\nlimitParallel(Array.from({length: 10}, (_, i) =&gt; {\n   return genPromise.bind(null, i)\n}), 1).then(console.log);\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">limitParallel</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">lists</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">limit</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">cur</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">pending</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">done</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">f</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">allResolve</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">cur</span> <span class=\"pl-c1\">&gt;=</span> <span class=\"pl-s1\">limit</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c\">// promise 为pending 时会阻塞代码运行</span>\n      <span class=\"pl-k\">await</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">rej1</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">pending</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-s1\">cur</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">temp</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">done</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">cur</span><span class=\"pl-c1\">--</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">pending</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">pending</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-s1\">res</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">temp</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">done</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">lists</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">allResolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">lists</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">f</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">f</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">genPromise</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">}</span></span><span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Math</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">random</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">limitParallel</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">from</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-c1\">length</span>: <span class=\"pl-c1\">10</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">_</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n   <span class=\"pl-k\">return</span> <span class=\"pl-s1\">genPromise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">打印结果<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/17136707/159708271-44604201-0a01-4e86-a5f6-5aad6eb20eb9.png\"><img src=\"https://user-images.githubusercontent.com/17136707/159708271-44604201-0a01-4e86-a5f6-5aad6eb20eb9.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>","author":{"login":"fanerge","avatarUrl":"https://avatars.githubusercontent.com/u/17136707?u=d7250b0655c87b8e8e1cdaf826754fe5e6f68e80&v=4","url":"https://github.com/fanerge"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AOFBR","bodyHTML":"<p dir=\"auto\">这样是不是看起来更简洁</p>\n<blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function async serial(ajaxArr) {\n for (const i of ajaxArr) {\n     await i()\n }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-s1\">async</span> <span class=\"pl-en\">serial</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">i</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">ajaxArr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n     <span class=\"pl-k\">await</span> <span class=\"pl-en\">i</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</blockquote>","author":{"login":"Marcowutt","avatarUrl":"https://avatars.githubusercontent.com/u/33864252?v=4","url":"https://github.com/Marcowutt"},"replies":null}}]}}},"pageContext":{"number":6,"previous":{"title":"如何应对产品经理中途改需求？","number":5},"next":{"title":"遇到线上bug该如何处理？","number":8}}},
    "staticQueryHashes": ["151096407","2861350382"]}