{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/53",
    "result": {"data":{"issuesJson":{"id":"9ad37918-45f3-51eb-86ee-6ba80fa3b491","title":"实现相对完备的深拷贝方法","number":53,"bodyHTML":"\n<h3 dir=\"auto\">要实现的功能</h3>\n\n<p dir=\"auto\">实现一个深拷贝方法，特别注意需要支持如下数据结构：</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">支持<code class=\"notranslate\">Date</code></p>\n</li>\n<li>\n<p dir=\"auto\">支持<code class=\"notranslate\">Symbol</code></p>\n</li>\n<li>\n<p dir=\"auto\">支持<code class=\"notranslate\">Function</code></p>\n</li>\n<li>\n<p dir=\"auto\">支持<code class=\"notranslate\">RegExp</code></p>\n</li>\n<li>\n<p dir=\"auto\">对于<strong>环状引用</strong>不会报错</p>\n</li>\n</ul>\n<p dir=\"auto\"><strong>环状引用</strong>参考如下数据结构：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const a = {};\na.a = a;\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">;</span></pre></div>\n<h3 dir=\"auto\">代码示例</h3>\n\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function deepClone(obj) {\n // ...实现\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n <span class=\"pl-c\">// ...实现</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h3 dir=\"auto\">最佳答案评选标准</h3>\n \n<ol dir=\"auto\">\n<li>请写出实现思路、代码，并为代码的关键步骤增写注释</li>\n<li>附带测试用例是加分项</li>\n<li>不需要考虑异常发生</li>\n<li>不过度设计，代码简洁优雅是加分项</li>\n</ol>\n<h2 dir=\"auto\">最佳答案</h2>\n<p dir=\"auto\"><a href=\"https://github.com/BetaSu/fe-hunter/issues/53#issuecomment-1092382804\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/53/hovercard\">Chorer的回答</a></p>\n<h3 dir=\"auto\">答题同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">答题规范：请在<code class=\"notranslate\">一次评论</code>中完成作答，后续修改也请编辑该评论，而不是追加新的评论</p>\n</li>\n<li>\n<p dir=\"auto\">评选标准：最佳答案由<code class=\"notranslate\">围观同学</code>的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji> 和<a href=\"https://github.com/BetaSu\">卡颂</a>共同决定</p>\n</li>\n<li>\n<p dir=\"auto\">评选时间：一般是问题发布24小时后评选，如果问题发布当天回答数较少，问题悬赏金额可能增加，同时悬赏时间也会增加</p>\n</li>\n</ul>\n<h3 dir=\"auto\">围观同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">对于你满意的答案，请不要吝惜你的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>，这是评选<strong>最佳答案</strong>的依据</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">非答题的评论</code>会被删除，问题相关讨论请在<a href=\"https://github.com/BetaSu/fe-hunter\">赏金猎人群</a>中进行</p>\n</li>\n</ul>","updatedAt":"2022-04-12T02:08:58Z","upvoteCount":null,"author":{"login":"BetaSu","avatarUrl":"https://avatars.githubusercontent.com/u/15828041?u=3b08cdf9f9b49dbead9ffb020a94d925904d2b74&v=4","url":"https://github.com/BetaSu"},"category":null,"labels":{"edges":[{"node":{"name":"JS","color":"ffee58"}},{"node":{"name":"动手","color":"42a5f5"}}]},"comments":{"edges":[{"node":{"id":"IC_kwDOHCfdf85BHEi7","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function deepClone(target) {\n    const map = new WeakMap()\n    \n    function isObject(target) {\n        return (typeof target === 'object' &amp;&amp; target ) || typeof target === 'function'\n    }\n\n    function clone(data) {\n        if (!isObject(data)) {\n            return data\n        }\n       if(typeof data==='symbol'){ \n            return Symbol.for(data.description);\n        }\n        if ([Date, RegExp].includes(data.constructor)) {\n            return new data.constructor(data)\n        }\n        if (typeof data === 'function') {\n            return new Function('return ' + data.toString())()\n        }\n        const exist = map.get(data)\n        if (exist) {\n            return exist\n        }\n        if (data instanceof Map) {\n            const result = new Map()\n            map.set(data, result)\n            data.forEach((val, key) =&gt; {\n                if (isObject(val)) {\n                    result.set(key, clone(val))\n                } else {\n                    result.set(key, val)\n                }\n            })\n            return result\n        }\n        if (data instanceof Set) {\n            const result = new Set()\n            map.set(data, result)\n            data.forEach(val =&gt; {\n                if (isObject(val)) {\n                    result.add(clone(val))\n                } else {\n                    result.add(val)\n                }\n            })\n            return result\n        }\n        const keys = Reflect.ownKeys(data)\n        const allDesc = Object.getOwnPropertyDescriptors(data)\n        const result = Object.create(Object.getPrototypeOf(data), allDesc)\n        map.set(data, result)\n        keys.forEach(key =&gt; {\n            const val = data[key]\n            if (isObject(val)) {\n                result[key] = clone(val)\n            } else {\n                result[key] = val\n            }\n        })\n        return result\n    }\n\n    return clone(target)\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">map</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">WeakMap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    \n    <span class=\"pl-k\">function</span> <span class=\"pl-en\">isObject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">target</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">target</span> <span class=\"pl-kos\">)</span> <span class=\"pl-c1\">||</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">target</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-k\">function</span> <span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-en\">isObject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">data</span>\n        <span class=\"pl-kos\">}</span>\n       <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">data</span><span class=\"pl-c1\">===</span><span class=\"pl-s\">'symbol'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span> \n            <span class=\"pl-k\">return</span> <span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">description</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-v\">Date</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">includes</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">constructor</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">data</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Function</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'return '</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-s1\">exist</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">exist</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">exist</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Map</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">val</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">key</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">isObject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">val</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                    <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">val</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n                <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n                    <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">val</span><span class=\"pl-kos\">)</span>\n                <span class=\"pl-kos\">}</span>\n            <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Set</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Set</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">val</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">isObject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">val</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                    <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">val</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n                <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n                    <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">val</span><span class=\"pl-kos\">)</span>\n                <span class=\"pl-kos\">}</span>\n            <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-s1\">keys</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Reflect</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">ownKeys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-s1\">allDesc</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getOwnPropertyDescriptors</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getPrototypeOf</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">allDesc</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-s1\">keys</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">const</span> <span class=\"pl-s1\">val</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span>\n            <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">isObject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">val</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-s1\">result</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">val</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-s1\">result</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">val</span>\n            <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"GitHdu","avatarUrl":"https://avatars.githubusercontent.com/u/15519616?u=c08f3a955452755d4fee1f5915d30d0c28d40194&v=4","url":"https://github.com/GitHdu"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85BHHBU","bodyHTML":"<h3 dir=\"auto\">基础版本</h3>\n<p dir=\"auto\">深拷贝的核心就是浅拷贝 + 递归，即通过不断的递归到达对象的最里层，完成基本类型属性的拷贝。</p>\n<p dir=\"auto\">先从最基础的深拷贝版本看起，即只考虑数组和对象字面量的情况：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function deepClone(target){\n    if(typeof target === 'object'){\n        let cloneTarget = Array.isArray(target) ? []:{}\n        Reflect.ownKeys(target).forEach(key =&gt; {\n            cloneTarget[key] = deepClone(target[key])\n        })\n        return cloneTarget\n    } else {\n        return target\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">target</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">let</span> <span class=\"pl-s1\">cloneTarget</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>:<span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n        <span class=\"pl-v\">Reflect</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">ownKeys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">cloneTarget</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">target</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">根据初始传入的 <code class=\"notranslate\">target</code> 是一个对象字面量还是数组，决定最终返回的 <code class=\"notranslate\">cloneTarget</code> 是对象还是数组。接着遍历 <code class=\"notranslate\">target</code> 的每一个自身可枚举属性，递归调用 <code class=\"notranslate\">deepClone</code>，如果属性已经是基本类型，则直接返回；如果还是对象或者数组，就和初始的 <code class=\"notranslate\">target</code> 进行一样的处理。最后，把处理好的结果一一拷贝给 <code class=\"notranslate\">cloneTarget</code>。</p>\n<h3 dir=\"auto\">解决循环引用</h3>\n<p dir=\"auto\">对于初次传入的对象或者数组，使用一个 WeakMap 记录当前目标和拷贝结果的映射关系，当检测到再次传入相同的目标时，不再进行重复的拷贝，而是直接从 WeakMap 中取出它对应的拷贝结果返回。</p>\n<p dir=\"auto\">改进后的代码如下：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function deepClone(target,map = new WeakMap()){\n    if(typeof target === 'object'){\n        let cloneTarget = Array.isArray(target) ? []:{}\n        // 处理循环引用的问题\n        if(map.has(target)) return map.get(target)\n        map.set(target,cloneTarget)\n        Reflect.ownKeys(target).forEach(key =&gt; {\n            cloneTarget[key] = deepClone(target[key],map)\n        })\n        return cloneTarget\n    } else {\n        return target\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">map</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">WeakMap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">target</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">let</span> <span class=\"pl-s1\">cloneTarget</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>:<span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n        <span class=\"pl-c\">// 处理循环引用的问题</span>\n        <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">has</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span> <span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-v\">Reflect</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">ownKeys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">map</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">cloneTarget</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">target</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h3 dir=\"auto\">处理其它数据类型</h3>\n<p dir=\"auto\">深拷贝对象，这个对象应该理解为引用类型，所以它其实还包括了很多种类：除了上面已经处理的对象字面量和数组，还有 Set、Map、类数组对象、函数、基本类型的包装类型等。</p>\n<h4 dir=\"auto\">1）类型判断函数</h4>\n<p dir=\"auto\">为了更好地判断是引用数据类型还是基本数据类型，可以使用一个 <code class=\"notranslate\">isObject</code> 函数：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function isObject(o){\n    return o !== null &amp;&amp; (typeof o === 'object' || typeof o === 'function')\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">isObject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> <span class=\"pl-c1\">||</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">这样，所有的对象字面量、数组、Set、Map、类数组对象、函数、基本类型的包装类型等，都视为 object。</p>\n<p dir=\"auto\">为了更准确地判断具体是什么数据类型，可以使用一个 <code class=\"notranslate\">getType</code> 函数：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function getType(o){\n    return Object.prototype.toString.call(o).slice(8,-1)\n}\n// getType(1)      &quot;Number&quot;\n// getType(null)   &quot;Null&quot;\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">toString</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">8</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">-</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// getType(1)      \"Number\"</span>\n<span class=\"pl-c\">// getType(null)   \"Null\"</span></pre></div>\n<h4 dir=\"auto\">2）初始化函数</h4>\n<p dir=\"auto\">之前深拷贝对象字面量或者数组的时候，首先会将最终返回的结果 <code class=\"notranslate\">cloneTarget</code> 初始化为 <code class=\"notranslate\">[]</code> 或者 <code class=\"notranslate\">{}</code>。同样地，对于 Set、Map 以及类数组对象，也需要进行相同的操作，所以最好用一个函数统一实现 <code class=\"notranslate\">cloneTarget</code> 的初始化。</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function initCloneTarget(target){\n    return new target.constructor()\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">initCloneTarget</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">通过 <code class=\"notranslate\">target.constructor</code> 可以获得传进来的实例的构造函数，利用这个构造函数新创建一个同类型的实例并返回。</p>\n<h4 dir=\"auto\">3）处理可以继续遍历的对象：Set、Map、类数组对象</h4>\n<p dir=\"auto\">处理 Set 和 Map 的流程基本和对象字面量以及数组差不多，但是不能采用直接赋值的方式，而要使用 <code class=\"notranslate\">add</code> 方法或者 <code class=\"notranslate\">set</code> 方法，所以稍微改进一下。至于类数组对象，其实和数组以及对象字面量的形式差不多，所以可以一块处理。</p>\n<p dir=\"auto\">代码如下：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function deepClone(target,map = new WeakMap()){\n    // 如果是基本类型，直接返回即可\n    if(!isObject(target))    return target   \n    \n    // 初始化返回结果\n    let type = getType(target)\n    let cloneTarget = initCloneTarget(target)\n    \n    // 处理循环引用\n    if(map.has(target)){\n        return map.get(target)\n    } else {\n        map.set(target,cloneTarget)\n    }   \n    \n    // 处理 Set    \n    if(type === 'Set'){\n        target.forEach(value =&gt; {\n            cloneTarget.add(deepClone(value,map))\n        })\n    }\n    // 处理 Map\n    else if(type === 'Map'){\n        target.forEach((value,key) =&gt; {\n            cloneTarget.set(key,deepClone(value,map))\n        })\n    }\n    \n    // 处理对象字面量、数组、类数组对象\n    else if(type === 'Object' || type === 'Array' || type === 'Arguments'){\n        Reflect.ownKeys(target).forEach(key =&gt; {\n            cloneTarget[key] = deepClone(target[key],map)\n        })\n    }\n    return cloneTarget\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">map</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">WeakMap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// 如果是基本类型，直接返回即可</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-en\">isObject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">target</span>   \n    \n    <span class=\"pl-c\">// 初始化返回结果</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">type</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">cloneTarget</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">initCloneTarget</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>\n    \n    <span class=\"pl-c\">// 处理循环引用</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">has</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>   \n    \n    <span class=\"pl-c\">// 处理 Set    </span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Set'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">map</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-c\">// 处理 Map</span>\n    <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Map'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">,</span><span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">map</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    \n    <span class=\"pl-c\">// 处理对象字面量、数组、类数组对象</span>\n    <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Object'</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Array'</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Arguments'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-v\">Reflect</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">ownKeys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">map</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">cloneTarget</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h4 dir=\"auto\">4）处理不能继续遍历的对象：函数、错误对象、日期对象、正则对象、基本类型的包装对象</h4>\n<p dir=\"auto\">对于上面这些对象，我们不能像基本数据类型那样直接返回，否则将返回相同的引用，并没有达到拷贝的目的。正确的做法，应该是拷贝一份副本，再直接返回。</p>\n<p dir=\"auto\">如何拷贝呢？这里又分为两种情况。其中，String、Boolean、Number、错误对象、日期对象都可以通过 new 的方式返回一个实例副本；而 Symbol、函数、正则对象的拷贝则无法通过简单的 new 拷贝副本，需要单独处理。</p>\n<p dir=\"auto\"><strong>拷贝 Symbol</strong></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function cloneSymbol(target){\n    return Object(target.valueOf())    \n    // 或者\n    return Object(Symbol.prototype.valueOf.call(target))\n    // 或者\n    return Object(Symbol(target.description))\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">cloneSymbol</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>    \n    <span class=\"pl-c\">// 或者</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">valueOf</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-c\">// 或者</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">description</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">PS：这里的 <code class=\"notranslate\">target</code> 是 Symbol 基本类型的包装类型，调用 <code class=\"notranslate\">valueOf</code> 可以获得它对应的拆箱结果，再把这个拆箱结果传给 Object，就可以构造原包装类型的副本了；为了保险起见，可以通过 Symbol 的原型调用 <code class=\"notranslate\">valueOf</code>；可以通过 description 获得 symbol 的描述符，基于此也可以构造原包装类型的副本。</p>\n<p dir=\"auto\"><strong>拷贝正则对象（参考 lodash 的做法）</strong></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function cloneReg(target) {\n    const reFlags = /\\w*$/;\n    const result = new RegExp(target.source, reFlags.exec(target));\n    result.lastIndex = target.lastIndex;\n    return result;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">cloneReg</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">reFlags</span> <span class=\"pl-c1\">=</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">\\w</span><span class=\"pl-c1\">*</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">source</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reFlags</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">exec</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">lastIndex</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">lastIndex</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><strong>拷贝函数（实际上函数没有必要拷贝）</strong></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function cloneFunction(target){\n    return eval(`(${target})`)\n    // 或者\n    return new Function(`return (${target})()`)\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">cloneFunction</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">eval</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`(<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">}</span></span>)`</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-c\">// 或者</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Function</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`return (<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">}</span></span>)()`</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">PS：传给 new Function 的参数声明了新创建的函数实例的函数体内容</p>\n<p dir=\"auto\">接下来，用一个 <code class=\"notranslate\">directCloneTarget</code> 函数处理以上所有情况：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function directCloneTarget(target,type){\n    let _constructor = target.constructor\n\tswitch(type){\n        case 'String':\n        case 'Boolean':\n        case 'Number':\n        case 'Error':\n        case 'Date':\n        \treturn new _constructor(target.valueOf())\n            // 或者\n            return new Object(target.valueOf())\n            // 或者\n            return new Object(_constructor.prototype.valueOf.call(target))\n        case 'RegExp':\n            return cloneReg(target)        \n        case 'Symbol':\n            return cloneSymbol(target)        \n        case 'Function':            \n            return cloneFunction(target) \n        default:            \n            return null    \n    }            \n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">directCloneTarget</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">type</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">_constructor</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">constructor</span>\n\t<span class=\"pl-k\">switch</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">case</span> <span class=\"pl-s\">'String'</span>:\n        <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Boolean'</span>:\n        <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Number'</span>:\n        <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Error'</span>:\n        <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Date'</span>:\n        \t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">_constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-c\">// 或者</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-c\">// 或者</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">_constructor</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">valueOf</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">case</span> <span class=\"pl-s\">'RegExp'</span>:\n            <span class=\"pl-k\">return</span> <span class=\"pl-en\">cloneReg</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>        \n        <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Symbol'</span>:\n            <span class=\"pl-k\">return</span> <span class=\"pl-en\">cloneSymbol</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>        \n        <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Function'</span>:            \n            <span class=\"pl-k\">return</span> <span class=\"pl-en\">cloneFunction</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span> \n        <span class=\"pl-k\">default</span>:            \n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>    \n    <span class=\"pl-kos\">}</span>            \n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">PS：注意这里有一些坑。</p>\n<ul dir=\"auto\">\n<li>为什么使用 <code class=\"notranslate\">return new _constructor(target.valueOf())</code> 而不是 <code class=\"notranslate\">return new _constructor(target)</code> 呢？因为如果传进来的 <code class=\"notranslate\">target</code> 是 <code class=\"notranslate\">new Boolean(false)</code>，那么最终返回的实际上是 <code class=\"notranslate\">new Boolean(new Boolean(false))</code> ，由于参数并非空对象，因此它的值对应的不是期望的 false，而是 true。所以，最好使用 <code class=\"notranslate\">valueOf</code> 获得包装类型对应的真实值。</li>\n<li>也可以不使用基本类型对应的构造函数 <code class=\"notranslate\">_constructor</code>，而是直接 <code class=\"notranslate\">new Object(target.valueOf())</code> 对基本类型进行包装</li>\n<li>考虑到 valueOf 可能被重写，为了保险起见，可以通过基本类型对应的构造函数 <code class=\"notranslate\">_constructor</code> 去调用 valueOf 方法</li>\n</ul>\n<h3 dir=\"auto\">最终版本</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 可以继续遍历的类型\nconst objectToInit = ['Object','Array','Set','Map','Arguments']\n\n// 判断是否是引用类型\nfunction isObject(o){\n  return o !== null &amp;&amp; (typeof o === 'object' || typeof o === 'function')\n}\n// 判断具体的数据类型\nfunction getType(o){\n  return Object.prototype.toString.call(o).slice(8,-1)\n}\n// 初始化函数\nfunction initCloneTarget(target){\n  return new target.constructor()\n}\n// 拷贝 Symbol\nfunction cloneSymbol(target){\n\treturn Object(target.valueOf())    \n    // 或者\n    return Object(Symbol.prototype.valueOf.call(target))\n    // 或者\n    return Object(Symbol(target.description))\n}\n// 拷贝正则对象\nfunction cloneReg(target) {\n  const reFlags = /\\w*$/;\n  const result = new RegExp(target.source, reFlags.exec(target));\n  result.lastIndex = target.lastIndex;\n  return result;\n}\n// 拷贝函数\nfunction cloneFunction(target){\n  return eval(`(${target})`)\n  // 或者\n  return new Function(`return (${target})()`)\n}\n\n// 处理不能继续遍历的类型\nfunction directCloneTarget(target,type){\n  let _constructor = target.constructor\n  switch(type){\n    case 'String':\n    case 'Boolean':\n    case 'Number':\n    case 'Error':\n    case 'Date':\n      return new _constructor(target.valueOf())\n      // 或者\n      return new Object(_constructor.prototype.valueOf.call(target))\n    case 'RegExp':\n        return cloneReg(target)        \n    case 'Symbol':\n        return cloneSymbol(target)        \n    case 'Function':            \n        return cloneFunction(target) \n    default:            \n        return null    \n  }        \n}\n\n\n// 深拷贝的核心代码\nfunction deepClone(target,map = new WeakMap()){\n    if(!isObject(target))    return target    \n    // 初始化\n    let type = getType(target)\n    let cloneTarget\n    if(objectToInit.includes(type)){\n        cloneTarget = initCloneTarget(target)\n    } else {\n        return directCloneTarget(target,type)\n    }\n \t// 解决循环引用   \n    if(map.has(target))       return map.get(target)\n    map.set(target,cloneTarget)\n    // 拷贝 Set\n    if(type === 'Set'){\n        target.forEach(value =&gt; {\n            cloneTarget.add(deepClone(value,map))\n        })\n    }\n    // 拷贝 Map\n    else if(type === 'Map'){\n        target.forEach((value,key) =&gt; {\n            cloneTarget.set(key,deepClone(value,map))\n        })\n    }\n    // 拷贝对象字面量、数组、类数组对象\n    else if(type === 'Object' || type === 'Array' || type === 'Arguments'){\n        Reflect.ownKeys(target).forEach(key =&gt; {\n            cloneTarget[key] = deepClone(target[key],map)\n        })\n    }\n    return cloneTarget\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// 可以继续遍历的类型</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">objectToInit</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">'Object'</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">'Array'</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">'Set'</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">'Map'</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">'Arguments'</span><span class=\"pl-kos\">]</span>\n\n<span class=\"pl-c\">// 判断是否是引用类型</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">isObject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> <span class=\"pl-c1\">||</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// 判断具体的数据类型</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">toString</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">8</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">-</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// 初始化函数</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">initCloneTarget</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// 拷贝 Symbol</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">cloneSymbol</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n\t<span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>    \n    <span class=\"pl-c\">// 或者</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">valueOf</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-c\">// 或者</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">description</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// 拷贝正则对象</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">cloneReg</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">reFlags</span> <span class=\"pl-c1\">=</span> <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">\\w</span><span class=\"pl-c1\">*</span><span class=\"pl-cce\">$</span><span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">source</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reFlags</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">exec</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">lastIndex</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">lastIndex</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-c\">// 拷贝函数</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">cloneFunction</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">eval</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`(<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">}</span></span>)`</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">// 或者</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Function</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`return (<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">}</span></span>)()`</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 处理不能继续遍历的类型</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">directCloneTarget</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">type</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">_constructor</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">constructor</span>\n  <span class=\"pl-k\">switch</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\">'String'</span>:\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Boolean'</span>:\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Number'</span>:\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Error'</span>:\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Date'</span>:\n      <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">_constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-c\">// 或者</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">_constructor</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">valueOf</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">case</span> <span class=\"pl-s\">'RegExp'</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">cloneReg</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>        \n    <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Symbol'</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">cloneSymbol</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>        \n    <span class=\"pl-k\">case</span> <span class=\"pl-s\">'Function'</span>:            \n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">cloneFunction</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span> \n    <span class=\"pl-k\">default</span>:            \n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>    \n  <span class=\"pl-kos\">}</span>        \n<span class=\"pl-kos\">}</span>\n\n\n<span class=\"pl-c\">// 深拷贝的核心代码</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">map</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">WeakMap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-en\">isObject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">target</span>    \n    <span class=\"pl-c\">// 初始化</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">type</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">cloneTarget</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">objectToInit</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">includes</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">cloneTarget</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">initCloneTarget</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">directCloneTarget</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">type</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n \t<span class=\"pl-c\">// 解决循环引用   </span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">has</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>       <span class=\"pl-k\">return</span> <span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-s1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-c\">// 拷贝 Set</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Set'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">map</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-c\">// 拷贝 Map</span>\n    <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Map'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">,</span><span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">map</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-c\">// 拷贝对象字面量、数组、类数组对象</span>\n    <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Object'</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Array'</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'Arguments'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-v\">Reflect</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">ownKeys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s1\">cloneTarget</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">target</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">map</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">cloneTarget</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h3 dir=\"auto\">测试用例</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"let obj = {\n  name: '小明',\n  age: 24,\n  male: true,\n  birthday: new Date('1998-04-21'),\n  skills: ['唱','跳','rap','篮球'],\n  classmate: [\n    {\n      name: '小红',\n      age: 24\n    },\n    {\n      name: '小张',\n      age: 24\n    },\n  ],\n  map: new Map([['a', 1,'b',2]]),\n  set: new Set([1,2,3,4,5]),\n  getName: function(){\n    console.log(`名字是${this.name}`)\n  },\n  reg : /\\d+/gi,\n  error : new Error(),\n  a: undefined,\n  b: Symbol(),\n  [Symbol()]: 123,\n  c:NaN,\n  d:Infinity,\n  e:-Infinity,\n}\nobj.f = obj\nlet cloneObj = deepClone(obj)\n\nobj.age = 100\nobj.classmate[1].age = 100\nobj.set.add('1123')\nobj.skills.push('计算机')\nobj.name = '小梅'\nobj.map.set('name', '小明')\n\nconsole.log(obj)\nconsole.log(cloneObj)\nobj.getName()\ncloneObj.getName()\"><pre class=\"notranslate\"><span class=\"pl-k\">let</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'小明'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">age</span>: <span class=\"pl-c1\">24</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">male</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">birthday</span>: <span class=\"pl-k\">new</span> <span class=\"pl-v\">Date</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'1998-04-21'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">skills</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'唱'</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">'跳'</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">'rap'</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">'篮球'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">classmate</span>: <span class=\"pl-kos\">[</span>\n    <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'小红'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">age</span>: <span class=\"pl-c1\">24</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'小张'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">age</span>: <span class=\"pl-c1\">24</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">map</span>: <span class=\"pl-k\">new</span> <span class=\"pl-v\">Map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-s\">'a'</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">'b'</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">set</span>: <span class=\"pl-k\">new</span> <span class=\"pl-v\">Set</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">getName</span>: <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`名字是<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">reg</span> : <span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-cce\">\\d</span><span class=\"pl-c1\">+</span><span class=\"pl-c1\">/</span>gi</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">error</span> : <span class=\"pl-k\">new</span> <span class=\"pl-v\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">a</span>: <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">b</span>: <span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">[</span><span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>: <span class=\"pl-c1\">123</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">c</span>:<span class=\"pl-v\">NaN</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">d</span>:<span class=\"pl-v\">Infinity</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">e</span>:<span class=\"pl-c1\">-</span><span class=\"pl-v\">Infinity</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">obj</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">cloneObj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">100</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">classmate</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">100</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">set</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'1123'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">skills</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'计算机'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'小梅'</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">map</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'name'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'小明'</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cloneObj</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getName</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">cloneObj</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getName</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">经过测试，测试结果满足以下条件：<br>\n1）修改原对象的任意属性，拷贝对象不受影响，反之亦然。符合深拷贝的定义<br>\n2）支持拷贝如下数据结构：<code class=\"notranslate\">Date</code>、<code class=\"notranslate\">Symbol</code>、<code class=\"notranslate\">Function</code>、<code class=\"notranslate\">RegExp</code> 等<br>\n3）环状引用不会报错<br>\n4）Date 类型的属性在深拷贝之后不会变成字符串（<code class=\"notranslate\">JSON.parse(JSON.stringify(obj))</code> 深拷贝存在的问题）<br>\n5）对象属性值是 <code class=\"notranslate\">RegExp</code> 类型或者 <code class=\"notranslate\">Error</code> 类型的时候，深拷贝之后不会变成空对象（<code class=\"notranslate\">JSON.parse(JSON.stringify(obj))</code> 深拷贝存在的问题）<br>\n6）对象属性值是函数类型、 <code class=\"notranslate\">undefined</code> 类型、<code class=\"notranslate\">Symbol</code> 类型的时候，深拷贝之后不会丢失（<code class=\"notranslate\">JSON.parse(JSON.stringify(obj))</code> 深拷贝存在的问题）<br>\n7）对象的属性（key）是 <code class=\"notranslate\">Symbol</code> 类型的时候，深拷贝之后不会丢失（<code class=\"notranslate\">JSON.parse(JSON.stringify(obj))</code> 深拷贝存在的问题）<br>\n8）对象的属性值是 <code class=\"notranslate\">NaN</code>、<code class=\"notranslate\">Infinity</code>、<code class=\"notranslate\">-Infinity</code> 的时候，深拷贝之后不会变成 null（<code class=\"notranslate\">JSON.parse(JSON.stringify(obj))</code> 深拷贝存在的问题）</p>","author":{"login":"Chorer","avatarUrl":"https://avatars.githubusercontent.com/u/43442630?u=a9fa211751f51a129ea1fdd6ebaaa8ab41edb62a&v=4","url":"https://github.com/Chorer"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85BHIR3","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"/**\n * @param {object} origin 源对象\n * @return {object} 拷贝后的对象\n */\n// 利用 WeakMap 解决对象相互引用的问题\nfunction deepClone(origin, hashMap = new WeakMap()) {\n  if (origin == undefined || typeof origin !== 'object') return origin\n\n  if (origin instanceof Date) return new Date(origin)\n  if (origin instanceof RegExp) return new RegExp(origin)\n\n  // 若之前已经处理过当前源对象，则直接返回 WeakMap 中保存的目标对象\n  const hashValue = hashMap.get(origin)\n  if (hashValue) return hashValue\n\n  // 利用源对象的构造器创建目标对象\n  const target = new origin.constructor()\n  // 将 {源对象: 目标对象} 保存到 WeakMap 中\n  hashMap.set(origin, target)\n\n  for (let key in origin) {\n    if (origin.hasOwnProperty(key))\n      target[key] = deepClone(origin[key], hashMap)\n  }\n\n  return target\n}\n\nconst obj = {\n  a: 1,\n  b: 2,\n  c: {\n    d: 3,\n    e: 4\n  }\n}\n\nconst newObj = deepClone(obj)\nnewObj.c.d = 4\n\nconsole.log(obj)\nconsole.log(newObj)\n\nlet obj1 = {}\nlet obj2 = {}\nobj2.obj1 = obj1\nobj1.obj2 = obj2\n\nconsole.log(deepClone(obj2))\"><pre class=\"notranslate\"><span class=\"pl-c\">/**</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> {<span class=\"pl-smi\">object</span>} origin 源对象</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@return</span> {<span class=\"pl-smi\">object</span>} 拷贝后的对象</span>\n<span class=\"pl-c\"> */</span>\n<span class=\"pl-c\">// 利用 WeakMap 解决对象相互引用的问题</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">origin</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">hashMap</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">WeakMap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">origin</span> <span class=\"pl-c1\">==</span> <span class=\"pl-c1\">undefined</span> <span class=\"pl-c1\">||</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">origin</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'object'</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span> <span class=\"pl-s1\">origin</span>\n\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">origin</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Date</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Date</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">origin</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">origin</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RegExp</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">origin</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-c\">// 若之前已经处理过当前源对象，则直接返回 WeakMap 中保存的目标对象</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">hashValue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">hashMap</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">origin</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">hashValue</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span> <span class=\"pl-s1\">hashValue</span>\n\n  <span class=\"pl-c\">// 利用源对象的构造器创建目标对象</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">target</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">origin</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">// 将 {源对象: 目标对象} 保存到 WeakMap 中</span>\n  <span class=\"pl-s1\">hashMap</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">origin</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">target</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">key</span> <span class=\"pl-k\">in</span> <span class=\"pl-s1\">origin</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">origin</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">hasOwnProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-s1\">target</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">origin</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">hashMap</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">target</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">a</span>: <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">b</span>: <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">c</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">d</span>: <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">e</span>: <span class=\"pl-c1\">4</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">newObj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">newObj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">c</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">d</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">4</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newObj</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">obj1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">obj2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-s1\">obj2</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">obj1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">obj1</span>\n<span class=\"pl-s1\">obj1</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">obj2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">obj2</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span></pre></div>","author":{"login":"Stan9726","avatarUrl":"https://avatars.githubusercontent.com/u/56797239?u=0c3a8acf568a72651a0733f358294a8514a1a0c4&v=4","url":"https://github.com/Stan9726"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85BLeiH","bodyHTML":"<h2 dir=\"auto\">填补一个以上文章未提到，但十分简洁的一个写法</h2>\n<p dir=\"auto\">//  使用属性描述的获取与设置方法，可以一行代码深拷贝，不仅可以拷贝嵌套对象和函数等，还会连带拷贝属性的特性<br>\n//优点也是缺点，原对象中 不可迭代 或 symbol类型 的属性也会被拷贝过来，而且原对象属性configurable为false的话也会被拷过来<br>\n/<em>------------------------------------------------------------------------</em>/</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"/**\n * @param {object} obj 需要拷贝的对象\n * @returns {object} 拷贝后的对象\n */\nfunction deepClone(obj) {\n  return Object.defineProperties({}, Object.getOwnPropertyDescriptors(obj));\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">/**</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> {<span class=\"pl-smi\">object</span>} obj 需要拷贝的对象</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@returns</span> {<span class=\"pl-smi\">object</span>} 拷贝后的对象</span>\n<span class=\"pl-c\"> */</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">deepClone</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">defineProperties</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getOwnPropertyDescriptors</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"bullshitking-99","avatarUrl":"https://avatars.githubusercontent.com/u/54534544?u=ed64160526166188e37bcde33c63c8017ad9109b&v=4","url":"https://github.com/bullshitking-99"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85BQXcL","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function deepClone(obj, hash = new WeakMap()) {\n    if (hash.has(obj)) {\n        return obj;\n    }\n    let res = null;\n    const reference = [Date, RegExp, Set, WeakSet, Map, WeakMap, Error];\n\n    if (reference.includes(obj?.constructor)) {\n        res = new obj.constructor(obj);\n    } else if (Array.isArray(obj)) {\n        res = [];\n        obj.forEach((e, i) =&gt; {\n            res[i] = deepClone(e);\n        });\n    } else if (typeof obj === &quot;object&quot; &amp;&amp; obj !== null) {\n        res = {};\n        for (const key in obj) {\n            if (Object.hasOwnProperty.call(obj, key)) {\n                res[key] = deepClone(obj[key]);\n            }\n        }\n        hash.set(obj, res);\n    } else {\n        res = obj;\n    }\n    return res;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">function deepClone(obj, hash = new WeakMap()) {\n    if (hash.has(obj)) {\n        return obj;\n    }\n    let res = null;\n    const reference = [Date, RegExp, Set, WeakSet, Map, WeakMap, Error];\n\n    if (reference.includes(obj?.constructor)) {\n        res = new obj.constructor(obj);\n    } else if (Array.isArray(obj)) {\n        res = [];\n        obj.forEach((e, i) =&gt; {\n            res[i] = deepClone(e);\n        });\n    } else if (typeof obj === \"object\" &amp;&amp; obj !== null) {\n        res = {};\n        for (const key in obj) {\n            if (Object.hasOwnProperty.call(obj, key)) {\n                res[key] = deepClone(obj[key]);\n            }\n        }\n        hash.set(obj, res);\n    } else {\n        res = obj;\n    }\n    return res;\n}\n</code></pre></div>","author":{"login":"Garker","avatarUrl":"https://avatars.githubusercontent.com/u/56073411?u=decbf1c63ddf11fd167eb823969f38b980307f2d&v=4","url":"https://github.com/Garker"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85BRVaB","bodyHTML":"<p dir=\"auto\">Web API 新增了一个深拷贝方法 <strong>structuredClone</strong><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/structuredClone\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/structuredClone</a></p>","author":{"login":"molvqingtai","avatarUrl":"https://avatars.githubusercontent.com/u/26295698?u=1d19b6ca712c2b3e1eedeb3e9fb7cc26c66de6d1&v=4","url":"https://github.com/molvqingtai"},"replies":null}}]}}},"pageContext":{"number":53,"previous":{"title":"实现字符串reverse方法","number":49},"next":{"title":"为什么Mocha等测试库的describe和it函数没有导入却可以使用？","number":68}}},
    "staticQueryHashes": ["151096407","2861350382"]}