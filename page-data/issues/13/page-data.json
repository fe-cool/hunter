{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/13",
    "result": {"data":{"issuesJson":{"id":"41ec4bf7-6d35-549d-acac-8804f6dfd139","title":"实现一个LazyMan","number":13,"bodyHTML":"\n<h3 dir=\"auto\">要实现的功能</h3>\n<p dir=\"auto\">实现一个 LazyMan，按照以下方式调用时，得到相关输出。</p>\n\n<h3 dir=\"auto\">代码示例</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"LazyMan(&quot;Hank&quot;)\n// 打印：Hi! This is Hank!\n\nLazyMan(&quot;Hank&quot;).sleep(10).eat(&quot;dinner&quot;)\n// 打印：Hi! This is Hank!\n// 等待了 10 秒后\n// 打印：Wake up after 10\n// 打印：Eat dinner~\n \nLazyMan(&quot;Hank&quot;).eat(&quot;dinner&quot;).eat(&quot;supper&quot;)\n// 打印：Hi This is Hank!\n// 打印：Eat dinner~\n// 打印：Eat supper~\n \nLazyMan(&quot;Hank&quot;).sleepFirst(5).eat(&quot;supper&quot;)\n// 等待了 5 秒后\n// 打印：Wake up after 5\n// 打印：Hi This is Hank!\n// 打印：Eat supper\n\nLazyMan(&quot;Hank&quot;).eat(&quot;supper&quot;).sleepFirst(5)\n// 等待了 5 秒后\n// 打印：Wake up after 5\n// 打印：Hi This is Hank!\n// 打印：Eat supper\"><pre class=\"notranslate\"><span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Hank\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 打印：Hi! This is Hank!</span>\n\n<span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Hank\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">10</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"dinner\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 打印：Hi! This is Hank!</span>\n<span class=\"pl-c\">// 等待了 10 秒后</span>\n<span class=\"pl-c\">// 打印：Wake up after 10</span>\n<span class=\"pl-c\">// 打印：Eat dinner~</span>\n<span class=\"pl-s1\"> </span>\n<span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Hank\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"dinner\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"supper\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 打印：Hi This is Hank!</span>\n<span class=\"pl-c\">// 打印：Eat dinner~</span>\n<span class=\"pl-c\">// 打印：Eat supper~</span>\n<span class=\"pl-s1\"> </span>\n<span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Hank\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"supper\"</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 等待了 5 秒后</span>\n<span class=\"pl-c\">// 打印：Wake up after 5</span>\n<span class=\"pl-c\">// 打印：Hi This is Hank!</span>\n<span class=\"pl-c\">// 打印：Eat supper</span>\n\n<span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Hank\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"supper\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 等待了 5 秒后</span>\n<span class=\"pl-c\">// 打印：Wake up after 5</span>\n<span class=\"pl-c\">// 打印：Hi This is Hank!</span>\n<span class=\"pl-c\">// 打印：Eat supper</span></pre></div>\n\n<h3 dir=\"auto\">问题补充</h3>\n<ol dir=\"auto\">\n<li>请写出实现思路、代码，并为代码的关键步骤增写注释</li>\n<li>附带测试用例是加分项</li>\n<li>不需要考虑异常发生</li>\n<li>不过度设计，代码简洁优雅是加分项</li>\n</ol>\n \n<h2 dir=\"auto\">最佳答案</h2>\n<p dir=\"auto\"><a href=\"https://github.com/BetaSu/fe-hunter/issues/13#issuecomment-1077839583\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/13/hovercard\">NoBey的回答</a></p>\n<h3 dir=\"auto\">答题同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">答题规范：请在<code class=\"notranslate\">一次评论</code>中完成作答，后续修改也请编辑该评论，而不是追加新的评论</p>\n</li>\n<li>\n<p dir=\"auto\">评选标准：最佳答案由<code class=\"notranslate\">围观同学</code>的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji> 和<a href=\"https://github.com/BetaSu\">卡颂</a>共同决定</p>\n</li>\n<li>\n<p dir=\"auto\">评选时间：一般是当日18：00左右评选，如果问题发布当天回答数较少，问题悬赏金额可能增加，同时悬赏时间也会增加</p>\n</li>\n</ul>\n<h3 dir=\"auto\">围观同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">对于你满意的答案，请不要吝惜你的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>，这是评选<strong>最佳答案</strong>的依据</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">非答题的评论</code>会被删除，问题相关讨论请在<a href=\"https://github.com/BetaSu/fe-hunter\">赏金猎人群</a>中进行</p>\n</li>\n</ul>","updatedAt":"2022-03-25T12:41:36Z","upvoteCount":null,"author":{"login":"BetaSu","avatarUrl":"https://avatars.githubusercontent.com/u/15828041?u=3b08cdf9f9b49dbead9ffb020a94d925904d2b74&v=4","url":"https://github.com/BetaSu"},"category":null,"labels":{"edges":[{"node":{"name":"JS","color":"ffee58"}},{"node":{"name":"动手","color":"42a5f5"}}]},"comments":{"edges":[{"node":{"id":"IC_kwDOHCfdf85APobf","bodyHTML":"<h2 dir=\"auto\">最关键的两个问题</h2>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">如何实现链式调用<br>\n链式调用只需要执行后返回 自身即可 <code class=\"notranslate\">class</code> 的 <code class=\"notranslate\">this</code> 或者是 <code class=\"notranslate\">obj</code> 的 <code class=\"notranslate\">obj</code></p>\n</li>\n<li>\n<p dir=\"auto\">如何执行任务<br>\n执行任务这部分最初我是想的用 <code class=\"notranslate\">{ type: 'xx', value: 'xx' }</code> 这种方式实现, 后来思索, 还要在 写 一堆 <code class=\"notranslate\">if</code> 或者 <code class=\"notranslate\">switch</code> 觉得太麻烦, 就直接用生成 闭包给到 队列, 队列 负责执行即可。</p>\n</li>\n</ol>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function LazyMan(name) {\n  const { log } = console;\n  const sleep = s =&gt;\n    new Promise(res =&gt;\n      setTimeout(() =&gt; log(`Wake up after ${s}`) || res(), s * 1000)\n    );\n  // 定义队列并切设置第一个任务\n  const queue = [() =&gt; log(`Hi! This is ${name}!`)];\n  \n  // 这个里用了 push(x) &amp;&amp; ctx \n  // push 的返回值是数组 push 后的长度 所以不会出现 0 , 可以放心在箭头函数里使用\n  const ctx = {\n    eat: food =&gt; queue.push(() =&gt; log(`Eat ${food}~`)) &amp;&amp; ctx,\n    sleep: s =&gt; queue.push(() =&gt; sleep(s)) &amp;&amp; ctx,\n    sleepFirst: s =&gt; queue.unshift(() =&gt; sleep(s)) &amp;&amp; ctx\n  };\n  \n  // 延迟在下一个周期执行, 为了收集执行的任务\n  queueMicrotask(async () =&gt; {\n    while (queue.length) {\n      await queue.shift()();\n    }\n  });\n  return ctx;\n}\n\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> log <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">sleep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">s</span> <span class=\"pl-c1\">=&gt;</span>\n    <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=&gt;</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">s</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">||</span> <span class=\"pl-en\">res</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">s</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">// 定义队列并切设置第一个任务</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">queue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi! This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>!`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  \n  <span class=\"pl-c\">// 这个里用了 push(x) &amp;&amp; ctx </span>\n  <span class=\"pl-c\">// push 的返回值是数组 push 后的长度 所以不会出现 0 , 可以放心在箭头函数里使用</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">ctx</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">eat</span>: <span class=\"pl-s1\">food</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>~`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">sleep</span>: <span class=\"pl-s1\">s</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">s</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">sleepFirst</span>: <span class=\"pl-s1\">s</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">s</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">ctx</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n  \n  <span class=\"pl-c\">// 延迟在下一个周期执行, 为了收集执行的任务</span>\n  <span class=\"pl-en\">queueMicrotask</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">await</span> <span class=\"pl-s1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"NoBey","avatarUrl":"https://avatars.githubusercontent.com/u/10740524?u=6c74b36db878e34c1cf8d1b6e638285b11c1f3b6&v=4","url":"https://github.com/NoBey"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASdkX","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function createLazyMan(name) {\n  this.name = name\n  // 方法队列\n  this.queue = []\n\n  console.log('I am ' + this.name)\n\n  // 将 next 方法调用放到 callBack queue 中，在链式调用全部完成后即调用 next 方法\n  setTimeout(() =&gt; this.next())\n}\n\ncreateLazyMan.prototype.eat = function (meal) {\n  /**\n   * 因为要压入 queue 中之后弹出执行，所以一定要用箭头函数，不能用普通函数\n   * 之后在 next 方法中弹出执行时，箭头函数 this 指向上层的 this\n   */\n  var fn = () =&gt; {\n    console.log('eat ' + meal)\n    this.next()\n  }\n\n  this.queue.push(fn)\n  return this\n}\n\ncreateLazyMan.prototype.sleep = function (time) {\n  var fn = () =&gt; {\n    setTimeout(() =&gt; {\n      console.log('sleep for ' + time + 's')\n      this.next()\n    }, time * 1000)\n  }\n\n  this.queue.push(fn)\n  return this\n}\n\ncreateLazyMan.prototype.sleepFirst = function (time) {\n  var fn = () =&gt; {\n    setTimeout(() =&gt; {\n      console.log('sleep for ' + time + 's')\n      this.next()\n    }, time * 1000)\n  }\n\n  this.queue.unshift(fn)\n  return this\n}\n\ncreateLazyMan.prototype.next = function () {\n  this.queue.length &amp;&amp; this.queue.shift()()\n}\n\nfunction LazyMan(name) {\n  return new createLazyMan(name)\n}\n\nLazyMan('Tony')\n  .eat('lunch')\n  .eat('dinner')\n  .sleepFirst(1)\n  .sleep(2)\n  .eat('junk food')\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">createLazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n  <span class=\"pl-c\">// 方法队列</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">queue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'I am '</span> <span class=\"pl-c1\">+</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-c\">// 将 next 方法调用放到 callBack queue 中，在链式调用全部完成后即调用 next 方法</span>\n  <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-s1\">createLazyMan</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">meal</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">/**</span>\n<span class=\"pl-c\">   * 因为要压入 queue 中之后弹出执行，所以一定要用箭头函数，不能用普通函数</span>\n<span class=\"pl-c\">   * 之后在 next 方法中弹出执行时，箭头函数 this 指向上层的 this</span>\n<span class=\"pl-c\">   */</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-en\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'eat '</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">meal</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-s1\">createLazyMan</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-en\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'sleep for '</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">'s'</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-s1\">createLazyMan</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-en\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'sleep for '</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">'s'</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-s1\">createLazyMan</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">queue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">createLazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Tony'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'lunch'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'dinner'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'junk food'</span><span class=\"pl-kos\">)</span></pre></div>","author":{"login":"Stan9726","avatarUrl":"https://avatars.githubusercontent.com/u/56797239?u=0c3a8acf568a72651a0733f358294a8514a1a0c4&v=4","url":"https://github.com/Stan9726"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASd8e","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class LazyManCreator {\n  constructor(name) {\n    this.taskList = []\n    const task = () =&gt; {\n      console.log(`Hi! This is ${name}!`)\n      this.next()\n    }\n    this.taskList.push(task)\n    setTimeout(() =&gt; {\n      this.next()\n    }, 0)\n  }\n  next() {\n    const task = this.taskList.shift()\n    task &amp;&amp; task()\n  }\n  sleep(timeout) {\n    const task = () =&gt; {\n      setTimeout(() =&gt; {\n        console.log(`Wake up after ${timeout}`)\n        this.next()\n      }, timeout * 1000)\n    }\n    this.taskList.push(task)\n    return this\n  }\n  sleepFirst(timeout) {\n    const task = () =&gt; {\n      setTimeout(() =&gt; {\n        console.log(`Wake up after ${timeout}`)\n        this.next()\n      }, timeout * 1000)\n    }\n    this.taskList.unshift(task)\n    return this\n  }\n  eat(meal) {\n    const task = () =&gt; {\n      console.log(`Eat ${meal}`)\n      this.next()\n    }\n    this.taskList.push(task)\n    return this\n  }\n}\n\nconst LazyMan = name =&gt; {\n  return new LazyManCreator(name)\n}\n\nLazyMan('Hank').sleepFirst(5).eat('supper')\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-v\">LazyManCreator</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">task</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi! This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>!`</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">task</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">task</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-s1\">task</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">task</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">timeout</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">task</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">timeout</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">timeout</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">task</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">timeout</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">task</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">timeout</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">timeout</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">task</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">meal</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">task</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">meal</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">task</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-v\">LazyMan</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">LazyManCreator</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'supper'</span><span class=\"pl-kos\">)</span></pre></div>","author":{"login":"emotionl","avatarUrl":"https://avatars.githubusercontent.com/u/17172758?u=14fb759df59131a3dba17af4f0b73bbffff0c0c0&v=4","url":"https://github.com/emotionl"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASeYx","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const sleepTask = (d) =&gt; () =&gt;\n  new Promise((resolve) =&gt;\n    setTimeout(() =&gt; resolve(console.log(`Wake up after ${d}`)), d * 1000),\n  )\nfunction LazyMan(name) {\n  const ctx = {}\n  const tasks = [() =&gt; console.log(`Hi! This is ${name}!`)]\n  ctx.sleep = (d) =&gt; {\n    tasks.push(sleepTask(d))\n    return ctx\n  }\n  ctx.sleepFirst = (d) =&gt; {\n    tasks.unshift(sleepTask(d))\n    return ctx\n  }\n  ctx.eat = (food) =&gt; {\n    tasks.push(() =&gt; console.log(`Eat ${food}`))\n    return ctx\n  }\n  const run = () =&gt; {\n    // 创建一个宏任务：按顺序执行task\n    setTimeout(async () =&gt; {\n      while(tasks.length) {\n        await tasks.shift()()\n      }\n    }, 0)\n  }\n  run()\n  return ctx\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">sleepTask</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span>\n  <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">d</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">d</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">ctx</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">tasks</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi! This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>!`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>\n  <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">sleepTask</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctx</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">sleepTask</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctx</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctx</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">run</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// 创建一个宏任务：按顺序执行task</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">while</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">await</span> <span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">run</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctx</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"ChenPt","avatarUrl":"https://avatars.githubusercontent.com/u/18723778?u=3d0a77fdf347969a7ebbd94b108221b93f206dc4&v=4","url":"https://github.com/ChenPt"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASfLj","bodyHTML":"<h3 dir=\"auto\">基于事件控制</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class _LazyMan {\n  constructor(name) {\n    this.tasks = []\n    this.lazyMan(name)\n    setTimeout(() =&gt; {\n      this.next()\n    })\n  }\n\n  next() {\n    const fn = this.tasks.shift()\n    fn &amp;&amp; fn()\n  }\n\n  lazyMan(name) {\n    const fn = () =&gt; {\n      this._log(`Hi! This is ${name}!`)\n      this.next()\n    }\n    this.tasks.push(fn)\n    return this\n  }\n\n  eat(some) {\n    const fn = () =&gt; {\n      this._log(`Eat ${some}~`)\n      this.next()\n    }\n    this.tasks.push(fn)\n    return this\n  }\n\n  sleep(time) {\n    const fn = () =&gt; {\n      setTimeout(() =&gt; {\n        this._log(`Wake up after ${time}`)\n        this.next()\n      }, time * 1000)\n    }\n    this.tasks.push(fn)\n    return this\n  }\n\n  sleepFirst(time) {\n    const fn = () =&gt; {\n      setTimeout(() =&gt; {\n        this._log(`Wake up after ${time}`)\n        this.next()\n      }, time * 1000)\n    }\n    this.tasks.unshift(fn)\n    return this\n  }\n\n  _log(message) {\n    console.log(message)\n  }\n}\n\nfunction LazyMan(name) {\n  return new _LazyMan(name)\n}\n\nLazyMan('Hank')\n  .sleep(5)\n  .eat('dinner')\n  .eat('supper')\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-s1\">_LazyMan</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">lazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">lazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi! This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>!`</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">some</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">some</span><span class=\"pl-kos\">}</span></span>~`</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">_log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">message</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">message</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">_LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'dinner'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'supper'</span><span class=\"pl-kos\">)</span></pre></div>\n<h3 dir=\"auto\">基于发布订阅模式</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class _LazyMan {\n  constructor(name) {\n    this.tasks = []\n    this.subscribe('lazyMan', name)\n    setTimeout(() =&gt; {\n      this.publish()\n    }, 0)\n  }\n\n  // 订阅\n  subscribe(type, payload) {\n    const action = { type, payload }\n\n    if (type === 'sleepFirst') {\n      this.tasks.unshift(action)\n    } else {\n      this.tasks.push(action)\n    }\n  }\n\n  // 发布\n  publish() {\n    const { tasks } = this\n    if (tasks.length &gt; 0) this.run(tasks.shift())\n  }\n\n  run({ type, payload }) {\n    switch (type) {\n      case 'lazyMan':\n        this._lazyMan(payload)\n        break\n      case 'eat':\n        this._eat(payload)\n        break\n      case 'sleep':\n        this._sleep(payload)\n        break\n      case 'sleepFirst':\n        this._sleepFirst(payload)\n        break\n      default:\n    }\n  }\n\n  _lazyMan(name) {\n    this._log(`Hi! This is ${name}!`)\n    this.publish()\n  }\n\n  _eat(some) {\n    this._log(`Eat ${some}~`)\n    this.publish()\n  }\n\n  _sleep(time) {\n    setTimeout(() =&gt; {\n      this._log(`Wake up after ${time}`)\n      this.publish()\n    }, time * 1000)\n  }\n\n  _sleepFirst(time) {\n    setTimeout(() =&gt; {\n      this._log(`Wake up after ${time}`)\n      this.publish()\n    }, time * 1000)\n  }\n\n  _log(message) {\n    console.log(message)\n  }\n\n  lazyMan() {\n    this.subscribe('lazyMan', some)\n  }\n\n  eat(some) {\n    this.subscribe('eat', some)\n    return this\n  }\n\n  sleep(time) {\n    this.subscribe('sleep', time)\n    return this\n  }\n\n  sleepFirst(time) {\n    this.subscribe('sleepFirst', time)\n    return this\n  }\n}\n\nfunction LazyMan(name) {\n  return new _LazyMan(name)\n}\n\nLazyMan('Hank')\n  .sleepFirst(5)\n  .eat('dinner')\n  .eat('supper')\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-s1\">_LazyMan</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">subscribe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'lazyMan'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">publish</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-c\">// 订阅</span>\n  <span class=\"pl-en\">subscribe</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">action</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span> type<span class=\"pl-kos\">,</span> payload <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'sleepFirst'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">action</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">action</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-c\">// 发布</span>\n  <span class=\"pl-en\">publish</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> tasks <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">run</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">run</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> type<span class=\"pl-kos\">,</span> payload <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">switch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">type</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'lazyMan'</span>:\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_lazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">break</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'eat'</span>:\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">break</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'sleep'</span>:\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">break</span>\n      <span class=\"pl-k\">case</span> <span class=\"pl-s\">'sleepFirst'</span>:\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">break</span>\n      <span class=\"pl-k\">default</span>:\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">_lazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi! This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>!`</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">publish</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">_eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">some</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">some</span><span class=\"pl-kos\">}</span></span>~`</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">publish</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">_sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">publish</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">_sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">_log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">publish</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">_log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">message</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">message</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">lazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">subscribe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'lazyMan'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">some</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">some</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">subscribe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'eat'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">some</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">subscribe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'sleep'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">subscribe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'sleepFirst'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">_LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'dinner'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'supper'</span><span class=\"pl-kos\">)</span></pre></div>","author":{"login":"zhanghao-zhoushan","avatarUrl":"https://avatars.githubusercontent.com/u/18732903?u=6f102b638e2fb7cc7b8cead74e6f973aca627c23&v=4","url":"https://github.com/zhanghao-zhoushan"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASg7-","bodyHTML":"<p dir=\"auto\"><strong>思路：</strong></p>\n<ul dir=\"auto\">\n<li>实际上是 Promise 的顺序执行</li>\n<li>维护一个队列，在链式调用时将任务推到该队列中</li>\n<li>在下一个宏任务或微任务中通过<code class=\"notranslate\">async/await</code>顺序执行收集到的任务</li>\n</ul>\n<p dir=\"auto\"><strong>实现：</strong></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function LazyMan(name) {\n  // 任务队列部分\n  const { log } = console;\n  const tasks = [() =&gt; log(`Hi! This is ${name}!`)];\n  const sleep = (time) =&gt;\n    new Promise((r) =&gt;\n      setTimeout(() =&gt; {\n        log(`Wake up after ${time}`);\n        r();\n      }, time * 1000)\n    );\n  const ctx = {\n    eat(food) {\n      tasks.push(() =&gt; log(`Eat ${food}~`));\n      return ctx;\n    },\n    sleep(time) {\n      tasks.push(() =&gt; sleep(time));\n      return ctx;\n    },\n    sleepFirst(time) {\n      tasks.unshift(() =&gt; sleep(time));\n      return ctx;\n    },\n  };\n\n  // 执行部分\n  const run = async () =&gt; {\n    for (const task of tasks) {\n      await task();\n    }\n  };\n  // 推入宏任务/微任务队列中执行\n  // setTimeout(run, 0);\n  // setImmediate(run);\n  process.nextTick(run);\n\n  return ctx;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 任务队列部分</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> log <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">tasks</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi! This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>!`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">sleep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span>\n    <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">r</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-s1\">r</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">ctx</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>~`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c\">// 执行部分</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">run</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">task</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">tasks</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">await</span> <span class=\"pl-en\">task</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">// 推入宏任务/微任务队列中执行</span>\n  <span class=\"pl-c\">// setTimeout(run, 0);</span>\n  <span class=\"pl-c\">// setImmediate(run);</span>\n  <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">nextTick</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">run</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"someu","avatarUrl":"https://avatars.githubusercontent.com/u/33251742?u=d254d4366829d0125b70c25684b98cb23b710d33&v=4","url":"https://github.com/someu"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASkwS","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class Lazy {\n  constructor(name) {\n    this.name = name;\n    this.taskList = [];\n    setTimeout(() =&gt; this.next(), 0);\n  }\n  next() {\n    const task = this.taskList.shift();\n    if (task) {\n      const [log, delay] = task;\n      setTimeout(() =&gt; {\n        log();\n        this.next();\n      }, delay * 1000);\n    }\n  }\n  eat(food) {\n    this.taskList.push([() =&gt; console.log(` eat ${food}`), 0]);\n    return this;\n  }\n  sleep(time) {\n    this.taskList.push([() =&gt; console.log(`Wake up after ${time}`), time]);\n    return this;\n  }\n  sleepFirst(time) {\n    this.taskList.unshift([() =&gt; console.log(`Wake up after ${time}`), time]);\n    return this;\n  }\n}\n\nconst LazyMan = (name) =&gt; new Lazy(name);\n\nLazyMan('Hank').eat('supper').sleepFirst(5).sleep(1).eat('dinner');\n\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-v\">Lazy</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">task</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">log</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">task</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">` eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-v\">LazyMan</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Lazy</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'supper'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'dinner'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>","author":{"login":"hanpei","avatarUrl":"https://avatars.githubusercontent.com/u/4035340?u=d1d344898d886fb367b324842eeba71eb4781aca&v=4","url":"https://github.com/hanpei"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASlrO","bodyHTML":"<h4 dir=\"auto\">基于原型链+闭包的形式进行编写</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 定义_LazyMan构造函数\nfunction _LazyMan(name){\n    let that = this // 保存this指向\n    this.tasks = []  // 创建一个执行队列\n    this.tasks.push((n =&gt; { //  用闭包的方式，push进执行队列\n        return function(){\n            console.log('Hi,this is ' + n + '!')\n            that.next() \n        }\n  })(name)) // 用一个立即执行函数，进行参数的传递\n    setTimeout(function(){that.next()},0) \n}\n\n_LazyMan.prototype.next = function(){\n    var fn = this.tasks.shift() // 用shift()方式取出执行函数\n    fn &amp;&amp; fn() // 执行函数\n}\n\n_LazyMan.prototype.eat = function(food){\n  let that = this\n    var fn = ((f) =&gt; {\n        return () =&gt; {\n            console.log('I eated ' + f + '!')\n            that.next() \n        }\n    })(food)\n    this.tasks.push(fn)  \n    return this\n}\n\n_LazyMan.prototype.sleep = function(delay){\n  let that = this\n    var fn = (d =&gt; {\n    return () =&gt; {\n          setTimeout(() =&gt; {\n          console.log('I sleeped '+(d/1000)+'s')\n          that.next()\n        },d)\n      }\n    })(delay)\n  this.tasks.push(fn)\n    return that\n}\n\n_LazyMan.prototype.sleepFirst = function(delay){\n  let that = this\n    var fn = (d =&gt; {\n      return () =&gt; {\n          setTimeout(() =&gt; {\n          console.log('At first! sleep '+(d/1000)+'s')\n          that.next()\n        },d)\n      }\n    })(delay)\n    this.tasks.unshift(fn)  // sleepFirst要使用unshift把方法添加到队列最前，实现首先执行。\n    return this\n}\n\nfunction LazyMan(name){\n    return new _LazyMan(name)\n}\n\"><pre class=\"notranslate\"><span class=\"pl-c\">// 定义_LazyMan构造函数</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">_LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">that</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span> <span class=\"pl-c\">// 保存this指向</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>  <span class=\"pl-c\">// 创建一个执行队列</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c\">//  用闭包的方式，push进执行队列</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hi,this is '</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">n</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">'!'</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-s1\">that</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> \n        <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 用一个立即执行函数，进行参数的传递</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span><span class=\"pl-s1\">that</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span> \n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-s1\">_LazyMan</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">var</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 用shift()方式取出执行函数</span>\n    <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 执行函数</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-s1\">_LazyMan</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">that</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span>\n    <span class=\"pl-k\">var</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">f</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'I eated '</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">f</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">'!'</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-s1\">that</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> \n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">)</span>  \n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-s1\">_LazyMan</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">that</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span>\n    <span class=\"pl-k\">var</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'I sleeped '</span><span class=\"pl-c1\">+</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span><span class=\"pl-c1\">/</span><span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">+</span><span class=\"pl-s\">'s'</span><span class=\"pl-kos\">)</span>\n          <span class=\"pl-s1\">that</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">d</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">that</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-s1\">_LazyMan</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">that</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span>\n    <span class=\"pl-k\">var</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'At first! sleep '</span><span class=\"pl-c1\">+</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">d</span><span class=\"pl-c1\">/</span><span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">+</span><span class=\"pl-s\">'s'</span><span class=\"pl-kos\">)</span>\n          <span class=\"pl-s1\">that</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">d</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">)</span>  <span class=\"pl-c\">// sleepFirst要使用unshift把方法添加到队列最前，实现首先执行。</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">_LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"gelxgx","avatarUrl":"https://avatars.githubusercontent.com/u/61468810?u=10c583543a87278cf0b9e5b787f4f33064be1365&v=4","url":"https://github.com/gelxgx"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASmHE","bodyHTML":"<h3 dir=\"auto\">思路</h3>\n<ul dir=\"auto\">\n<li>设计一个构造函数 LazyMan 参数为 name 。</li>\n<li>为每个 lazyMan 维护一个 todoQueue 队列，将待办任务依次放入，每执行完一个任务就去执行 next 方法（会去队列中检查是否还有任务需要执行）。</li>\n<li>sleepFirst 方法需要在队列头部添加任务。</li>\n<li>所有方法放在原型链上，多实例共享这些方法。</li>\n<li>为了达到链式调用，每个原型上的方法均返回 this （该实例）。</li>\n<li>这里有个重点，在构造函数中不是立即执行第一个任务，而是利用 eventloop 机制（链式调用完后再去调用第一个任务）。</li>\n</ul>\n<h3 dir=\"auto\">代码如下（测试用例均通过）</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function LazyMan(name) {\n  if (!new.target) {\n    return new LazyMan(name);\n  }\n  this.name = name;\n  this.todoQueue = [];\n  console.log(`Hi! This is ${name}!`);\n  // 保证链式调用优先\n  setTimeout(() =&gt; {\n    this.next();\n  }, 0);\n}\n\nLazyMan.prototype = {\n  constructor: LazyMan,\n  next() {\n    let fn = this.todoQueue.shift();\n    fn &amp;&amp; fn();\n  },\n  sleep(s) {\n    let fn = () =&gt; {\n      setTimeout(() =&gt; {\n        console.log(`Wake up after ${s}`);\n        this.next();\n      }, s * 1000);\n    };\n    this.todoQueue.push(fn);\n    return this;\n  },\n  sleepFirst(s) {\n    let fn = () =&gt; {\n      setTimeout(() =&gt; {\n        console.log(`Wake up after ${s}`);\n        this.next();\n      }, s * 1000);\n    };\n    this.todoQueue.unshift(fn);\n    return this;\n  },\n  eat(food) {\n    let fn = () =&gt; {\n      console.log(`Eat ${food}~`);\n      this.next();\n    };\n    this.todoQueue.push(fn);\n\n    return this;\n  },\n};\n\nvar lazy1 = new LazyMan('Hank').eat('supper').sleep(5)\nvar lazy2 = LazyMan('Hank').eat('supper').sleep(5)\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-k\">new</span><span class=\"pl-kos\">.</span><span class=\"pl-k\">target</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">todoQueue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi! This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>!`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">// 保证链式调用优先</span>\n  <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">constructor</span>: <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">todoQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">s</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-en\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">s</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">s</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">todoQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">s</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-en\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">s</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">s</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">todoQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-en\">fn</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>~`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">todoQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">lazy1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'supper'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">lazy2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'supper'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">欢迎大家食用，有问题可讨论</p>","author":{"login":"fanerge","avatarUrl":"https://avatars.githubusercontent.com/u/17136707?u=d7250b0655c87b8e8e1cdaf826754fe5e6f68e80&v=4","url":"https://github.com/fanerge"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASnGr","bodyHTML":"<p dir=\"auto\">大概思路：</p>\n<ol dir=\"auto\">\n<li>有个内部队列用来存储回调，在回调结束时执行触发下一个回调</li>\n<li>使用宏任务/微任务 启动执行</li>\n</ol>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class _LazyMan {\n  constructor(name) {\n    this.tasks = [() =&gt; {\n      console.log(`Hi! This is ${name}`);\n      this.next();\n    }];\n   // 延时执行\n    Promise.resolve().then(() =&gt; this.next());\n  }\n\n  sleep(time) {\n    this.tasks.push(() =&gt; setTimeout(() =&gt; this.next(), time * 1000));\n    return this;\n  }\n\n  sleepFirst(time) {\n    this.tasks.unshift(() =&gt; setTimeout(() =&gt; this.next(), time * 1000));\n    return this;\n  }\n\n  eat(food) {\n    this.tasks.push(() =&gt; {\n      console.log(`Eat ${food}`);\n      this.next();\n    });\n    return this;\n  }\n  next() {\n   // 获取队列回调，执行\n    const t = this.tasks.shift();\n    t &amp;&amp; t();\n  }\n}\n\nconst LazyMan = (name) =&gt; new _LazyMan(name);\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-s1\">_LazyMan</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi! This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n   <span class=\"pl-c\">// 延时执行</span>\n    <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n   <span class=\"pl-c\">// 获取队列回调，执行</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">t</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">tasks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">t</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">t</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-v\">LazyMan</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">_LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>","author":{"login":"shenzhim","avatarUrl":"https://avatars.githubusercontent.com/u/12244144?u=54329039e3dca896c03b67466cfd71729abb0430&v=4","url":"https://github.com/shenzhim"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASofu","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class LazyMan {\n  constructor(name) {\n    \n    this.beforeDelay = 0;\n    this.afterDelay = 0;\n    this.name = name;\n    \n    setTimeout(()=&gt;{\n      setTimeout(()=&gt;{\n        if(this.beforeDelay){\n          console.log(`Wake up after ${this.beforeDelay / 1000}`);\n        }\n        console.log(`Hi This is ${this.name}!`);\n        \n        this.beforeDelay = 0;\n        \n      },this.beforeDelay);\n    }, 0);\n  }\n  sleep(seconds){\n    \n    this.afterDelay = seconds * 1000;\n    return this;\n  }\n  sleepFirst(seconds){\n    \n    this.beforeDelay = seconds * 1000;\n    return this;\n  }\n  eat(food){\n    setTimeout(() =&gt; {\n      \n      if(this.afterDelay){\n        console.log(`Wake up after ${this.afterDelay / 1000}`);\n      }\n      setTimeout(() =&gt; {\n        console.log(`Eat ${food}~`);\n        this.afterDelay = 0;\n      }, this.beforeDelay);\n      \n    }, this.afterDelay);\n    return this;\n  }\n}\n\n\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-v\">LazyMan</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    \n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">beforeDelay</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">afterDelay</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">;</span>\n    \n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">beforeDelay</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n          <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">beforeDelay</span> <span class=\"pl-c1\">/</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">}</span></span>!`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        \n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">beforeDelay</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span>\n        \n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">beforeDelay</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">seconds</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    \n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">afterDelay</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">seconds</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">seconds</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    \n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">beforeDelay</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">seconds</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      \n      <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">afterDelay</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">afterDelay</span> <span class=\"pl-c1\">/</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>~`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">afterDelay</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">beforeDelay</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      \n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">afterDelay</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n</pre></div>","author":{"login":"tsaowe","avatarUrl":"https://avatars.githubusercontent.com/u/1531330?v=4","url":"https://github.com/tsaowe"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASpL-","bodyHTML":"<ol dir=\"auto\">\n<li>回调函数连结前后任务执行，然后用套娃控制任务顺序</li>\n<li>有两个地方需要判断是否调用了哪些函数，来决定打印什么符号，用位运算的方式可以在写判断条件的时候易于理解和维护</li>\n</ol>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function LazyMan(name) {\n  let flag = 0\n  const FlagSleep = 1\n  const FlagEat = 2\n  const FlagSleepFirst = 4\n\n  const isFlag = (...flags) =&gt; {\n    const expectFlag = flags.reduce((r, i) =&gt; r | i, 0)\n    const matchedFlag = expectFlag &amp; flag\n    return matchedFlag === expectFlag\n  }\n\n  const norFlag = (...flags) =&gt; {\n    const expectFlag = flags.reduce((r, i) =&gt; r | i, 0)\n    const matchedFlag = expectFlag &amp; flag\n    return matchedFlag === 0\n  }\n\n  let root = task =&gt; {\n    task()\n  }\n\n  let after = task =&gt; {\n    let previous = root\n    // 执行顺序是 previous &gt; task &gt; nextTask\n    root = nextTask =&gt; previous(() =&gt; task(nextTask))\n  }\n\n  let before = task =&gt; {\n    let previous = root\n    // 执行顺序是 task &gt; previous &gt; nextTask\n    root = nextTask =&gt; task(() =&gt; previous(nextTask))\n  }\n\n  const me = {\n    hi() {\n      after(fn =&gt; {\n        // ....\n        if (isFlag(FlagSleep, FlagEat) || norFlag(FlagSleep, FlagEat))\n          console.log(`Hi! This is ${name}!`)\n        else console.log(`Hi This is ${name}!`)\n        fn()\n      })\n      return me\n    },\n    eat(food) {\n      flag |= FlagEat\n      after(fn =&gt; {\n        // ....\n        if (isFlag(FlagSleepFirst)) console.log(`Eat ${food}`)\n        else console.log(`Eat ${food}~`)\n        fn()\n      })\n      return me\n    },\n    sleep(time) {\n      flag |= FlagSleep\n      after(fn =&gt; {\n        setTimeout(() =&gt; {\n          console.log(`Wake up after ${time}`)\n          fn()\n        }, time * 1e3)\n      })\n      return me\n    },\n    sleepFirst(time) {\n      flag |= FlagSleepFirst\n      before(fn =&gt; {\n        setTimeout(() =&gt; {\n          console.log(`Wake up after ${time}`)\n          fn()\n        }, time * 1e3)\n      })\n      return me\n    },\n  }\n\n  // 或者任何nextTick方式都行\n  Promise.resolve().then(() =&gt; {\n    root(() =&gt; 0)\n  })\n\n  return me.hi()\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">flag</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-v\">FlagSleep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">1</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-v\">FlagEat</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">2</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-v\">FlagSleepFirst</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">4</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">isFlag</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">flags</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">expectFlag</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">flags</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">r</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">r</span> <span class=\"pl-c1\">|</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">matchedFlag</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">expectFlag</span> <span class=\"pl-c1\">&amp;</span> <span class=\"pl-s1\">flag</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">matchedFlag</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">expectFlag</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">norFlag</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">flags</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">expectFlag</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">flags</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">r</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">r</span> <span class=\"pl-c1\">|</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">matchedFlag</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">expectFlag</span> <span class=\"pl-c1\">&amp;</span> <span class=\"pl-s1\">flag</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">matchedFlag</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">0</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">let</span> <span class=\"pl-en\">root</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">task</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">task</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">let</span> <span class=\"pl-en\">after</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">task</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">previous</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">root</span>\n    <span class=\"pl-c\">// 执行顺序是 previous &gt; task &gt; nextTask</span>\n    <span class=\"pl-en\">root</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">nextTask</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">previous</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">task</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">nextTask</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">let</span> <span class=\"pl-en\">before</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">task</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">previous</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">root</span>\n    <span class=\"pl-c\">// 执行顺序是 task &gt; previous &gt; nextTask</span>\n    <span class=\"pl-en\">root</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">nextTask</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">task</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">previous</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">nextTask</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">me</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">hi</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-en\">after</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c\">// ....</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">isFlag</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">FlagSleep</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">FlagEat</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">||</span> <span class=\"pl-en\">norFlag</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">FlagSleep</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">FlagEat</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n          <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi! This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>!`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">else</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hi This is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>!`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">me</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">flag</span> <span class=\"pl-c1\">|=</span> <span class=\"pl-v\">FlagEat</span>\n      <span class=\"pl-en\">after</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c\">// ....</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">isFlag</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">FlagSleepFirst</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">else</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>~`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">me</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">flag</span> <span class=\"pl-c1\">|=</span> <span class=\"pl-v\">FlagSleep</span>\n      <span class=\"pl-en\">after</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n          <span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1e3</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">me</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">flag</span> <span class=\"pl-c1\">|=</span> <span class=\"pl-v\">FlagSleepFirst</span>\n      <span class=\"pl-en\">before</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n          <span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1e3</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">me</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-c\">// 或者任何nextTick方式都行</span>\n  <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">root</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">me</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">hi</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><del>你不写单测不懂这题有多坑</del><br>\n单测是开发的第一生产力</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// LazyMan.test.js\n\ndescribe('LazyMan()', () =&gt; {\n  jest.setTimeout(12e3)\n\n  const sleep = (time = 0) =&gt; new Promise(resolve =&gt; setTimeout(resolve, time + 1))\n\n  it('should say Hi!', async () =&gt; {\n    console.log = jest.fn()\n    LazyMan('Hank')\n\n    await sleep()\n    expect(console.log).toHaveBeenCalledWith('Hi! This is Hank!')\n  })\n\n  it('should work with sleep,eat', async () =&gt; {\n    console.log = jest.fn()\n    LazyMan('Hank').sleep(10).eat('dinner')\n\n    await sleep()\n    expect(console.log).toHaveBeenNthCalledWith(1, 'Hi! This is Hank!')\n    await sleep(10e3)\n    expect(console.log).toHaveBeenNthCalledWith(2, 'Wake up after 10')\n    expect(console.log).toHaveBeenNthCalledWith(3, 'Eat dinner~')\n  })\n\n  it('should work with eat,eat', async () =&gt; {\n    console.log = jest.fn()\n    LazyMan('Hank').eat('dinner').eat('supper')\n\n    await sleep()\n    expect(console.log).toHaveBeenNthCalledWith(1, 'Hi This is Hank!')\n    expect(console.log).toHaveBeenNthCalledWith(2, 'Eat dinner~')\n    expect(console.log).toHaveBeenNthCalledWith(3, 'Eat supper~')\n  })\n\n  it('should work with sleepFirst,eat', async () =&gt; {\n    console.log = jest.fn()\n    LazyMan('Hank').sleepFirst(5).eat('supper')\n\n    await sleep(5e3)\n    expect(console.log).toHaveBeenNthCalledWith(1, 'Wake up after 5')\n    expect(console.log).toHaveBeenNthCalledWith(2, 'Hi This is Hank!')\n    expect(console.log).toHaveBeenNthCalledWith(3, 'Eat supper')\n  })\n\n  it('should work with eat,sleepFirst', async () =&gt; {\n    console.log = jest.fn()\n    LazyMan('Hank').eat('supper').sleepFirst(5)\n\n    await sleep(5e3)\n    expect(console.log).toHaveBeenNthCalledWith(1, 'Wake up after 5')\n    expect(console.log).toHaveBeenNthCalledWith(2, 'Hi This is Hank!')\n    expect(console.log).toHaveBeenNthCalledWith(3, 'Eat supper')\n  })\n})\n\"><pre class=\"notranslate\"><span class=\"pl-c\">// LazyMan.test.js</span>\n\n<span class=\"pl-en\">describe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'LazyMan()'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">jest</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">12e3</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">sleep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">+</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should say Hi!'</span><span class=\"pl-kos\">,</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">jest</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hi! This is Hank!'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should work with sleep,eat'</span><span class=\"pl-kos\">,</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">jest</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">10</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'dinner'</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Hi! This is Hank!'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">10e3</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Wake up after 10'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Eat dinner~'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should work with eat,eat'</span><span class=\"pl-kos\">,</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">jest</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'dinner'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'supper'</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Hi This is Hank!'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Eat dinner~'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Eat supper~'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should work with sleepFirst,eat'</span><span class=\"pl-kos\">,</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">jest</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'supper'</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5e3</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Wake up after 5'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Hi This is Hank!'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Eat supper'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should work with eat,sleepFirst'</span><span class=\"pl-kos\">,</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">jest</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hank'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'supper'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5e3</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Wake up after 5'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Hi This is Hank!'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toHaveBeenNthCalledWith</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'Eat supper'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>","author":{"login":"blackcoffeecat","avatarUrl":"https://avatars.githubusercontent.com/u/43604283?v=4","url":"https://github.com/blackcoffeecat"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASqLc","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"------------秀起来兄弟们------------\n/**\n * 动态注入自定义函数+链式调用\n * @param {初始入参} name\n */\nfunction MakeFnFactory(name) {\n  this.name = name;\n  //初始化一name个任务\n  this.queue = [\n    {\n      level: 1,\n      fnName: &quot;init&quot;,\n      fn: () =&gt; {\n        console.log(`Hi This Is ${this.name}`);\n        this.next();\n        return this;\n      },\n    },\n  ];\n  //这个作用主要是拿到注册时候的函数实体，因为调用才会入参，所以需要在调用时候二次构造带有参数的函数\n  this.addQueue = [];\n  //最后链式触发\n  setTimeout(() =&gt; this.next());\n  /**\n   * 函数注册\n   * @param {函数名称} fnName\n   * @param {函数实体} fn\n   * @param {自定义函数优先级，默认值越大优先级越高} level\n   * @returns\n   */\n  this.addFn = (fnName, fn, level) =&gt; {\n    this.addQueue.push({\n      level,\n      fnName,\n      fn: fn,\n    });\n    this[fnName] = (...args) =&gt; {\n      let findFn = this.addQueue.find((item) =&gt; item.fnName == fnName);\n      findFn &amp;&amp;\n        this.queue.push({\n          ...findFn,\n          fn: () =&gt; findFn.fn(...args),\n        });\n      this.sortFn();\n      return this;\n    };\n    return this;\n  };\n  /**\n   * 对任务队列进行按照优先级重排\n   */\n  this.sortFn = () =&gt; {\n    this.queue = this.queue.sort((a, b) =&gt; b.level - a.level);\n  };\n  /**\n   * 触发下一个回调\n   */\n  this.next = () =&gt; {\n    this.queue.length &amp;&amp; this.queue.shift()[&quot;fn&quot;]();\n  };\n}\n\n\n\n\n\n\n\n\n\n//测试\n\nlet temp = new MakeFnFactory(&quot;jack&quot;);\ntemp\n  .addFn(\n    &quot;eat&quot;,\n    (food) =&gt; {\n      console.log(`Eat ${food}`);\n      temp.next();\n    },\n    1\n  )\n  .addFn(\n    &quot;sleep&quot;,\n    (time) =&gt; {\n      setTimeout(() =&gt; {\n        console.log(`wake up after ${time}`);\n        temp.next();\n      }, time * 1000);\n    },\n    1\n  )\n  .addFn(\n    &quot;sleepFirst&quot;,\n    (time) =&gt; {\n      setTimeout(() =&gt; {\n        console.log(`sleepFirst wake up after ${time}`);\n        temp.next();\n      }, time * 1000);\n    },\n    3\n  )\n  .eat(&quot;fish&quot;)\n  .sleep(2)\n  .eat(&quot;vegetable&quot;)\n  .sleepFirst(2);\n\n//输出\nsleepFirst wake up after 2\nHi This Is jack\nEat fish\nwake up after 2\nEat vegetable\"><pre class=\"notranslate\"><code class=\"notranslate\">------------秀起来兄弟们------------\n/**\n * 动态注入自定义函数+链式调用\n * @param {初始入参} name\n */\nfunction MakeFnFactory(name) {\n  this.name = name;\n  //初始化一name个任务\n  this.queue = [\n    {\n      level: 1,\n      fnName: \"init\",\n      fn: () =&gt; {\n        console.log(`Hi This Is ${this.name}`);\n        this.next();\n        return this;\n      },\n    },\n  ];\n  //这个作用主要是拿到注册时候的函数实体，因为调用才会入参，所以需要在调用时候二次构造带有参数的函数\n  this.addQueue = [];\n  //最后链式触发\n  setTimeout(() =&gt; this.next());\n  /**\n   * 函数注册\n   * @param {函数名称} fnName\n   * @param {函数实体} fn\n   * @param {自定义函数优先级，默认值越大优先级越高} level\n   * @returns\n   */\n  this.addFn = (fnName, fn, level) =&gt; {\n    this.addQueue.push({\n      level,\n      fnName,\n      fn: fn,\n    });\n    this[fnName] = (...args) =&gt; {\n      let findFn = this.addQueue.find((item) =&gt; item.fnName == fnName);\n      findFn &amp;&amp;\n        this.queue.push({\n          ...findFn,\n          fn: () =&gt; findFn.fn(...args),\n        });\n      this.sortFn();\n      return this;\n    };\n    return this;\n  };\n  /**\n   * 对任务队列进行按照优先级重排\n   */\n  this.sortFn = () =&gt; {\n    this.queue = this.queue.sort((a, b) =&gt; b.level - a.level);\n  };\n  /**\n   * 触发下一个回调\n   */\n  this.next = () =&gt; {\n    this.queue.length &amp;&amp; this.queue.shift()[\"fn\"]();\n  };\n}\n\n\n\n\n\n\n\n\n\n//测试\n\nlet temp = new MakeFnFactory(\"jack\");\ntemp\n  .addFn(\n    \"eat\",\n    (food) =&gt; {\n      console.log(`Eat ${food}`);\n      temp.next();\n    },\n    1\n  )\n  .addFn(\n    \"sleep\",\n    (time) =&gt; {\n      setTimeout(() =&gt; {\n        console.log(`wake up after ${time}`);\n        temp.next();\n      }, time * 1000);\n    },\n    1\n  )\n  .addFn(\n    \"sleepFirst\",\n    (time) =&gt; {\n      setTimeout(() =&gt; {\n        console.log(`sleepFirst wake up after ${time}`);\n        temp.next();\n      }, time * 1000);\n    },\n    3\n  )\n  .eat(\"fish\")\n  .sleep(2)\n  .eat(\"vegetable\")\n  .sleepFirst(2);\n\n//输出\nsleepFirst wake up after 2\nHi This Is jack\nEat fish\nwake up after 2\nEat vegetable\n</code></pre></div>","author":{"login":"tangguolong","avatarUrl":"https://avatars.githubusercontent.com/u/44673867?u=bf72c0370ea5cda74e7522b145bcb111d46afe96&v=4","url":"https://github.com/tangguolong"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASuex","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"class LazyMan {\n  constructor(name) {\n    this.cbQueue = [];\n    this.name = name;\n    this.init();\n    setTimeout(() =&gt; {\n      this.execute();\n    });\n  }\n\n  execute = () =&gt; {\n    this.cbQueue.forEach(cb =&gt; cb?.());\n  };\n\n  enQueue = (cb, isFront) =&gt; {\n    isFront ? this.cbQueue.unshift(cb) : this.cbQueue.push(cb);\n  };\n\n  insertFront = cb =&gt; {\n    this.enQueue(cb, true);\n  };\n\n  insertLast = cb =&gt; {\n    this.enQueue(cb, false);\n  };\n\n  init = () =&gt; {\n    this.insertLast(() =&gt; console.log(`I am ${this.name}`));\n    return this;\n  };\n\n  eat = food =&gt; {\n    this.insertLast(() =&gt; console.log(`eat ${food}`));\n    return this;\n  };\n\n  sleep = second =&gt; {\n    this.insertLast(() =&gt; sleepByDate(second));\n    return this;\n  };\n\n  sleepFirst = second =&gt; {\n    this.insertFront(() =&gt; sleepByDate(second));\n    return this;\n  };\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">class</span> <span class=\"pl-v\">LazyMan</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">cbQueue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">init</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">execute</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-c1\">execute</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">cbQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cb</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">cb</span><span class=\"pl-kos\">?.</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c1\">enQueue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">cb</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">isFront</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">isFront</span> ? <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">cbQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cb</span><span class=\"pl-kos\">)</span> : <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">cbQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cb</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c1\">insertFront</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">cb</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">enQueue</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cb</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c1\">insertLast</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">cb</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">enQueue</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cb</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c1\">init</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">insertLast</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`I am <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c1\">eat</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">food</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">insertLast</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c1\">sleep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">second</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">insertLast</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">sleepByDate</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">second</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c1\">sleepFirst</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">second</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">insertFront</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">sleepByDate</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">second</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"yearth","avatarUrl":"https://avatars.githubusercontent.com/u/12742400?u=0a6e6f05ecb3b00661fd1f04b2ecce8dd4249534&v=4","url":"https://github.com/yearth"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ATRf6","bodyHTML":"<p dir=\"auto\">使用观察者模式，后续扩展可使用命令模式和策略模式<br>\n具体打印和题目不一致，这里想提供更加灵活的答案<br>\n利用单元操作数组，最后统一操作<br>\n如果有其他的扩展或者改动，可以新增type类型和对应的方法<br>\n也可以添加参数是否自动执行run方法</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"/**单元操作类型 */\ninterface Iunit {\n    type: &quot;slepp&quot; | &quot;print&quot;\n    value: any\n}\n\nfunction sleep(time: number) {\n    return new Promise&lt;void&gt;((resolve) =&gt; {\n        setTimeout(() =&gt; {\n            resolve()\n        }, time)\n    })\n}\n\nexport function LazyMan(text: any) {\n    return new LazyManClass(text)\n}\n\nclass LazyManClass {\n    /**单元操作队列 */\n    private  unitList: Iunit[] = []\n    constructor(text: any) {\n        /**具体打印和题目不一致，这里想提供更加灵活的答案 */\n        this.eat(text)\n        /**同步添加完队列后进行执行 */\n        setTimeout(() =&gt; {\n            this.run()\n        })\n    }\n    /**添加前置休眠队列 */\n    sleepFirst = (time: number) =&gt; {\n        this.unitList.unshift({\n            type: &quot;slepp&quot;,\n            value: time\n        })\n        return this\n    }\n    /**添加普通休眠队列 */\n    sleep = (time: number) =&gt; {\n        this.unitList.push({\n            type: &quot;slepp&quot;,\n            value: time\n        })\n        return this\n    }\n\n    /**添加打印队列*/\n    eat = (value: any) =&gt; {\n        this.unitList.push({\n            type: &quot;print&quot;,\n            value: value\n        })\n        return this\n    }\n    /**执行方法 */\n    run = async () =&gt; {\n        for (const iterator of this.unitList) {\n            if (iterator.type === &quot;print&quot;) {\n                console.log(iterator.value)\n            } else if (iterator.type === &quot;slepp&quot;) {\n                await sleep(iterator.value)\n            }\n        }\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">/**单元操作类型 */</span>\n<span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Iunit</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">\"slepp\"</span> <span class=\"pl-c1\">|</span> <span class=\"pl-s\">\"print\"</span>\n    <span class=\"pl-c1\">value</span>: <span class=\"pl-smi\">any</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span>: <span class=\"pl-smi\">number</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Promise</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\"><span class=\"pl-k\">void</span></span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">function</span> <span class=\"pl-smi\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">text</span>: <span class=\"pl-smi\">any</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">LazyManClass</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">text</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">LazyManClass</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">/**单元操作队列 */</span>\n    <span class=\"pl-k\">private</span>  <span class=\"pl-c1\">unitList</span>: <span class=\"pl-smi\">Iunit</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">text</span>: <span class=\"pl-smi\">any</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c\">/**具体打印和题目不一致，这里想提供更加灵活的答案 */</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">text</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-c\">/**同步添加完队列后进行执行 */</span>\n        <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">run</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-c\">/**添加前置休眠队列 */</span>\n    <span class=\"pl-c1\">sleepFirst</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span>: <span class=\"pl-smi\">number</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">unitList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n            <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">\"slepp\"</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-c1\">value</span>: <span class=\"pl-s1\">time</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-c\">/**添加普通休眠队列 */</span>\n    <span class=\"pl-c1\">sleep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span>: <span class=\"pl-smi\">number</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">unitList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n            <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">\"slepp\"</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-c1\">value</span>: <span class=\"pl-s1\">time</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-c\">/**添加打印队列*/</span>\n    <span class=\"pl-c1\">eat</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span>: <span class=\"pl-smi\">any</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">unitList</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n            <span class=\"pl-c1\">type</span>: <span class=\"pl-s\">\"print\"</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-c1\">value</span>: <span class=\"pl-s1\">value</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-c\">/**执行方法 */</span>\n    <span class=\"pl-c1\">run</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">iterator</span> <span class=\"pl-k\">of</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">unitList</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">iterator</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"print\"</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">iterator</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">iterator</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">type</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"slepp\"</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">iterator</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"ZengHaiTao1","avatarUrl":"https://avatars.githubusercontent.com/u/36601102?u=1ebb6b9ceb55d47a1fb5171e642c9ba41ca7473e&v=4","url":"https://github.com/ZengHaiTao1"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ATVPo","bodyHTML":"<p dir=\"auto\">记录一下~</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const createSleep = (time) =&gt; () =&gt; new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      console.log(`Wake up after ${time}`);\n      resolve();\n    }, time * 1000)\n  })\n\nconst LazyMan = (name) =&gt; {\n  const actions = [() =&gt; console.log(`Hi This is ${name}!`)];\n\n\n  setTimeout(async () =&gt; {\n    while (actions.length) {\n      await actions.shift()();\n    }\n  }, 0)\n\n  const person = {\n    sleep: (time) =&gt; {\n      actions.push(createSleep(time));\n      return person;\n    },\n    eat: (food) =&gt; {\n      actions.push(() =&gt; console.log(`Eat ${food}~`));\n      return person;\n    },\n    sleepFirst: (time) =&gt; {\n      actions.unshift(createSleep(time));\n      return person;\n    }\n  }\n\n  return person;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">const createSleep = (time) =&gt; () =&gt; new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      console.log(`Wake up after ${time}`);\n      resolve();\n    }, time * 1000)\n  })\n\nconst LazyMan = (name) =&gt; {\n  const actions = [() =&gt; console.log(`Hi This is ${name}!`)];\n\n\n  setTimeout(async () =&gt; {\n    while (actions.length) {\n      await actions.shift()();\n    }\n  }, 0)\n\n  const person = {\n    sleep: (time) =&gt; {\n      actions.push(createSleep(time));\n      return person;\n    },\n    eat: (food) =&gt; {\n      actions.push(() =&gt; console.log(`Eat ${food}~`));\n      return person;\n    },\n    sleepFirst: (time) =&gt; {\n      actions.unshift(createSleep(time));\n      return person;\n    }\n  }\n\n  return person;\n}\n</code></pre></div>","author":{"login":"theWindFollowtheWillow","avatarUrl":"https://avatars.githubusercontent.com/u/42260527?u=a37802f14414cd50eba4c305c26a222ad532ea75&v=4","url":"https://github.com/theWindFollowtheWillow"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ATaFZ","bodyHTML":"<p dir=\"auto\">实现：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"/** 异步调度器 */\nclass Scheduler {\n  constructor(maxTaskCount) {\n    this.count = 0\n    this.maxTaskCount = maxTaskCount\n    this.taskQueue = []\n  }\n  async add(promiseCreator, toFirst) {\n    if (this.count &gt;= this.maxTaskCount) {\n      await new Promise(resolve =&gt; {\n        toFirst ? this.taskQueue.unshift(resolve) : this.taskQueue.push(resolve)\n      })\n    }\n    this.count++\n    const result = await promiseCreator()\n    this.count--\n    if (this.taskQueue.length) this.taskQueue.shift()()\n    return result\n  }\n}\n\n/** 目标业务类 */\nclass LazyManClass {\n  constructor(name) {\n    this.name = name\n    this.scheduler = new Scheduler(1)\n    this.init()\n  }\n  init() {\n    this.addTask()\n    this.sayHi()\n  }\n  addTask(log, time = 0, toFirst) {\n    this.scheduler.add(() =&gt; new Promise((resolve) =&gt; setTimeout(resolve, time * 1000)).then(() =&gt; log &amp;&amp; console.log(log)), toFirst)\n    return this\n  }\n  sayHi() {\n    return this.addTask(this.name)\n  }\n  eat(food) {\n    return this.addTask(`Eat ${food}~`)\n  }\n  sleep(time, toFirst) {\n    return this.addTask(`Wake up after ${time}`, time, toFirst)\n  }\n  sleepFirst(time) {\n    return this.sleep(time, true)\n  }\n}\n\nfunction LazyMan(name) {\n  return new LazyManClass(name)\n}\n\n// LazyMan('Hank')\n// LazyMan('Hank').sleep(2).eat('dinner')\n// LazyMan('Hank').eat('dinner').eat('supper')\n// LazyMan('Hank').sleepFirst(2).eat('supper')\n// LazyMan('Hank').eat('supper').sleepFirst(2)\"><pre class=\"notranslate\"><span class=\"pl-c\">/** 异步调度器 */</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Scheduler</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">maxTaskCount</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">count</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">maxTaskCount</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">maxTaskCount</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskQueue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">async</span> <span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">promiseCreator</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">toFirst</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">count</span> <span class=\"pl-c1\">&gt;=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">maxTaskCount</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">await</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">toFirst</span> ? <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">)</span> : <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">count</span><span class=\"pl-c1\">++</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">promiseCreator</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">count</span><span class=\"pl-c1\">--</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">taskQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">/** 目标业务类 */</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">LazyManClass</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">scheduler</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Scheduler</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">init</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">init</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addTask</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sayHi</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">addTask</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">log</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">toFirst</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">scheduler</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">log</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">toFirst</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">sayHi</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addTask</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">eat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addTask</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Eat <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">food</span><span class=\"pl-kos\">}</span></span>~`</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">toFirst</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addTask</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Wake up after <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">time</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">toFirst</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">sleepFirst</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">time</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">LazyMan</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">LazyManClass</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// LazyMan('Hank')</span>\n<span class=\"pl-c\">// LazyMan('Hank').sleep(2).eat('dinner')</span>\n<span class=\"pl-c\">// LazyMan('Hank').eat('dinner').eat('supper')</span>\n<span class=\"pl-c\">// LazyMan('Hank').sleepFirst(2).eat('supper')</span>\n<span class=\"pl-c\">// LazyMan('Hank').eat('supper').sleepFirst(2)</span></pre></div>","author":{"login":"andyyxw","avatarUrl":"https://avatars.githubusercontent.com/u/41931722?u=d11913a45891fb02f1e35743231536adc079a405&v=4","url":"https://github.com/andyyxw"},"replies":null}}]}}},"pageContext":{"number":13,"previous":{"title":"如何选择前端打包工具？","number":9},"next":{"title":"实现MyNew方法","number":15}}},
    "staticQueryHashes": ["151096407","2861350382"]}