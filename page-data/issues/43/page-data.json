{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/43",
    "result": {"data":{"issuesJson":{"id":"c3d45c17-b2cc-5375-b995-ab62a524c922","title":"Webpack中几种hash的区别是？","number":43,"bodyHTML":"\n<h3 dir=\"auto\">发生问题的场景</h3>\n\n<p dir=\"auto\">小明初次接触<code class=\"notranslate\">webpack</code>，了解到<code class=\"notranslate\">hash</code>这一概念，但不清楚他的应用场景及分类。</p>\n<h3 dir=\"auto\">需要解决的问题</h3>\n\n<p dir=\"auto\">你能以如下顺序帮小明解惑么：</p>\n<ol dir=\"auto\">\n<li>为什么有<code class=\"notranslate\">hash</code>，他的应用场景是什么？</li>\n<li>在<code class=\"notranslate\">webpack</code>中有几种<code class=\"notranslate\">hash</code>，他们的分类依据是？</li>\n<li>对不同类型的<code class=\"notranslate\">hash</code>什么时候使用，你能给出一些最佳实践么？</li>\n</ol>\n<h3 dir=\"auto\">最佳答案评选标准</h3>\n\n<ol dir=\"auto\">\n<li>答案遵循以上顺序作答</li>\n<li>有条理，全面的回答</li>\n</ol>\n<h2 dir=\"auto\">最佳答案</h2>\n<p dir=\"auto\"><a href=\"https://github.com/BetaSu/fe-hunter/issues/43#issuecomment-1085374899\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/43/hovercard\">shenzhim的回答</a></p>\n<h3 dir=\"auto\">答题同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">答题规范：请在<code class=\"notranslate\">一次评论</code>中完成作答，后续修改也请编辑该评论，而不是追加新的评论</p>\n</li>\n<li>\n<p dir=\"auto\">评选标准：最佳答案由<code class=\"notranslate\">围观同学</code>的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji> 和<a href=\"https://github.com/BetaSu\">卡颂</a>共同决定</p>\n</li>\n<li>\n<p dir=\"auto\">评选时间：一般是问题发布24小时后评选，如果问题发布当天回答数较少，问题悬赏金额可能增加，同时悬赏时间也会增加</p>\n</li>\n</ul>\n<h3 dir=\"auto\">围观同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">对于你满意的答案，请不要吝惜你的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>，这是评选<strong>最佳答案</strong>的依据</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">非答题的评论</code>会被删除，问题相关讨论请在<a href=\"https://github.com/BetaSu/fe-hunter\">赏金猎人群</a>中进行</p>\n</li>\n</ul>","updatedAt":"2022-04-08T02:18:57Z","upvoteCount":null,"author":{"login":"BetaSu","avatarUrl":"https://avatars.githubusercontent.com/u/15828041?u=3b08cdf9f9b49dbead9ffb020a94d925904d2b74&v=4","url":"https://github.com/BetaSu"},"category":null,"labels":{"edges":[{"node":{"name":"JS","color":"ffee58"}},{"node":{"name":"工程化","color":"ffca28"}},{"node":{"name":"webpack","color":"ff8f00"}},{"node":{"name":"场景","color":"2196f3"}},{"node":{"name":"Node","color":"ffc107"}}]},"comments":{"edges":[{"node":{"id":"IC_kwDOHCfdf85AsYGz","bodyHTML":"<h3 dir=\"auto\">为什么有hash，他的应用场景是什么</h3>\n<p dir=\"auto\">hash 是webpack在生成文件时，根据文件内容进行hash运算，得到的一个hash值。导致打包时，只要文件发生变更，则会生成一个新的hash值用来跟之前的打包文件做区分，避免存在由于浏览器的缓存问题导致无法获取新的打包文件</p>\n<h3 dir=\"auto\">在webpack中有几种hash，他们的分类依据是？</h3>\n<p dir=\"auto\">webpack中存在三种hash：hash，chunkhash，contenthash<br>\n分类依据还是要从他们生成的方式不同说起：</p>\n<ul dir=\"auto\">\n<li>chunkhash：根据所有的module的_buildHash 生成一个hash值，然后将chunk里包含的module的hash值再算一个hash，这个就是 chunkhash</li>\n<li>hash：最后再将所有的chunkhash整合起来算一个工程整体的的hash，这个就是工程的hash</li>\n<li>contenthash：将chunk中是css类型的module合起来算一个 css文件的 contenthash，将js类型的module整合起来算一个 js文件的contenthash</li>\n</ul>\n<h3 dir=\"auto\">对不同类型的hash什么时候使用，你能给出一些最佳实践么？</h3>\n<ul dir=\"auto\">\n<li>hash：每改变项目中的任何文件，hash值都会变，导致hash值会经常变化，无法充分利用缓存，不推荐使用</li>\n<li>chunkhash：在一个chunk中的任何一个mdoule有发生改变，chunk的hash就会改变，推荐使用在一些不怎么变化的三方库中，利用缓存</li>\n<li>contenthash：chunk中的js改变，或者css改变时生成的contenthash会改变，推荐使用在css文件中，将css文件从chunkhash中剥离出来</li>\n</ul>","author":{"login":"shenzhim","avatarUrl":"https://avatars.githubusercontent.com/u/12244144?u=54329039e3dca896c03b67466cfd71729abb0430&v=4","url":"https://github.com/shenzhim"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AwcjO","bodyHTML":"<h3 dir=\"auto\">为什么有hash，他的应用场景是什么？</h3>\n<p dir=\"auto\">先说一下背景：通过 <strong>Web 缓存</strong>可以减少等待时间和网络流量，因此减少了显示资源表示形式所需的时间。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching\" rel=\"nofollow\">关于缓存的mdn链接</a></p>\n<p dir=\"auto\">而有了web缓存，webpack作为构建工具在<strong>需要部署新版本时</strong>必须要更新发生变化的资源的<strong>文件名</strong>，确保浏览器会去请求<strong>新的资源</strong>，否则浏览器会根据缓存策略去判断可能还是复用着旧的资源。</p>\n<h3 dir=\"auto\">在webpack中有几种hash，他们的分类依据是？</h3>\n<p dir=\"auto\"><strong>使用方式</strong>：在配置文件名的地方使用对应的 webpack 内置变量，webpack在生成文件的时候会把内置变量替换成计算好的 hash，比如<br>\n<code class=\"notranslate\">  module.exports = { entry: './src/index.js', output: { // 这的[contenthash]就是内置的关于hash的变量，可以指定长度，比如[contenthash:8]就是8位，默认20位 filename: '[name].[contenthash].js', path: path.resolve(__dirname, 'dist'), }, };</code><br>\n产物里对应资源的文件名就带上了<strong>一段哈希值</strong>，比如 mail-web.61e2ba31c173a3d30cf2.js，vuecommon-web.19c44d4d7e0db584cb98.js</p>\n<p dir=\"auto\"><strong>前置概念</strong>：webpack新手可能会对 module、chunk、bundle 的概念不理解，给个简单总结，还不理解可以谷歌一下<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/19570679/161357118-8ee16ae0-8c94-44b8-afaa-87a9ac7750d5.png\"><img width=\"792\" alt=\"image\" src=\"https://user-images.githubusercontent.com/19570679/161357118-8ee16ae0-8c94-44b8-afaa-87a9ac7750d5.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">分类：<br>\n1、hash<br>\nhash 计算是跟整个项目的构建相关，比如下面的例子里生成文件的 hash 和项目的构建 hash 都是一模一样的<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/19570679/161357175-84db9ad0-5c5e-4b49-8915-fdfe92622e78.png\"><img src=\"https://user-images.githubusercontent.com/19570679/161357175-84db9ad0-5c5e-4b49-8915-fdfe92622e78.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">2、chunkhash<br>\n因为 hash 是项目构建的哈希值，项目中如果有些变动，hash 一定会变，比如说我改动了 utils.js 的代码，index.js 里的代码虽然没有改变，但是大家都是用的同一份 hash。hash 一变，缓存一定失效了，所以不符合预期。</p>\n<p dir=\"auto\">chunkhash 就是解决这个问题的，它根据不同的入口文件(Entry)进行依赖文件解析、构建对应的 chunk，生成对应的哈希值。</p>\n<p dir=\"auto\"><strong>效果</strong>：不同 chunk 之间不会相互影响</p>\n<p dir=\"auto\">3、contenthash<br>\ncontenthash是处理属于同一个 chunk 的情况，比如 a.js 和 b.js 都属于同一个 chunk，如果希望 a.js 变化，b.js不变化时，打包之后b.js的缓存未失效，就使用 contenthash。</p>\n<p dir=\"auto\"><strong>效果</strong>：contenthash 将根据资源内容创建出唯一 hash，也就是说文件内容不变，hash 就不变。</p>\n<p dir=\"auto\"><strong>3、对不同类型的hash什么时候使用，你能给出一些最佳实践么？</strong><br>\n上一段分类的描述里已经描述了效果对比，根据你的需要选用即可。<br>\n留个小作业：楼主可以去看看某些好的开源项目主要用的是哪种hash。</p>\n<p dir=\"auto\"><strong>总结</strong><br>\n篇幅有限，时间有限，总结得不好，没有举出很多具体的demo来说明，望见谅。<br>\n我的经验是，webpack可以抽个周末，自己从简单到复杂去自己写 demo，看效果，遇到不懂的就查官方文档或谷歌，循序渐进就好。</p>","author":{"login":"JingweiXiong","avatarUrl":"https://avatars.githubusercontent.com/u/19570679?u=f20bbeee571ad31977f4015d04de8c4155b5b2c5&v=4","url":"https://github.com/JingweiXiong"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85A9Asd","bodyHTML":"<p dir=\"auto\">FYI:</p>\n<h3 dir=\"auto\">createHash.js</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"module.exports = algorithm =&gt; {\n\tif (typeof algorithm === &quot;function&quot;) {\n\t\treturn new BulkUpdateDecorator(() =&gt; new algorithm());\n\t}\n\tswitch (algorithm) {\n\t\t// TODO add non-cryptographic algorithm here\n\t\tcase &quot;debug&quot;:\n\t\treturn new DebugHash();\n\t\tcase &quot;xxhash64&quot;:\n\t\tif (createXXHash64 === undefined) {\n\t\t\tcreateXXHash64 = require(&quot;./hash/xxhash64&quot;);\n\t\t\tif (BatchedHash === undefined) {\n\t\t\t\tBatchedHash = require(&quot;./hash/BatchedHash&quot;);\n\t\t\t}\n\t\t}\n\t\treturn new BatchedHash(createXXHash64());\n\t\tcase &quot;md4&quot;:\n\t\tif (createMd4 === undefined) {\n\t\t\tcreateMd4 = require(&quot;./hash/md4&quot;);\n\t\t\tif (BatchedHash === undefined) {\n\t\t\t\tBatchedHash = require(&quot;./hash/BatchedHash&quot;);\n\t\t\t}\n\t\t}\n\t\treturn new BatchedHash(createMd4());\n\t\tcase &quot;native-md4&quot;:\n\t\tif (crypto === undefined) crypto = require(&quot;crypto&quot;);\n\t\treturn new BulkUpdateDecorator(() =&gt; crypto.createHash(&quot;md4&quot;), &quot;md4&quot;);\n\t\tdefault:\n\t\tif (crypto === undefined) crypto = require(&quot;crypto&quot;);\n\t\treturn new BulkUpdateDecorator(\n\t\t\t() =&gt; crypto.createHash(algorithm),\n\t\t\talgorithm\n\t\t\t);\n\t}\n};\"><pre class=\"notranslate\"><span class=\"pl-smi\">module</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">exports</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">algorithm</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">algorithm</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"function\"</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">BulkUpdateDecorator</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">new</span> <span class=\"pl-s1\">algorithm</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-k\">switch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">algorithm</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-c\">// TODO add non-cryptographic algorithm here</span>\n\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\">\"debug\"</span>:\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">DebugHash</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\">\"xxhash64\"</span>:\n\t\t<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">createXXHash64</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-s1\">createXXHash64</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"./hash/xxhash64\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">BatchedHash</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t\t\t<span class=\"pl-v\">BatchedHash</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"./hash/BatchedHash\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-kos\">}</span>\n\t\t<span class=\"pl-kos\">}</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">BatchedHash</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">createXXHash64</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\">\"md4\"</span>:\n\t\t<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">createMd4</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-s1\">createMd4</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"./hash/md4\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">BatchedHash</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t\t\t<span class=\"pl-v\">BatchedHash</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"./hash/BatchedHash\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-kos\">}</span>\n\t\t<span class=\"pl-kos\">}</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">BatchedHash</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">createMd4</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">case</span> <span class=\"pl-s\">\"native-md4\"</span>:\n\t\t<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">crypto</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">)</span> <span class=\"pl-s1\">crypto</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"crypto\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">BulkUpdateDecorator</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">crypto</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">createHash</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"md4\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"md4\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">default</span>:\n\t\t<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">crypto</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">)</span> <span class=\"pl-s1\">crypto</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"crypto\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">BulkUpdateDecorator</span><span class=\"pl-kos\">(</span>\n\t\t\t<span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">crypto</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">createHash</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">algorithm</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n\t\t\t<span class=\"pl-s1\">algorithm</span>\n\t\t\t<span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<h3 dir=\"auto\">All occurrences of <code class=\"notranslate\">createHash</code> in Webpack source code</h3>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"schemes/HttpUriPlugin.js\n80:  const hash = createHash(&quot;sha512&quot;);\n392:  const hash = createHash(hashFunction);\n\noptimize/ConcatenatedModule.js\n1041:  const hash = createHash(hashFunction);\n\noptimize/RealContentHashPlugin.js\n345:  const hash = createHash(this._hashFunction);\n\ncache/getLazyHashedEtag.js\n34:  const hash = createHash(this._hashFunction);\n\nasset/AssetGenerator.js\n280:  const hash = createHash(runtimeTemplate.outputOptions.hashFunction);\n\ncss/CssModulesPlugin.js\n199:  const hash = createHash(hashFunction);\n\nChunkGraph.js\n1557:  const hash = createHash(this._hashFunction);\n1648:  const hash = createHash(this._hashFunction);\n\nCodeGenerationResults.js\n132:  const hash = createHash(this._hashFunction);\n\nserialization/ObjectMiddleware.js\n86:  const hash = createHash(hashFunction);\n\nserialization/FileMiddleware.js\n52:  const hash = createHash(hashFunction);\n\ndependencies/WorkerPlugin.js\n279:  const hash = createHash(compilation.outputOptions.hashFunction);\n\nModuleFilenameHelpers.js\n64:  const hash = createHash(hashFunction);\n\nFileSystemInfo.js\n2893:  const hash = createHash(this._hashFunction);\n3095:  const hash = createHash(this._hashFunction);\n3168:  const hash = createHash(this._hashFunction);\n3218:  const hash = createHash(this._hashFunction);\n3272:  const hash = createHash(this._hashFunction);\n3350:  const tsHash = createHash(this._hashFunction);\n3351:  const hash = createHash(this._hashFunction);\n3434:  const hash = createHash(this._hashFunction);\n3435:  const tsHash = createHash(this._hashFunction);\n\nids/HashedModuleIdsPlugin.js\n61:  const hash = createHash(options.hashFunction);\n\nids/IdHelpers.js\n25:  const hash = createHash(hashFunction);\n\nNormalModule.js\n918:  const hash = createHash(compilation.outputOptions.hashFunction);\n\nDefinePlugin.js\n289:  const mainHash = createHash(compilation.outputOptions.hashFunction);\n\nCompilation.js\n3949:  const moduleHash = createHash(hashFunction);\n3977:  const hash = createHash(hashFunction);\n4152:  const chunkHash = createHash(hashFunction);\n4201:  const moduleHash = createHash(hashFunction);\n4219:  const chunkHash = createHash(hashFunction);\n\njavascript/JavascriptModulesPlugin.js\n359:  const hash = createHash(hashFunction);\n\nDependencyTemplates.js\n50:  const hash = createHash(this._hashFunction);\"><pre class=\"notranslate\">schemes/HttpUriPlugin.js\n80:  const <span class=\"pl-c1\">hash</span> = createHash(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sha512<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">;</span>\n392:  const <span class=\"pl-c1\">hash</span> = createHash(hashFunction)<span class=\"pl-k\">;</span>\n\noptimize/ConcatenatedModule.js\n1041:  const <span class=\"pl-c1\">hash</span> = createHash(hashFunction)<span class=\"pl-k\">;</span>\n\noptimize/RealContentHashPlugin.js\n345:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n\ncache/getLazyHashedEtag.js\n34:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n\nasset/AssetGenerator.js\n280:  const <span class=\"pl-c1\">hash</span> = createHash(runtimeTemplate.outputOptions.hashFunction)<span class=\"pl-k\">;</span>\n\ncss/CssModulesPlugin.js\n199:  const <span class=\"pl-c1\">hash</span> = createHash(hashFunction)<span class=\"pl-k\">;</span>\n\nChunkGraph.js\n1557:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n1648:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n\nCodeGenerationResults.js\n132:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n\nserialization/ObjectMiddleware.js\n86:  const <span class=\"pl-c1\">hash</span> = createHash(hashFunction)<span class=\"pl-k\">;</span>\n\nserialization/FileMiddleware.js\n52:  const <span class=\"pl-c1\">hash</span> = createHash(hashFunction)<span class=\"pl-k\">;</span>\n\ndependencies/WorkerPlugin.js\n279:  const <span class=\"pl-c1\">hash</span> = createHash(compilation.outputOptions.hashFunction)<span class=\"pl-k\">;</span>\n\nModuleFilenameHelpers.js\n64:  const <span class=\"pl-c1\">hash</span> = createHash(hashFunction)<span class=\"pl-k\">;</span>\n\nFileSystemInfo.js\n2893:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n3095:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n3168:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n3218:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n3272:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n3350:  const tsHash = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n3351:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n3434:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n3435:  const tsHash = createHash(this._hashFunction)<span class=\"pl-k\">;</span>\n\nids/HashedModuleIdsPlugin.js\n61:  const <span class=\"pl-c1\">hash</span> = createHash(options.hashFunction)<span class=\"pl-k\">;</span>\n\nids/IdHelpers.js\n25:  const <span class=\"pl-c1\">hash</span> = createHash(hashFunction)<span class=\"pl-k\">;</span>\n\nNormalModule.js\n918:  const <span class=\"pl-c1\">hash</span> = createHash(compilation.outputOptions.hashFunction)<span class=\"pl-k\">;</span>\n\nDefinePlugin.js\n289:  const mainHash = createHash(compilation.outputOptions.hashFunction)<span class=\"pl-k\">;</span>\n\nCompilation.js\n3949:  const moduleHash = createHash(hashFunction)<span class=\"pl-k\">;</span>\n3977:  const <span class=\"pl-c1\">hash</span> = createHash(hashFunction)<span class=\"pl-k\">;</span>\n4152:  const chunkHash = createHash(hashFunction)<span class=\"pl-k\">;</span>\n4201:  const moduleHash = createHash(hashFunction)<span class=\"pl-k\">;</span>\n4219:  const chunkHash = createHash(hashFunction)<span class=\"pl-k\">;</span>\n\njavascript/JavascriptModulesPlugin.js\n359:  const <span class=\"pl-c1\">hash</span> = createHash(hashFunction)<span class=\"pl-k\">;</span>\n\nDependencyTemplates.js\n50:  const <span class=\"pl-c1\">hash</span> = createHash(this._hashFunction)<span class=\"pl-k\">;</span></pre></div>","author":{"login":"aztack","avatarUrl":"https://avatars.githubusercontent.com/u/782871?u=1a177ad553795ad10cb44429acb719c822d97a31&v=4","url":"https://github.com/aztack"},"replies":null}}]}}},"pageContext":{"number":43,"previous":{"title":"Vue应用卡顿该如何排查？","number":39},"next":{"title":"虚拟DOM的意义是什么？","number":46}}},
    "staticQueryHashes": ["151096407","2861350382"]}