{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/15",
    "result": {"data":{"issuesJson":{"id":"804018dd-f8e1-5a11-b011-45ffa2f08070","title":"实现MyNew方法","number":15,"bodyHTML":"\n<h3 dir=\"auto\">要实现的功能</h3>\n<p dir=\"auto\">我们可以使用<code class=\"notranslate\">new</code>实例化一个构造函数，请根据<strong>实例化过程中构造函数内部工作流程</strong>，实现类似功能的<code class=\"notranslate\">MyNew</code>方法。</p>\n\n<h3 dir=\"auto\">代码示例</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function MyNew(fn, ...args) {\n  // 实现...\n}\n\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\nconst kasong = MyNew(Person, 'KaSong', 18);\nconsole.log(kasong.age); // 18\n\nfunction Something(name) {\n  this.name = name;\n  return {name: 'something'};\n}\nconst something = MyNew(Something, 'XiaoMing');\nconsole.log(something.name); // something\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 实现...</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">kasong</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Person</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'KaSong'</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">18</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">kasong</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// 18</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Something</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span><span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'something'</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">something</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Something</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'XiaoMing'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">something</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// something</span></pre></div>\n\n<h3 dir=\"auto\">问题补充</h3>\n \n<ol dir=\"auto\">\n<li>请阐述<strong>实例化过程中构造函数内部工作流程</strong></li>\n<li>请写出代码，并为代码的关键步骤增写注释</li>\n<li>附带测试用例是加分项</li>\n<li>不需要考虑异常发生</li>\n<li>不过度设计，代码简洁优雅是加分项</li>\n</ol>\n<h2 dir=\"auto\">最佳答案</h2>\n<p dir=\"auto\"><a href=\"https://github.com/BetaSu/fe-hunter/issues/15#issuecomment-1078625200\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/15/hovercard\">Chorer的回答</a></p>\n<p dir=\"auto\">理由：实现完备，且包含问题补充中的所有要素</p>\n<h3 dir=\"auto\">答题同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">答题规范：请在<code class=\"notranslate\">一次评论</code>中完成作答，后续修改也请编辑该评论，而不是追加新的评论</p>\n</li>\n<li>\n<p dir=\"auto\">评选标准：最佳答案由<code class=\"notranslate\">围观同学</code>的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji> 和<a href=\"https://github.com/BetaSu\">卡颂</a>共同决定</p>\n</li>\n<li>\n<p dir=\"auto\">评选时间：一般是当日18：00左右评选，如果问题发布当天回答数较少，问题悬赏金额可能增加，同时悬赏时间也会增加</p>\n</li>\n</ul>\n<h3 dir=\"auto\">围观同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">对于你满意的答案，请不要吝惜你的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>，这是评选<strong>最佳答案</strong>的依据</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">非答题的评论</code>会被删除，问题相关讨论请在<a href=\"https://github.com/BetaSu/fe-hunter\">赏金猎人群</a>中进行</p>\n</li>\n</ul>","updatedAt":"2022-03-25T16:40:46Z","upvoteCount":null,"author":{"login":"BetaSu","avatarUrl":"https://avatars.githubusercontent.com/u/15828041?u=3b08cdf9f9b49dbead9ffb020a94d925904d2b74&v=4","url":"https://github.com/BetaSu"},"category":null,"labels":{"edges":[{"node":{"name":"JS","color":"ffee58"}},{"node":{"name":"动手","color":"42a5f5"}}]},"comments":{"edges":[{"node":{"id":"IC_kwDOHCfdf85ASbSu","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function PolyfillNew(fn, ...args) {\n  // 如果不是函数报错\n  if (typeof fn !== 'function') {\n    throw TypeError(`Expected a function, but got a ${typeof fn}`)\n  }\n  // 创建新对象,并修改新对象的原型\n  const o = Object.create(fn.prototype)\n  // 以新对象作为 this 调用函数\n  const r = fn.apply(o, args)\n  const t = typeof r\n  // 如果函数返回值为对象或函数则返回,否则返回新对象\n  return (r !== null &amp;&amp; t === 'object') || t === 'function' ? r : o\n}\n\nfunction Person(name, age) {\n  this.name = name\n  this.age = age\n}\nconst kasong = PolyfillNew(Person, 'KaSong', 18)\nconsole.log(kasong.age) // 18\n\nfunction Something(name) {\n  this.name = name\n  return { name: 'something' }\n}\nconst something = PolyfillNew(Something, 'XiaoMing')\nconsole.log(something.name) // something\n\nfunction Others(name) {\n  this.name = name\n  return function test() {\n    console.log(this)\n  }\n}\n\nconst others = PolyfillNew(Others, 'others')\nconsole.log(others)\n// ƒ test() {\n//  console.log(this)\n// }\n\nconst others2 = new Others('others2')\nconsole.log(others2)\n// ƒ test() {\n//  console.log(this)\n// }\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">PolyfillNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 如果不是函数报错</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">throw</span> <span class=\"pl-v\">TypeError</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Expected a function, but got a <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-c\">// 创建新对象,并修改新对象的原型</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">o</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">// 以新对象作为 this 调用函数</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">r</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">o</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">t</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">r</span>\n  <span class=\"pl-c\">// 如果函数返回值为对象或函数则返回,否则返回新对象</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">r</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">t</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">t</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span> ? <span class=\"pl-s1\">r</span> : <span class=\"pl-s1\">o</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">kasong</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">PolyfillNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Person</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'KaSong'</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">18</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">kasong</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 18</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Something</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'something'</span> <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">something</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">PolyfillNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Something</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'XiaoMing'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">something</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// something</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Others</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">others</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">PolyfillNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Others</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'others'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">others</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// ƒ test() {</span>\n<span class=\"pl-c\">//  console.log(this)</span>\n<span class=\"pl-c\">// }</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">others2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Others</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'others2'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">others2</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// ƒ test() {</span>\n<span class=\"pl-c\">//  console.log(this)</span>\n<span class=\"pl-c\">// }</span></pre></div>","author":{"login":"vfiee","avatarUrl":"https://avatars.githubusercontent.com/u/42051272?u=c466fca38de5663acb520c4a0af0d2d8515ec79b&v=4","url":"https://github.com/vfiee"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASdAY","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\" const MyNew = (constructor, ...args) =&gt; {\n    const obj = Object.create(constructor.prototype)\n\n    constructor.apply(obj, args)\n\n    return obj\n}\n\"><pre class=\"notranslate\"> <span class=\"pl-k\">const</span> <span class=\"pl-v\">MyNew</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">constructor</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">constructor</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-s1\">constructor</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">obj</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"vanstline","avatarUrl":"https://avatars.githubusercontent.com/u/26602636?u=1d7276096f8dd6b8352e1b3f1734a313ae0c7147&v=4","url":"https://github.com/vanstline"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASdwC","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function myNew(constructor) {\n  var _args = Array.prototype.slice.call(arguments, 1)\n  var _this = {}\n\n  _this.__proto__ = constructor.prototype\n\n  var res = constructor.apply(_this, _args)\n\n  return res !== null &amp;&amp; typeof res === 'object' ? res : _this\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">constructor</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">_args</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">slice</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">_this</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-s1\">_this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">__proto__</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">constructor</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span>\n\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">constructor</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">_this</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">_args</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> ? <span class=\"pl-s1\">res</span> : <span class=\"pl-s1\">_this</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"Stan9726","avatarUrl":"https://avatars.githubusercontent.com/u/56797239?u=0c3a8acf568a72651a0733f358294a8514a1a0c4&v=4","url":"https://github.com/Stan9726"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASdxd","bodyHTML":"<p dir=\"auto\">正好我最近在学习这块，就来尝试下~</p>\n<p dir=\"auto\"><code class=\"notranslate\">new</code>操作符究竟干了啥？</p>\n<ol dir=\"auto\">\n<li>新建一个对象</li>\n<li>把新对象的<code class=\"notranslate\">[[Prototype]]</code>属性指向构造函数的<code class=\"notranslate\">prototype</code>属性</li>\n<li>用新对象的上下文执行构造函数</li>\n<li>返回新对象</li>\n</ol>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function myNew(constructorFunction, ...args) {\n  const res = {}\n  Object.setPrototypeOf(res, constructorFunction.prototype)\n  constructorFunction.apply(res, args)\n  return res\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">constructorFunction</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n  <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">setPrototypeOf</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">constructorFunction</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-s1\">constructorFunction</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">有人实现<code class=\"notranslate\">myNew</code>还会看构造函数的返回值，如果是对象还有特殊操作，但我个人不知道这样做的意义，为什么要在构造函数中返回一个对象呢？构造函数就不应该有返回值的呀。所以我没有实现这块，也使得代码更简单了一些。</p>\n<p dir=\"auto\">还有也不太懂题目中 <code class=\"notranslate\">myNew</code> 为啥首字母大写，这也不是一个类呀 <g-emoji class=\"g-emoji\" alias=\"joy\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f602.png\">😂</g-emoji></p>","author":{"login":"acmu","avatarUrl":"https://avatars.githubusercontent.com/u/35673748?u=66b8da57cfefd536591a2394958c4b18aa9258f9&v=4","url":"https://github.com/acmu"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASd1H","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function MyNew (cto, ...rest) {\n    let isFun = (cto) =&gt; typeof cto === 'function'\n    let isObj = (param) =&gt; typeof param === 'object' &amp;&amp; param !== null\n    if (!isFun(cto)) return 'the first param must be a function'\n    MyNew.target = cto \n    let obj = Object.create(cto.prototype)\n    let res = cto.apply(obj, rest)\n\n    if (isFun(res) || isObj(res)) return res\n    return obj\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">MyNew</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">cto</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">rest</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-en\">isFun</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">cto</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">cto</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-en\">isObj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">param</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">param</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">param</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-c1\">null</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-en\">isFun</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cto</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span> <span class=\"pl-s\">'the first param must be a function'</span>\n    <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">target</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">cto</span> \n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cto</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">cto</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">rest</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">isFun</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">||</span> <span class=\"pl-en\">isObj</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">obj</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"ninenan","avatarUrl":"https://avatars.githubusercontent.com/u/43817696?u=15c19258df72b15e965228815ccd36c5c955701a&v=4","url":"https://github.com/ninenan"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASd3M","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function myNew(fn, ...args) {\n  let obj = Object.create(fn.prototype);\n\n  let result = fn.apply(obj, args);\n\n  return result instanceof Object ? result : obj;\n}\n`\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Object</span> ? <span class=\"pl-s1\">result</span> : <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n`</pre></div>","author":{"login":"lingdeqingyuan","avatarUrl":"https://avatars.githubusercontent.com/u/47544789?u=2e6c20bde65549629bd619c588ff14950ae9eee2&v=4","url":"https://github.com/lingdeqingyuan"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASeBn","bodyHTML":"<p dir=\"auto\">在调用 new 的过程中会发生以下四件事情：</p>\n<ol dir=\"auto\">\n<li>新生成了一个对象</li>\n<li>链接到原型</li>\n<li>改变this执行</li>\n<li>返回新对象</li>\n</ol>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function MyNew(ctor) {\n    if(typeof ctor !== 'function') {\n      throw 'ctor must be a function';\n    }\n    let obj =  Object.create(ctor.prototype); //1-2\n    let res = ctor.apply(obj, arguments);//3\n    return res instanceof Object ? res : obj;//4\n};\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ctor</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">ctor</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">throw</span> <span class=\"pl-s\">'ctor must be a function'</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span>  <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ctor</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">//1-2</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">ctor</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span><span class=\"pl-c\">//3</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Object</span> ? <span class=\"pl-s1\">res</span> : <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">;</span><span class=\"pl-c\">//4</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>","author":{"login":"Picsong","avatarUrl":"https://avatars.githubusercontent.com/u/49096360?u=bcb640e20fb6fedca1181fc4803b9f829f30284e&v=4","url":"https://github.com/Picsong"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASeW_","bodyHTML":"<p dir=\"auto\">首先，我们先来看看 <code class=\"notranslate\">new</code> 操作起了什么作用</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 构造函数 People (无显式返回值)\nfunction People(name, age) {\n  this.name = name\n  this.age = age\n}\n\nPeople.prototype.printInfo = function () {\n  return `My name is ${this.name} and ${this.age}`\n}\n\n// 构造函数 Student (有显式返回值，且返回值为对象类型)\nfunction Student(name) {\n  this.name = name\n  return { ps: 'balabala' }\n}\n\nconst p1 = new People('Jack', 17)\nconst s1 = new Student('David')\nconsole.log(p1.name)        // Jack\nconsole.log(p1.age)         // 17\nconsole.log(p1.printInfo()) // My name is Jack and 17\nconsole.log(s1)             // {ps: &quot;balabala&quot;}\"><pre class=\"notranslate\"><span class=\"pl-c\">// 构造函数 People (无显式返回值)</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">People</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">People</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">printInfo</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s\">`My name is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">}</span></span> and <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">}</span></span>`</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 构造函数 Student (有显式返回值，且返回值为对象类型)</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Student</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">ps</span>: <span class=\"pl-s\">'balabala'</span> <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">p1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">People</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Jack'</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">17</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">s1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Student</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'David'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">p1</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span>        <span class=\"pl-c\">// Jack</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">p1</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">)</span>         <span class=\"pl-c\">// 17</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">p1</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">printInfo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// My name is Jack and 17</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">s1</span><span class=\"pl-kos\">)</span>             <span class=\"pl-c\">// {ps: \"balabala\"}</span></pre></div>\n<p dir=\"auto\">可以看出 <code class=\"notranslate\">new</code> 关键字大体上有一下几个作用</p>\n<ul dir=\"auto\">\n<li>构造函数无显式返回值时（例如 <code class=\"notranslate\">Person</code>），通过 <code class=\"notranslate\">new</code> 操作得到的 <code class=\"notranslate\">p1</code> 可以访问到构造函数 <code class=\"notranslate\">Person</code> 里的属性和 <code class=\"notranslate\">Person.prototype</code> 里的属性</li>\n<li>构造函数有显式返回值并且返回值为对象类型时（例如 <code class=\"notranslate\">Student</code>），通过 <code class=\"notranslate\">new</code> 操作得到的 <code class=\"notranslate\">s1</code> 是构造函数的显示返回值 <code class=\"notranslate\">{ps: \"balabala\"}</code></li>\n</ul>\n<p dir=\"auto\">基于以上的内容，我们来实现一个 <code class=\"notranslate\">new</code> 操作</p>\n<ol dir=\"auto\">\n<li>首先创建一个空对象，这个对象将会作为执行 <code class=\"notranslate\">new 构造函数()</code> 之后，返回的对象实例</li>\n<li>将上面创建的空对象的原型（<code class=\"notranslate\">__proto__</code>），指向构造函数的 prototype 属性</li>\n<li>将这个空对象赋值给构造函数内部的 <code class=\"notranslate\">this</code>，并执行构造函数逻辑</li>\n<li>根据构造函数执行逻辑，返回第一步创建的对象或者构造函数的显式返回值</li>\n</ol>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const MyNew = (Con, ...args) =&gt; {\n  const obj = Object.create(Con.prototype)\n  const result = Con.apply(obj, args)\n  return typeof result === 'object' ? result : obj\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-v\">MyNew</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Con</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Con</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Con</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> ? <span class=\"pl-s1\">result</span> : <span class=\"pl-s1\">obj</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"emotionl","avatarUrl":"https://avatars.githubusercontent.com/u/17172758?u=14fb759df59131a3dba17af4f0b73bbffff0c0c0&v=4","url":"https://github.com/emotionl"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASe90","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"/**\n * @param {function} fn target function\n * @param {any} fnArgs function rest arguments\n * @returns {Object}\n */\nfunction MyNew(fn, ...fnArgs) {\n  const PROTOTYPE_OBJECT = Object.create(null);\n  if (typeof fn !== 'function') {\n    return PROTOTYPE_OBJECT;\n  }\n  try {\n    const RESULT = fn.apply(PROTOTYPE_OBJECT, fnArgs);\n    return RESULT instanceof Object ? RESULT : PROTOTYPE_OBJECT;\n  } catch (error) {\n    return PROTOTYPE_OBJECT;\n  }\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">/**</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> {<span class=\"pl-smi\">function</span>} fn target function</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> {<span class=\"pl-smi\">any</span>} fnArgs function rest arguments</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@returns</span> {<span class=\"pl-smi\">Object</span>}</span>\n<span class=\"pl-c\"> */</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">fnArgs</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">PROTOTYPE_OBJECT</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">PROTOTYPE_OBJECT</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">RESULT</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">PROTOTYPE_OBJECT</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">fnArgs</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">RESULT</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Object</span> ? <span class=\"pl-c1\">RESULT</span> : <span class=\"pl-c1\">PROTOTYPE_OBJECT</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">PROTOTYPE_OBJECT</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"tangdingga1","avatarUrl":"https://avatars.githubusercontent.com/u/37588992?u=d2101c2a97ef7a42be34822f2b2c90bc86c744fe&v=4","url":"https://github.com/tangdingga1"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASfkF","bodyHTML":"<p dir=\"auto\">实例化过程中构造函数内部工作流程：</p>\n<ol dir=\"auto\">\n<li>创建新对象，使用构造函数的原型作为新对象的原型对象</li>\n<li>将新的对象作为函数的上下文对象（this）</li>\n<li>执行函数中的代码</li>\n<li>将新建的对象返回</li>\n</ol>\n<p dir=\"auto\">实现：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function MyNew(fn, ...args) {\n  const result = Object.create(fn.prototype) // 创建新对象，使用构造函数的原型作为新对象的原型对象\n  const obj = fn.apply(result, args)\n  // 引用类型直接返回\n  return (typeof obj === 'object' &amp;&amp; obj !== null || typeof obj === 'function') ? obj : result\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 创建新对象，使用构造函数的原型作为新对象的原型对象</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">// 引用类型直接返回</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-c1\">||</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-s1\">obj</span> : <span class=\"pl-s1\">result</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">单测：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"describe('MyNew', () =&gt; {\n  it('should be defined', () =&gt; {\n    expect(MyNew).toBeDefined()\n  })\n  it('should work on common constructor', () =&gt; {\n    function Person(name, age) {\n      this.name = name\n      this.age = age\n    }\n    const result = MyNew(Person, 'KaSong', 18)\n    expect(result.age).toBe(18)\n  })\n  it('should work on constructor return object', () =&gt; {\n    function Something(name) {\n      this.name = name\n      return { name: 'something' }\n    }\n    const result = MyNew(Something, 'XiaoMing')\n    expect(result.name).toBe('something')\n  })\n})\"><pre class=\"notranslate\"><span class=\"pl-en\">describe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'MyNew'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be defined'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBeDefined</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should work on common constructor'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">function</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Person</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'KaSong'</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">18</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">18</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should work on constructor return object'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">function</span> <span class=\"pl-v\">Something</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'something'</span> <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Something</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'XiaoMing'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'something'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>","author":{"login":"andyyxw","avatarUrl":"https://avatars.githubusercontent.com/u/41931722?u=d11913a45891fb02f1e35743231536adc079a405&v=4","url":"https://github.com/andyyxw"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASf21","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function myNew(fn, ...args) {\n  if (typeof fn !== 'function') throw new Error('fn nust be a function');\n  const obj = Object.create(fn.prototype);\n  const result = fn.apply(obj, args);\n  return (typeof result === 'object' &amp;&amp; result !== null) || typeof result === 'function' ? result : obj;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'fn nust be a function'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">||</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span> ? <span class=\"pl-s1\">result</span> : <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"fxwing","avatarUrl":"https://avatars.githubusercontent.com/u/32068860?u=77df1f2776ae063e0d954db1e4600bf83afcb5ea&v=4","url":"https://github.com/fxwing"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AShWp","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function myNew(fn, ...args) {\n    const obj = Object.create(fn.prototype)\n    let result = fn.apply(obj, args)\n    return result instanceof Object ? result : obj\n}\n\n测试：\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\nPerson.prototype.say = function () {\n    console.log(this.name)\n}\n\nlet p = mynew(Person, &quot;su&quot;, 123)\nconsole.log(p) // Person {name: &quot;su&quot;, age: 123}\np.say()  // &quot;su&quot;\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Object</span> ? <span class=\"pl-s1\">result</span> : <span class=\"pl-s1\">obj</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-s1\">测试：</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Person</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">p</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">mynew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Person</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"su\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">123</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">p</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// Person {name: \"su\", age: 123}</span>\n<span class=\"pl-s1\">p</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>  <span class=\"pl-c\">// \"su\"</span></pre></div>","author":{"login":"ZHENGGEGE","avatarUrl":"https://avatars.githubusercontent.com/u/20240270?u=3d3be0023b60bea1fd34c800d21b7cff0629b614&v=4","url":"https://github.com/ZHENGGEGE"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASijD","bodyHTML":"<p dir=\"auto\">来个函数式的</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const mynew = (fn, ...arg) =&gt; \n  (((ctx) =&gt; \n    (result =&gt; typeof result === 'object' ? result : ctx)\n    (fn.apply(ctx, arg)))\n  ({ __proto__: fn.prototype }))\n\n\nfunction mynew(fn, ...arg){\n  const ctx = { __proto__: fn.prototype }\n  const result = fn.apply(ctx, arg)\n  return typeof result === 'object' ? result : ctx\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">mynew</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">arg</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> \n  <span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> \n    <span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> ? <span class=\"pl-s1\">result</span> : <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">arg</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">__proto__</span>: <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">mynew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">arg</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">ctx</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">__proto__</span>: <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">arg</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> ? <span class=\"pl-s1\">result</span> : <span class=\"pl-s1\">ctx</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"NoBey","avatarUrl":"https://avatars.githubusercontent.com/u/10740524?u=6c74b36db878e34c1cf8d1b6e638285b11c1f3b6&v=4","url":"https://github.com/NoBey"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASkZM","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function myNew(fn, ...args) {\n  // 创建临时对象，同时绑定原型\n  const obj = Object.create(fn.prototype)\n  // 执行构造函数\n  const result = fn.apply(obj, args);\n  // 返回构造结果或临时对象\n  return typeof result === 'object' ? result : obj;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 创建临时对象，同时绑定原型</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">// 执行构造函数</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">// 返回构造结果或临时对象</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> ? <span class=\"pl-s1\">result</span> : <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"wuwenbang","avatarUrl":"https://avatars.githubusercontent.com/u/64624463?u=40fbf3d5a9bfed590006b6025ed2a32a34fc16a1&v=4","url":"https://github.com/wuwenbang"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASl_J","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"/** MDN\n * new 运算符\n *   new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。\n *\n * new 关键字会进行如下的操作：\n *   1. 创建一个空的简单JavaScript对象（即{}）；\n *   2. 为步骤1新创建的对象添加属性__proto__，将该属性链接至构造函数的原型对象 ；\n *   3. 将步骤1新创建的对象作为this的上下文 ；\n *   4. 如果该函数没有返回对象，则返回this。\n */\n\nfunction MyNew(fn, ...args) {\n  //1\n  const obj = Object.create(null);\n  //2\n  Object.setPrototypeOf(obj, fn.prototype)\n  //3\n  const ret = fn.apply(obj, args);\n  //4\n  return ret instanceof Object ? ret : obj;\n}\n\"><pre class=\"notranslate\"><span class=\"pl-c\">/** MDN</span>\n<span class=\"pl-c\"> * new 运算符</span>\n<span class=\"pl-c\"> *   new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。</span>\n<span class=\"pl-c\"> *</span>\n<span class=\"pl-c\"> * new 关键字会进行如下的操作：</span>\n<span class=\"pl-c\"> *   1. 创建一个空的简单JavaScript对象（即{}）；</span>\n<span class=\"pl-c\"> *   2. 为步骤1新创建的对象添加属性__proto__，将该属性链接至构造函数的原型对象 ；</span>\n<span class=\"pl-c\"> *   3. 将步骤1新创建的对象作为this的上下文 ；</span>\n<span class=\"pl-c\"> *   4. 如果该函数没有返回对象，则返回this。</span>\n<span class=\"pl-c\"> */</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">//1</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">//2</span>\n  <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">setPrototypeOf</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">//3</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">ret</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">//4</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ret</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Object</span> ? <span class=\"pl-s1\">ret</span> : <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"hanpei","avatarUrl":"https://avatars.githubusercontent.com/u/4035340?u=d1d344898d886fb367b324842eeba71eb4781aca&v=4","url":"https://github.com/hanpei"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASnkq","bodyHTML":"<h1 dir=\"auto\">new 关键字</h1>\n<p dir=\"auto\">js 中定义一个类</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 定义构造函数\nfunction Person(name) {\n  console.log('constructor')\n  // 将构造函数的this指向新对象\n  this.name = name\n}\n\n// 定义类的属性\nPerson.prototype.say = function () {\n  console.log('My name is', this.name)\n}\n\n// 创建新对象\nconst p1 = new Person('tom')\np1.say()\"><pre class=\"notranslate\"><span class=\"pl-c\">// 定义构造函数</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'constructor'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">// 将构造函数的this指向新对象</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 定义类的属性</span>\n<span class=\"pl-v\">Person</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'My name is'</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 创建新对象</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">p1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'tom'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">p1</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">在调用 new 时, 主要做了 4 件事:</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">创建一个新的空对象</p>\n</li>\n<li>\n<p dir=\"auto\">将空对象的 <code class=\"notranslate\">__proto__</code> 指向构造函数的 <code class=\"notranslate\">prototype</code></p>\n</li>\n<li>\n<p dir=\"auto\">执行构造函数, 并将新创建的空对象绑定为构造函数的 this 对象</p>\n</li>\n<li>\n<p dir=\"auto\">如果构造函数有返回一个对象,则返回这个对象,否则返回新创建的那个对象</p>\n</li>\n</ol>\n<p dir=\"auto\">根据以上规则,我们可以模拟实现一个 new 函数</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function myNew(constructorFn, ...args) {\n  // 1. 创建一个空对象\n  const obj = {}\n  // 2. 将空对象的__proto__指向constructor的prototype\n  obj.__proto__ = constructorFn.prototype\n  // 3. 执行 constructor, 并将新对象绑定为constructor的this对象\n  const res = constructorFn.apply(obj, args)\n  // 4. 如果构造函数有返回值则返回res,否则返回新对象\n  return typeof res === 'object' ? res : obj\n}\n\nconst p1 = myNew(Person, 'jack')\np1.say()\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">constructorFn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 1. 创建一个空对象</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n  <span class=\"pl-c\">// 2. 将空对象的__proto__指向constructor的prototype</span>\n  <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">__proto__</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">constructorFn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span>\n  <span class=\"pl-c\">// 3. 执行 constructor, 并将新对象绑定为constructor的this对象</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">constructorFn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">// 4. 如果构造函数有返回值则返回res,否则返回新对象</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> ? <span class=\"pl-s1\">res</span> : <span class=\"pl-s1\">obj</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">p1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Person</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'jack'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">p1</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>","author":{"login":"RJM1996","avatarUrl":"https://avatars.githubusercontent.com/u/33800707?u=10830efddf4f630f3ea3d4b89d34130f05cfb835&v=4","url":"https://github.com/RJM1996"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASoOw","bodyHTML":"<h3 dir=\"auto\">内部工作流程：</h3>\n<ol dir=\"auto\">\n<li>检测 new 的目标是不是非函数，如果是非函数，抛出错误</li>\n<li>修改 new 的 target 属性，使之指向构造函数</li>\n<li>新建一个空的实例对象。注意不能使用 <code class=\"notranslate\">Object.create</code> 创建，否则当构造函数原型为 <code class=\"notranslate\">null</code> 的时候，实例对象隐式原型也为 <code class=\"notranslate\">null</code>，但根据 new 的<a href=\"https://262.ecma-international.org/5.1/#sec-11.2.2\" rel=\"nofollow\">规范</a>，这里不是这样的。具体见 4。</li>\n<li>检测构造函数原型是否为 <code class=\"notranslate\">null</code>，如果不是，则将其作为实例对象的隐式原型，否则将 Object 的原型作为实例对象的隐式原型</li>\n<li>执行构造函数，将其 this 指向实例对象，同时传入参数</li>\n<li>获得构造函数返回值，判断是不是对象，如果是对象，则作为 new 的返回值，否则将实例对象作为 new 的返回值</li>\n</ol>\n<h3 dir=\"auto\">代码实现：</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function myNew(Fn,...args){\n   // 检测异常\n    if(typeof Fn != 'function'){\n        throw new TypeError(Fn + 'is not a constructor')\n    }\n  // 修改 target 属性\n    myNew.target = Fn\n  // 创建空的实例对象\n    const instance = {}\n    // 检测构造函数原型是不是对象\n    instance.__proto__ = Fn.prototype instanceof Object ? Fn.prototype : Object.prototype \n   // 执行构造函数\n    const returnValue = Fn.call(instance,...args)\n  // 决定 new 的返回值\n    return returnValue instanceof Object ? returnValue : instance\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Fn</span><span class=\"pl-kos\">,</span>...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n   <span class=\"pl-c\">// 检测异常</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-v\">Fn</span> <span class=\"pl-c1\">!=</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">TypeError</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Fn</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">'is not a constructor'</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-c\">// 修改 target 属性</span>\n    <span class=\"pl-s1\">myNew</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">target</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Fn</span>\n  <span class=\"pl-c\">// 创建空的实例对象</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">instance</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n    <span class=\"pl-c\">// 检测构造函数原型是不是对象</span>\n    <span class=\"pl-s1\">instance</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">__proto__</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Object</span> ? <span class=\"pl-v\">Fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> : <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> \n   <span class=\"pl-c\">// 执行构造函数</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">returnValue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">instance</span><span class=\"pl-kos\">,</span>...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-c\">// 决定 new 的返回值</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">returnValue</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Object</span> ? <span class=\"pl-s1\">returnValue</span> : <span class=\"pl-s1\">instance</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h3 dir=\"auto\">测试：</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 构造函数原型不为空的情况\nfunction Student(name,age){\n    this.name = name\n    this.age = age\n}\nconst student1 = myNew(Student,'Jack',20)\nconst student2 = new Student('Jack',20)\nconsole.log(student1)                     // {name:'Jack',age:20}\nconsole.log(student2)                     // {name:'Jack',age:20}\n\n// 构造函数原型为空的情况\nfunction Fn(){}\nFn.prototype = null\nconst fn1 = myNew(Fn)\nconst fn2 = new Fn()\nObject.getPrototypeOf(fn1) === Object.prototype           // true\nObject.getPrototypeOf(fn2) === Object.prototype           // true\"><pre class=\"notranslate\"><span class=\"pl-c\">// 构造函数原型不为空的情况</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Student</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">student1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Student</span><span class=\"pl-kos\">,</span><span class=\"pl-s\">'Jack'</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">20</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">student2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Student</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Jack'</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">20</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">student1</span><span class=\"pl-kos\">)</span>                     <span class=\"pl-c\">// {name:'Jack',age:20}</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">student2</span><span class=\"pl-kos\">)</span>                     <span class=\"pl-c\">// {name:'Jack',age:20}</span>\n\n<span class=\"pl-c\">// 构造函数原型为空的情况</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">null</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">fn1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">myNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Fn</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">fn2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getPrototypeOf</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn1</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span>           <span class=\"pl-c\">// true</span>\n<span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getPrototypeOf</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn2</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span>           <span class=\"pl-c\">// true</span></pre></div>","author":{"login":"Chorer","avatarUrl":"https://avatars.githubusercontent.com/u/43442630?u=a9fa211751f51a129ea1fdd6ebaaa8ab41edb62a&v=4","url":"https://github.com/Chorer"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASoxE","bodyHTML":"<p dir=\"auto\">function myNew(argument) {<br>\nlet content = {} //生成一个对象<br>\nlet args = Array.prototype.slice.call(argument,0) //参数<br>\nlet constructor =  args.shift()//获得构造函数<br>\ncontent.<strong>proto</strong> = constructor.prototype //空对象原型指向这个构造函数 content.<strong>proto</strong><br>\nconstructor.apply(content,args)//构造函数指向这个对象，值为args<br>\nreturn content //返回新对象<br>\n}</p>","author":{"login":"w615","avatarUrl":"https://avatars.githubusercontent.com/u/61973759?u=c5e6d384e2c49f6790aa493ab3ee931770c60952&v=4","url":"https://github.com/w615"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AStrb","bodyHTML":"<p dir=\"auto\">实现new 创建实例的步骤：<br>\n1、创建一个新对象<br>\n2、将这个新对象的原型关联到该构造函数的prototype上<br>\n3、判断该构造函数的返回值是不是引用类型，如果是则直接返回该值，反之，返回空对象</p>\n<p dir=\"auto\">function MyNew(targetFn, ...arg) {<br>\nconst obj = {};<br>\nobj.<strong>proto</strong> = targetFn.protoType;<br>\nconst res = targetFn.apply(obj, [...arg]);<br>\nreturn typeof res === 'object' ? res : obj;<br>\n}<br>\n//测试用例<br>\nfunction Foo(name) {<br>\nthis.name = name;<br>\n};<br>\nFoo.prototype.changeName = (name) =&gt; { this.name = name };<br>\nconst instance = MyNew(Foo, '张三');<br>\nconsole.log(instance)</p>","author":{"login":"xietingyang","avatarUrl":"https://avatars.githubusercontent.com/u/83275292?v=4","url":"https://github.com/xietingyang"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASwBE","bodyHTML":"<h3 dir=\"auto\">思路(根据 new 的执行原理来mock)</h3>\n<ol dir=\"auto\">\n<li>调用方式 new Person('name', 'age'); MyNew 则接收多个参数，第一个为构造函数，剩余为构造函数所需的参数。</li>\n<li>创建一个对象，并将对象的原型链指向构造函数的原型（标注1）使该对象具有构造函数原型上的方法。</li>\n<li>构造函数执行需执行this为新建的对象（标注2）。</li>\n<li>返回值默认是该构造函数实例化的对象，但如果该构造函数强制返回了非引用类型则需要返回前面新建的对象 （标注3）。</li>\n</ol>\n<h3 dir=\"auto\">代码实现 （测试用例均通过）</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function MyNew(fn, ...args) {\n // 标注1\n  let obj = Object.create(fn.prototype);\n // 标注2\n  let res = fn.apply(obj, args);\n  // 标注3\n  if ((typeof res === &quot;object&quot; &amp;&amp; res !== null) || typeof res === &quot;function&quot;) {\n    return res;\n  }\n  return obj;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n <span class=\"pl-c\">// 标注1</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n <span class=\"pl-c\">// 标注2</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">// 标注3</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"object\"</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">||</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"function\"</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"fanerge","avatarUrl":"https://avatars.githubusercontent.com/u/17136707?u=d7250b0655c87b8e8e1cdaf826754fe5e6f68e80&v=4","url":"https://github.com/fanerge"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ASwUb","bodyHTML":"<p dir=\"auto\">原理：</p>\n<ul dir=\"auto\">\n<li>new 首先会在内存中创建一个空对象，并将这个空对象的<code class=\"notranslate\">__proto__</code>指向构造函数的<code class=\"notranslate\">prototype</code>，从而继承构造函数原型上的方法（）</li>\n<li>将this<strong>指向刚刚创建的新对象</strong>，并执行构造函数中的代码，以获取私有属性和方法</li>\n<li>如果构造函数返回了一个对象res，就将该返回值对象res返回,如果返回的不是对象，则将创建的新对象返回</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function MyNew(Fn, ...args) {  //将不定数量的参数表示为一个数组\n  //1.创建空对象obj，并将obj._proto_指向构造函数Fn.prototype\n  const obj = Object.create(Fn.prototype);\n  //2.将构造函数Fn的this指向obj,并执行Fn代码，获得返回值\n  const res = Fn.apply(obj, args); //args是数组['dy','男']\n  //3.根据返回值类型，决定到底返回谁\n  return res instanceof Object ? res : obj;\n}\n\n//构造函数\nfunction Person(name, sex) {\n  this.name = name;\n  this.sex = sex;\n}\nPerson.prototype.getName = function () {\n  return this.name;\n};\nPerson.getSex = 'bukeyisese'\n\nconst ymy = new Person(&quot;ymy&quot;, &quot;女&quot;);\nconst dy = MyNew(Person, &quot;dy&quot;, &quot;男&quot;);\nconsole.log(ymy);\nconsole.log(dy);\nconsole.log(dy.getName());\n//共享原型上的方法\nconsole.log(ymy.getName === dy.getName); //true\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>  <span class=\"pl-c\">//将不定数量的参数表示为一个数组</span>\n  <span class=\"pl-c\">//1.创建空对象obj，并将obj._proto_指向构造函数Fn.prototype</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">//2.将构造函数Fn的this指向obj,并执行Fn代码，获得返回值</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">//args是数组['dy','男']</span>\n  <span class=\"pl-c\">//3.根据返回值类型，决定到底返回谁</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Object</span> ? <span class=\"pl-s1\">res</span> : <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">//构造函数</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">sex</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">sex</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">sex</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Person</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-v\">Person</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">getSex</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'bukeyisese'</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">ymy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"ymy\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"女\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">dy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">MyNew</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Person</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"dy\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"男\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ymy</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">dy</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">dy</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getName</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c\">//共享原型上的方法</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ymy</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">getName</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">dy</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">getName</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">//true</span></pre></div>\n<ul dir=\"auto\">\n<li>剩余参数：如果函数的最后一个命名参数以<code class=\"notranslate\">...</code>为前缀，则它将成为一个由剩余参数组成的真数组。</li>\n<li><code class=\"notranslate\">Object.create()</code>方法创建一个新对象，并将新创建的对象的<code class=\"notranslate\">__proto__</code>指向传入的对象的原型。</li>\n</ul>","author":{"login":"Travelguest","avatarUrl":"https://avatars.githubusercontent.com/u/42471249?u=da42abea217ddf6f316e2b887c7e2d270566f854&v=4","url":"https://github.com/Travelguest"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AU13K","bodyHTML":"<p dir=\"auto\">这里 <a href=\"https://github.com/toFrankie/Blog/issues/1\" data-hovercard-type=\"issue\" data-hovercard-url=\"/toFrankie/blog/issues/1/hovercard\">手写系列之 new 关键字的实现 #1</a></p>","author":{"login":"toFrankie","avatarUrl":"https://avatars.githubusercontent.com/u/26947203?u=6b911102f09bb218a5d6cc053ffe3132eb6d3f21&v=4","url":"https://github.com/toFrankie"},"replies":null}}]}}},"pageContext":{"number":15,"previous":{"title":"实现一个LazyMan","number":13},"next":{"title":"如何准备述职报告？","number":16}}},
    "staticQueryHashes": ["151096407","2861350382"]}