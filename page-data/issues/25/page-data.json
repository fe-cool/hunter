{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/25",
    "result": {"data":{"issuesJson":{"id":"dd779c3a-2ef1-5af6-801a-15ce4015ad97","title":"实现检测数据类型的通用方法","number":25,"bodyHTML":"\n<h3 dir=\"auto\">要实现的功能</h3>\n\n<p dir=\"auto\">封装一个检测 JavaScript 数据类型的通用方法，满足以下输出：</p>\n<h3 dir=\"auto\">代码示例</h3>\n\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"getType({}) // object\ngetType('a') // string\ngetType(1) // number\ngetType(true) // boolean\ngetType(null) // null\ngetType(undefined) // undefined\ngetType(Symbol('a')) // symbol\ngetType(11n) // bigint\ngetType(/a/) // regexp\ngetType(new Date()) // date\ngetType([0, 1, 2]) // array\ngetType(function() {}) // function\ngetType(new Error()) // error\ngetType(new Map()) // map\ngetType(new Set()) // set\"><pre class=\"notranslate\"><span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// object</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'a'</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// string</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// number</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// boolean</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// null</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// undefined</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'a'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// symbol</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">11n</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// bigint</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span>a<span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// regexp</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Date</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// date</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// array</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// function</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// error</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// map</span>\n<span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Set</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// set</span></pre></div>\n<h3 dir=\"auto\">问题补充</h3>\n \n<ol dir=\"auto\">\n<li>请写出实现思路、代码，并为代码的关键步骤增写注释</li>\n<li>附带测试用例是加分项</li>\n<li>不需要考虑异常发生</li>\n<li>不过度设计，代码简洁优雅是加分项</li>\n</ol>\n<h2 dir=\"auto\">最佳答案</h2>\n<p dir=\"auto\"><a href=\"https://github.com/BetaSu/fe-hunter/issues/25#issuecomment-1079900899\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/25/hovercard\">blackcoffeecat的回答</a></p>\n<h3 dir=\"auto\">答题同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">答题规范：请在<code class=\"notranslate\">一次评论</code>中完成作答，后续修改也请编辑该评论，而不是追加新的评论</p>\n</li>\n<li>\n<p dir=\"auto\">评选标准：最佳答案由<code class=\"notranslate\">围观同学</code>的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji> 和<a href=\"https://github.com/BetaSu\">卡颂</a>共同决定</p>\n</li>\n<li>\n<p dir=\"auto\">评选时间：一般是当日18：00左右评选，如果问题发布当天回答数较少，问题悬赏金额可能增加，同时悬赏时间也会增加</p>\n</li>\n</ul>\n<h3 dir=\"auto\">围观同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">对于你满意的答案，请不要吝惜你的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>，这是评选<strong>最佳答案</strong>的依据</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">非答题的评论</code>会被删除，问题相关讨论请在<a href=\"https://github.com/BetaSu/fe-hunter\">赏金猎人群</a>中进行</p>\n</li>\n</ul>","updatedAt":"2022-03-29T04:04:41Z","upvoteCount":null,"author":{"login":"BetaSu","avatarUrl":"https://avatars.githubusercontent.com/u/15828041?u=3b08cdf9f9b49dbead9ffb020a94d925904d2b74&v=4","url":"https://github.com/BetaSu"},"category":null,"labels":{"edges":[{"node":{"name":"JS","color":"ffee58"}},{"node":{"name":"动手","color":"42a5f5"}}]},"comments":{"edges":[{"node":{"id":"IC_kwDOHCfdf85AXfrj","bodyHTML":"<p dir=\"auto\">判断对象类型的方法有这么些， typeof、instanceof 、.isPrototypeOf、.constructor.name<br>\n不过结合题目要求，Object.prototype.toString是一步到位的</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function getType(object) {\n  return Object.prototype.toString.call(object).slice(8, -1).toLowerCase()\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">object</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">toString</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">object</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">8</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">-</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toLowerCase</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<details>\n<summary>测试用例</summary>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// getType.test.js\nconst getType = require('./getType')\n\ndescribe('getType()', () =&gt; {\n  it('should be object', () =&gt; {\n    expect(getType({})).toBe('object')\n  })\n\n  it('should be string', () =&gt; {\n    expect(getType('a')).toBe('string')\n  })\n\n  it('should be number', () =&gt; {\n    expect(getType(1)).toBe('number')\n  })\n\n  it('should be boolean', () =&gt; {\n    expect(getType(true)).toBe('boolean')\n  })\n\n  it('should be null', () =&gt; {\n    expect(getType(null)).toBe('null')\n  })\n\n  it('should be undefined', () =&gt; {\n    expect(getType(undefined)).toBe('undefined')\n  })\n\n  it('should be symbol', () =&gt; {\n    expect(getType(Symbol('a'))).toBe('symbol')\n  })\n\n  it('should be bigint', () =&gt; {\n    expect(getType(11n)).toBe('bigint')\n  })\n\n  it('should be regexp', () =&gt; {\n    expect(getType(/a/)).toBe('regexp')\n  })\n\n  it('should be date', () =&gt; {\n    expect(getType(new Date())).toBe('date')\n  })\n\n  it('should be array', () =&gt; {\n    expect(getType([0, 1, 2])).toBe('array')\n  })\n\n  it('should be function', () =&gt; {\n    expect(getType(function () {})).toBe('function')\n  })\n\n  it('should be error', () =&gt; {\n    expect(getType(new Error())).toBe('error')\n  })\n\n  it('should be map', () =&gt; {\n    expect(getType(new Map())).toBe('map')\n  })\n\n  it('should be set', () =&gt; {\n    expect(getType(new Set())).toBe('set')\n  })\n})\"><pre class=\"notranslate\"><span class=\"pl-c\">// getType.test.js</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">getType</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'./getType'</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-en\">describe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'getType()'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be object'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'object'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be string'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'a'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'string'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be number'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'number'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be boolean'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'boolean'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be null'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'null'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be undefined'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'undefined'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be symbol'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'a'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'symbol'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be bigint'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">11n</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'bigint'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be regexp'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span>a<span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'regexp'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be date'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Date</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'date'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be array'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'array'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be function'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be error'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Error</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'error'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be map'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'map'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-en\">it</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'should be set'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Set</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'set'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n</details>","author":{"login":"blackcoffeecat","avatarUrl":"https://avatars.githubusercontent.com/u/43604283?v=4","url":"https://github.com/blackcoffeecat"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AYSgh","bodyHTML":"<p dir=\"auto\">typeof:  检测null会返回\"object\"（因为js中二进制前三位都为0会被判断为object类型，而null的二进制表示全为0），检测数组、正则等特殊对象时返回的都是\"object\"，无法区分具体的类型<br>\nObject.prototype.toString.call(): 几乎没有局限，是检测数据类型相对准确的方式，但是返回结果需要做处理</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function getType(value) {\n  if (value == null) {\n    return value + '';\n  }\n  let obj = {},\n    checkMethod = obj.toString;\n  'Boolean Number String Function Array Date RegExp Object Error Map Set'.split(' ').forEach(item =&gt; {\n    obj[`[object ${item}]`] = item.toLowerCase();\n  });\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    return obj[checkMethod.call(value)];\n  }\n  return typeof value;\n}\n\n测试：\nconsole.log(getType({})); // object\nconsole.log(getType('a')); // string\nconsole.log(getType(1)); // number\nconsole.log(getType(true)); // boolean\nconsole.log(getType(null)); // null\nconsole.log(getType(undefined)); // undefined\nconsole.log(getType(Symbol('a'))); // symbol\nconsole.log(getType(11n)); // bigint\nconsole.log(getType(/a/)); // regexp\nconsole.log(getType(new Date())); // date\nconsole.log(getType([0, 1, 2])); // array\nconsole.log(getType(function () {})); // function\nconsole.log(getType(new Error())); // error\nconsole.log(getType(new Map())); // map\nconsole.log(getType(new Set())); // set\"><pre class=\"notranslate\"><code class=\"notranslate\">function getType(value) {\n  if (value == null) {\n    return value + '';\n  }\n  let obj = {},\n    checkMethod = obj.toString;\n  'Boolean Number String Function Array Date RegExp Object Error Map Set'.split(' ').forEach(item =&gt; {\n    obj[`[object ${item}]`] = item.toLowerCase();\n  });\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    return obj[checkMethod.call(value)];\n  }\n  return typeof value;\n}\n\n测试：\nconsole.log(getType({})); // object\nconsole.log(getType('a')); // string\nconsole.log(getType(1)); // number\nconsole.log(getType(true)); // boolean\nconsole.log(getType(null)); // null\nconsole.log(getType(undefined)); // undefined\nconsole.log(getType(Symbol('a'))); // symbol\nconsole.log(getType(11n)); // bigint\nconsole.log(getType(/a/)); // regexp\nconsole.log(getType(new Date())); // date\nconsole.log(getType([0, 1, 2])); // array\nconsole.log(getType(function () {})); // function\nconsole.log(getType(new Error())); // error\nconsole.log(getType(new Map())); // map\nconsole.log(getType(new Set())); // set\n</code></pre></div>","author":{"login":"codekeqiong","avatarUrl":"https://avatars.githubusercontent.com/u/42710911?u=efdd51a32d6dde5bfc1a51cca089f1b730ebdaac&v=4","url":"https://github.com/codekeqiong"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AYa1A","bodyHTML":"<blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function getType(object) {\n  return Object.prototype.toString.call(object).slice(8, -1).toLowerCase()\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">getType</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">object</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">toString</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">object</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">8</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">-</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toLowerCase</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">测试用例</p>\n</blockquote>\n<p dir=\"auto\">我觉得这个方法就很高效，我参考这个以及<a href=\"https://github.com/lodash/lodash\">lodash</a>整理了一个<a href=\"https://gist.github.com/barnett617/2ccf7a89c0aafb438d11a3fbc495d7ed\">gist</a>，期待大家补充更完整的类型</p>","author":{"login":"barnett617","avatarUrl":"https://avatars.githubusercontent.com/u/23159565?u=2e24049f61bceaefe685e5a56dfc7ba1cd033953&v=4","url":"https://github.com/barnett617"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AYgZM","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const objMap = {};\nconst toString = objMap.toString;\n\nconst arr_type = [\n  'Boolean',\n  'Number',\n  'String',\n  'Function',\n  'Array',\n  'Date',\n  'RegExp',\n  'Object',\n  'Error',\n  'Symbol',\n  'BigInt',\n  'Map',\n  'Set',\n];\n\narr_type.forEach((name) =&gt; {\n  objMap[`[object ${name}]`] = name.toLowerCase();\n});\n\nconst getType = (obj) =&gt; {\n  if (obj === null) return `${obj}`;\n  return typeof obj === 'object' || typeof obj === 'function'\n    ? objMap[toString.call(obj)] || 'object'\n    : typeof obj;\n};\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">objMap</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">toString</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">objMap</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">toString</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">arr_type</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>\n  <span class=\"pl-s\">'Boolean'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'Number'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'String'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'Function'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'Array'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'Date'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'RegExp'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'Object'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'Error'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'Symbol'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'BigInt'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'Map'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-s\">'Set'</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">arr_type</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">objMap</span><span class=\"pl-kos\">[</span><span class=\"pl-s\">`[object <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">}</span></span>]`</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toLowerCase</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">getType</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span> <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span> <span class=\"pl-c1\">||</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span>\n    ? <span class=\"pl-s1\">objMap</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">toString</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s\">'object'</span>\n    : <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>","author":{"login":"Maidang1","avatarUrl":"https://avatars.githubusercontent.com/u/50993231?u=98b7ef2db007423e1ab78056693b130bd7966b1c&v=4","url":"https://github.com/Maidang1"},"replies":null}}]}}},"pageContext":{"number":25,"previous":{"title":"如何准备述职报告？","number":16},"next":{"title":"如何实现水平垂直居中？","number":26}}},
    "staticQueryHashes": ["151096407","2861350382"]}