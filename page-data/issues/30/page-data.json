{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/30",
    "result": {"data":{"issuesJson":{"id":"926ff113-d5cd-5651-9b44-011ef64e242b","title":"为什么Vue没有React那么多性能优化API？","number":30,"bodyHTML":"\n<h3 dir=\"auto\">发生问题的场景</h3>\n\n<p dir=\"auto\"><code class=\"notranslate\">React</code>中有很多与性能优化相关的API，比如：</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">PureComponent</p>\n</li>\n<li>\n<p dir=\"auto\">React.memo</p>\n</li>\n<li>\n<p dir=\"auto\">useMemo、useCallback</p>\n</li>\n<li>\n<p dir=\"auto\">shouldComponentUpdate</p>\n</li>\n</ul>\n<h3 dir=\"auto\">需要解决的问题</h3>\n\n<p dir=\"auto\">这些API增加了<code class=\"notranslate\">React</code>新人的学习成本，反观<code class=\"notranslate\">Vue</code>性能优化相关的API却很少，这是为什么呢？</p>\n<h3 dir=\"auto\">最佳答案评选标准</h3>\n\n<ol dir=\"auto\">\n<li>条理清晰，回答有逻辑性</li>\n</ol>\n<h2 dir=\"auto\">最佳答案</h2>\n<p dir=\"auto\"><a href=\"https://github.com/BetaSu/fe-hunter/issues/30#issuecomment-1081361426\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/30/hovercard\">a145789的回答</a></p>\n<h3 dir=\"auto\">答题同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">答题规范：请在<code class=\"notranslate\">一次评论</code>中完成作答，后续修改也请编辑该评论，而不是追加新的评论</p>\n</li>\n<li>\n<p dir=\"auto\">评选标准：最佳答案由<code class=\"notranslate\">围观同学</code>的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji> 和<a href=\"https://github.com/BetaSu\">卡颂</a>共同决定</p>\n</li>\n<li>\n<p dir=\"auto\">评选时间：一般是当日18：00左右评选，如果问题发布当天回答数较少，问题悬赏金额可能增加，同时悬赏时间也会增加</p>\n</li>\n</ul>\n<h3 dir=\"auto\">围观同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">对于你满意的答案，请不要吝惜你的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>，这是评选<strong>最佳答案</strong>的依据</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">非答题的评论</code>会被删除，问题相关讨论请在<a href=\"https://github.com/BetaSu/fe-hunter\">赏金猎人群</a>中进行</p>\n</li>\n</ul>","updatedAt":"2022-03-30T04:44:34Z","upvoteCount":null,"author":{"login":"BetaSu","avatarUrl":"https://avatars.githubusercontent.com/u/15828041?u=3b08cdf9f9b49dbead9ffb020a94d925904d2b74&v=4","url":"https://github.com/BetaSu"},"category":null,"labels":{"edges":[{"node":{"name":"JS","color":"ffee58"}},{"node":{"name":"React","color":"fbc02d"}},{"node":{"name":"Vue","color":"fdd835"}},{"node":{"name":"场景","color":"2196f3"}},{"node":{"name":"前端框架","color":"ff9100"}}]},"comments":{"edges":[{"node":{"id":"IC_kwDOHCfdf85Ac-SA","bodyHTML":"<p dir=\"auto\">首先jsx过于灵活在js的语义下难以优化,vue的<code class=\"notranslate\">sfc</code>模式。在模板层是一种指令式的<code class=\"notranslate\">DSL</code>有自己的文法。在编译的时候相较于灵活的jsx他能准确的提升<code class=\"notranslate\">vnode</code>，blockerTree配合<code class=\"notranslate\">patchFlag</code>精准更新。在性能优化上会更好。<br>\n有的人可能会问了。这和API有什么关系。的的确确没啥关系。我们纵观<code class=\"notranslate\">vue3</code>也推出了熟悉的<code class=\"notranslate\">v-memo</code>这样的指令。但是在之前是没有的。正是得益于<code class=\"notranslate\">vue</code>优秀的性能。我们可以举个例子两者都是70分。但是<code class=\"notranslate\">vue</code>的上限更高一点.但是对react不熟练的同学很容易导致70分变成60分。<code class=\"notranslate\">react</code>更多的是把选择权力交给用户。而<code class=\"notranslate\">vue</code>是独自背负了一切。</p>","author":{"login":"nonzzz","avatarUrl":"https://avatars.githubusercontent.com/u/52351095?u=6f6f36a4ced0620abe20704520835a1fdf67fef2&v=4","url":"https://github.com/nonzzz"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85Ac_cS","bodyHTML":"<ol dir=\"auto\">\n<li><code class=\"notranslate\">react</code> 采用了 <code class=\"notranslate\">jsx</code> 语法来书写 UI 逻辑，自由灵活的 jsx 语法就很难在转义时做一些静态分析和优化；<code class=\"notranslate\">vue</code> 采用 <code class=\"notranslate\">sfc</code> 的思路来组织 UI，更方便在转义时做一些优化；</li>\n<li><code class=\"notranslate\">react</code> 的采用了 <code class=\"notranslate\">Fiber</code> 的架构，支持（近似）可打断的渲染过程，将渲染细节尽可能的提供给了开发者。而 <code class=\"notranslate\">vue</code> 在编译上的优化使得这些渲染细节没有必要暴露给开发者，同时这些优化可能也就没有那么必要；</li>\n<li>由于设计思路上的不同，最终就导致了 API 上的差异。</li>\n</ol>","author":{"login":"Dante-dan","avatarUrl":"https://avatars.githubusercontent.com/u/19773791?u=7b0b3348e5f055ba8589cbdaa7a13b146418c2ad&v=4","url":"https://github.com/Dante-dan"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AdDxk","bodyHTML":"<p dir=\"auto\">这个问题，我觉得可以从 react conf 2021黄玄的宣讲谈一谈，react之所以需要那么性能优化，是因为JSX太灵活了。<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/58261676/160524912-488e63df-a8db-42c7-86bd-c3c4c0b70c80.png\"><img src=\"https://user-images.githubusercontent.com/58261676/160524912-488e63df-a8db-42c7-86bd-c3c4c0b70c80.png\" alt=\"image\" style=\"max-width: 100%;\"></a><br>\n组件的prop值修改的时候，子组件会不断的re-render,即使有些函数根本不需要进行重复执行，所以我们需要 useMemo() 去缓存我们的组件， useCallBack()去缓存我们的函数。当然 React 官方团队也在努力地去解决这个事情，这个就是 React Forget啦，也就是 react的编译时优化。<br>\n那么 vue 有没有这种优化选项呢？ 其实最新版的 vue 也提供了 v-memo这个指令来跳过diff比较。但是由于 vue使用的是依赖追踪机制，而不是 ImmutableJS 这种不可变更新的方式，不存在过渡重渲染的性能问题。</p>","author":{"login":"childrentime","avatarUrl":"https://avatars.githubusercontent.com/u/58261676?u=2457dbe0350468c49c8bf9ed4a1b0e6622649c7a&v=4","url":"https://github.com/childrentime"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AdEQS","bodyHTML":"<blockquote>\n<p dir=\"auto\">原生</p>\n</blockquote>\n<div class=\"highlight highlight-text-html-basic notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"&lt;div&gt;\n   &lt;h1&gt; Hello World &lt;/h1&gt;\n   &lt;div&gt; Child &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    document.querySelector('h1').innerHTML = ''\n&lt;/script&gt;\"><pre class=\"notranslate\"><span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span>\n   <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">h1</span><span class=\"pl-kos\">&gt;</span> Hello World <span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">h1</span><span class=\"pl-kos\">&gt;</span>\n   <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span> Child <span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span>\n<span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">div</span><span class=\"pl-kos\">&gt;</span>\n\n<span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">script</span><span class=\"pl-kos\">&gt;</span>\n    <span class=\"pl-smi\">document</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">querySelector</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'h1'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">innerHTML</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">''</span>\n<span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">script</span><span class=\"pl-kos\">&gt;</span></pre></div>\n<blockquote>\n<p dir=\"auto\">react</p>\n</blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const [state, setState] = useState('Hello World')\n\nsetState('')\n\n&lt;div&gt;\n   &lt;h1&gt; {state} &lt;/h1&gt;\n   &lt;Child /&gt;\n&lt;/div&gt;\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">state</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">setState</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useState</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hello World'</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-s1\">setState</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">''</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">div</span><span class=\"pl-c1\">&gt;</span>\n   <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">h1</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-kos\">{</span><span class=\"pl-s1\">state</span><span class=\"pl-kos\">}</span> <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">h1</span><span class=\"pl-c1\">&gt;</span>\n   <span class=\"pl-c1\">&lt;</span><span class=\"pl-v\">Child</span> <span class=\"pl-c1\">/</span><span class=\"pl-c1\">&gt;</span>\n<span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span></pre></div>\n<blockquote>\n<p dir=\"auto\">vue</p>\n</blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"&lt;template&gt;\n    &lt;div&gt;\n       &lt;h1&gt; {{state}} &lt;/h1&gt;\n       &lt;Child /&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\ndefineComponent({\n  setup() {\n    const state = ref('Hello World'')\n    state.value = ''\n  },\n})\n&lt;/script&gt;\"><pre class=\"notranslate\"><span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">template</span><span class=\"pl-c1\">&gt;</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n       <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">h1</span><span class=\"pl-c1\">&gt;</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">{</span>state<span class=\"pl-kos\">}</span><span class=\"pl-kos\">}</span> <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">h1</span><span class=\"pl-c1\">&gt;</span>\n       <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">Child</span> <span class=\"pl-c1\">/</span><span class=\"pl-c1\">&gt;</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n<span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">template</span><span class=\"pl-c1\">&gt;</span>\n\n<span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">script</span><span class=\"pl-c1\">&gt;</span>\n<span class=\"pl-en\">defineComponent</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">setup</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">state</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">ref</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Hello World'</span>'<span class=\"pl-kos\">)</span>\n    <span class=\"pl-s1\">state</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">''</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span>script&gt;</pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">document.querySelector('h1').innerHTML = ''</code> 基本上就是我们能做到的最细粒度更新，不会影响其他元素，只更新 <code class=\"notranslate\">h1</code></p>\n<p dir=\"auto\"><code class=\"notranslate\">setState('')</code> 在 react 机制下本组件、子组件 <code class=\"notranslate\">Child</code> 会一起重渲染，因此必须有什么机制去阻止或者减少子组件去做无意义的更新，暴露出了一大堆 <code class=\"notranslate\">API</code></p>\n<p dir=\"auto\"><code class=\"notranslate\">state.value = ''</code> 只会更新本组件，不会影响子组件 <code class=\"notranslate\">Child</code>，得益于 <code class=\"notranslate\">vue</code> 的响应式机制，每个组件只对自己 watcher 负责，父子组件没什么关联，基本可以做到你玩你的我玩我的</p>\n<blockquote>\n<p dir=\"auto\">卡颂补充：<code class=\"notranslate\">React</code>机制中每次<code class=\"notranslate\">setState</code>，不仅本组件与子组件，实际上整棵组件树都会遍历。同时文中提到的<strong>本组件、子组件 Child会一起重渲染</strong>中的<strong>渲染</strong>，应理解为：组件render，而不是页面渲染</p>\n</blockquote>","author":{"login":"a145789","avatarUrl":"https://avatars.githubusercontent.com/u/37403253?u=458c3e3b2d4f43fa43e341eb6dfdc2146b9709e6&v=4","url":"https://github.com/a145789"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AdF04","bodyHTML":"<h1 dir=\"auto\">首先我们来说说React中为什么会有这么多的优化API</h1>\n<ul dir=\"auto\">\n<li>性能、性能</li>\n</ul>\n<blockquote>\n<p dir=\"auto\">比如我们父子组件嵌套的时候，如果一般没有优化，父组件的刷新会触发组件的刷新，说深入一点，这就是react 的更新机制导致的，调用setState，就会触发组件的重新渲染，还有一点就是父组件更新，子组件也会自动的更新。而且整个diff以及mount过程中都是递归执行的，正是由于这些原因，react中加入了各种优化的钩子useMemo、useCallback等等  去避免各种过度渲染而导致的性能损失</p>\n</blockquote>\n<h1 dir=\"auto\">为什么VUE中没有这些呢？</h1>\n<blockquote>\n<p dir=\"auto\">VUE 中组件更新作的足够细致，粒度更小，很容易能够控制组件是否要刷新，当然这些详细展开的话，大致有以下几点需要我们关注</p>\n</blockquote>\n<ul dir=\"auto\">\n<li>Proxy模式</li>\n<li>静态标记，标记是否需要更新_createVNode的第四个参数</li>\n<li>组件内部Vdom</li>\n<li>事件缓存</li>\n<li>组件级别watcher<br>\n正是基于以上这些机制，VUE很清楚组件哪里需哟啊更新，哪里不需要更新，即使dom树很复杂</li>\n</ul>\n<h1 dir=\"auto\">总结一下</h1>\n<p dir=\"auto\">其实React本身也可以做，将粒度细化，但是为什么没有实现呢，可能是为了更多的自由吧，而VUE直接讲所谓的pure、usememe等优化通过各种手段直接实现了，我们就不需要对其进行操作了，更加对开发这友好，但是失去了灵活性！</p>","author":{"login":"lkzwc","avatarUrl":"https://avatars.githubusercontent.com/u/84896877?u=f15173a1dcf50be6cecdfb59a70b8a0a8c624176&v=4","url":"https://github.com/lkzwc"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AdGTR","bodyHTML":"<p dir=\"auto\">问题中列出的api都有同一个作用：减少组件更新次数；<br>\nreact的特性：当组件更新时，子组建也会跟随重新渲染；</p>\n<p dir=\"auto\">分析角度1  数据类型不同：<br>\nvue其实自带了PureComponent、memo、shouldComponentUpdate的作用，props、state都会转换成reactive对象(vue2是observable)，如果只从组件更新角度看， vue约等于把props和state都shallowEqual比对过了<br>\nreact的数据传递是flux模式，组件更新前和更新后props不是同一个对象，需要通过shallowEqual或自定义的比对方法来决定组件是否更新，react的一个特性：当组件更新时其所有子组件都会重新渲染<br>\n这意味着在react中适当的优化组件更新是有必要的</p>\n<p dir=\"auto\">分析角度2 框架的设计目的：<br>\nreact本质只是维护虚拟dom，负责数据更新响应到虚拟dom节点更新这个工作(state &gt; vDOM)，将虚拟dom渲染到载体上的工作由react-dom、react-native负责(vDOM &gt; UI)<br>\nvue同时也负责渲染的工作，也得益于vue模版编译的内在特性，组件更新的过程可优化到实际渲染级别(state &gt; UI)<br>\n从这个角度看，react的props和state只是存粹属于虚拟dom的声明部分，开发者只能通过上述的api来控制虚拟dom的更新，进而优化实际渲染性能</p>","author":{"login":"blackcoffeecat","avatarUrl":"https://avatars.githubusercontent.com/u/43604283?v=4","url":"https://github.com/blackcoffeecat"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AdGbQ","bodyHTML":"<p dir=\"auto\">为什么没有这么多 API？大概是因为不需要吧。</p>\n<p dir=\"auto\">先看看两个例子，<a href=\"https://codesandbox.io/s/render-react-32jm12\" rel=\"nofollow\">React</a> vs <a href=\"https://codesandbox.io/s/render-vue-vg42z0\" rel=\"nofollow\">Vue</a>。</p>\n<p dir=\"auto\">两个里面实现的都是同样的功能：一个 <code class=\"notranslate\">Counter</code> 组件里面，包含一个 <code class=\"notranslate\">SubCounter</code> 组件。</p>\n<ol dir=\"auto\">\n<li>先看看 React 怎么处理的，<a href=\"https://codesandbox.io/s/render-react-32jm12\" rel=\"nofollow\">Demo</a></li>\n</ol>\n<p dir=\"auto\"><code class=\"notranslate\">Counter.js</code>:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import { useState } from &quot;react&quot;;\nimport SubCounter from &quot;./SubCounter&quot;;\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  console.log(&quot;render counter&quot;);\n\n  return (\n    &lt;div&gt;\n      counter:{&quot; &quot;}\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setCount((n) =&gt; n + 1)}&gt;+1&lt;/button&gt;\n        &amp;nbsp;\n        {count}\n      &lt;/div&gt;\n      subcounter:\n      &lt;SubCounter /&gt;\n    &lt;/div&gt;\n  );\n}\n\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">useState</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"react\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-v\">SubCounter</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"./SubCounter\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-k\">function</span> <span class=\"pl-v\">Counter</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">count</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">setCount</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useState</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"render counter\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n      counter:<span class=\"pl-kos\">{</span><span class=\"pl-s\">\" \"</span><span class=\"pl-kos\">}</span>\n      <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n        <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">button</span> <span class=\"pl-c1\">onClick</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">setCount</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">n</span> <span class=\"pl-c1\">+</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">&gt;</span>+1<span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">button</span><span class=\"pl-c1\">&gt;</span>\n        &amp;nbsp;\n        <span class=\"pl-kos\">{</span><span class=\"pl-s1\">count</span><span class=\"pl-kos\">}</span>\n      <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n      subcounter:\n      <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">SubCounter</span> <span class=\"pl-c1\">/</span><span class=\"pl-c1\">&gt;</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">SubCounter.js</code></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import { useState } from &quot;react&quot;;\n\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  console.log(&quot;render counter1&quot;);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setCount((n) =&gt; n + 1)}&gt;+1&lt;/button&gt;\n      &amp;nbsp;\n      {count}\n    &lt;/div&gt;\n  );\n}\n\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">useState</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"react\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-k\">function</span> <span class=\"pl-v\">Counter</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">count</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">setCount</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useState</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"render counter1\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n      <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">button</span> <span class=\"pl-c1\">onClick</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">setCount</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">n</span> <span class=\"pl-c1\">+</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">&gt;</span>+1<span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">button</span><span class=\"pl-c1\">&gt;</span>\n      &amp;nbsp;\n      <span class=\"pl-kos\">{</span><span class=\"pl-s1\">count</span><span class=\"pl-kos\">}</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">从下面的图片可以看出，点击一次 <code class=\"notranslate\">Counter</code> 的 +1，会导致 <code class=\"notranslate\">SubCounter</code> 的 <code class=\"notranslate\">render</code> 函数执行一次。</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/14226737/160527849-404de74e-e18e-4cc9-9024-91074228d453.png\"><img width=\"554\" alt=\"image\" src=\"https://user-images.githubusercontent.com/14226737/160527849-404de74e-e18e-4cc9-9024-91074228d453.png\" style=\"max-width: 100%;\"></a></p>\n<ol start=\"3\" dir=\"auto\">\n<li>再看看 Vue 怎么处理的，<a href=\"https://codesandbox.io/s/render-vue-vg42z0\" rel=\"nofollow\">Demo</a>。</li>\n</ol>\n<p dir=\"auto\"><code class=\"notranslate\">Counter.js</code></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import { defineComponent, h } from &quot;vue&quot;;\nimport SubCounter from &quot;./SubCounter&quot;;\n\nexport default defineComponent({\n  data() {\n    return {\n      count: 0\n    };\n  },\n  render() {\n    console.log(&quot;render counter&quot;);\n\n    return h(&quot;div&quot;, [\n      &quot;counter:&quot;,\n      h(\n        &quot;button&quot;,\n        {\n          onClick: () =&gt; {\n            this.count++;\n          }\n        },\n        &quot;+1&quot;\n      ),\n      this.count,\n      h(&quot;div&quot;, [&quot;sub counter:&quot;, h(SubCounter)])\n    ]);\n  }\n});\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">defineComponent</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">h</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"vue\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-v\">SubCounter</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"./SubCounter\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-en\">defineComponent</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">data</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">count</span>: <span class=\"pl-c1\">0</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">render</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"render counter\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"div\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span>\n      <span class=\"pl-s\">\"counter:\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span>\n        <span class=\"pl-s\">\"button\"</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">{</span>\n          <span class=\"pl-en\">onClick</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">count</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-s\">\"+1\"</span>\n      <span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">count</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"div\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"sub counter:\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">SubCounter</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">SubCounter.js</code></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import { defineComponent, h } from &quot;vue&quot;;\n\nexport default defineComponent({\n  data() {\n    return {\n      count: 0\n    };\n  },\n  render() {\n    console.log(&quot;render sub counter&quot;);\n\n    return h(&quot;div&quot;, [\n      h(\n        &quot;button&quot;,\n        {\n          onClick: () =&gt; {\n            this.count++;\n          }\n        },\n        &quot;+1&quot;\n      ),\n      this.count\n    ]);\n  }\n});\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">defineComponent</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">h</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"vue\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-en\">defineComponent</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">data</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">count</span>: <span class=\"pl-c1\">0</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">render</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"render sub counter\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"div\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span>\n      <span class=\"pl-en\">h</span><span class=\"pl-kos\">(</span>\n        <span class=\"pl-s\">\"button\"</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">{</span>\n          <span class=\"pl-en\">onClick</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">count</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-s\">\"+1\"</span>\n      <span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">count</span>\n    <span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">从下面的图片可以看出，点击一次 <code class=\"notranslate\">Counter</code> 的 +1，只会执行 <code class=\"notranslate\">Counter</code> 的 <code class=\"notranslate\">render</code> 函数，<code class=\"notranslate\">SubCounter</code> 的 <code class=\"notranslate\">render</code> 函数不会执行。</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/14226737/160528146-a2455baa-7182-4840-a54d-2bae766a61a6.png\"><img width=\"573\" alt=\"image\" src=\"https://user-images.githubusercontent.com/14226737/160528146-a2455baa-7182-4840-a54d-2bae766a61a6.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">这大概也就是 Vue 和 React 的区别了，React 把控制权交给的开发者自己，有性能要求的地方，就需要自己去优化。而 Vue 把这部分直接帮开发者做了，如果使用 SFC 的话，将会有更多的优化。具体的优化，可以看看<a href=\"https://staging-cn.vuejs.org/guide/extras/rendering-mechanism.html#compiler-informed-virtual-dom\" rel=\"nofollow\">这个文档</a></p>","author":{"login":"0x-jerry","avatarUrl":"https://avatars.githubusercontent.com/u/14226737?u=a1a259e8a69e5aec36bc2c9fe26cec6031fe2079&v=4","url":"https://github.com/0x-jerry"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85Aeety","bodyHTML":"<h2 dir=\"auto\">1. 框架设计</h2>\n<p dir=\"auto\">前端框架，如果运行时类型区分可以分为三类：运行时，编译+运行时，纯编译型，运行时框架主要是react，vue属于编译+运行时框架，纯编译型框架主要包括solid，svelte等。因为react属于运行时框架，在编译阶段可以做的事情比较少（主要原因是react是用jsx实现的，jsx太过灵活很难实现编译阶段优化），也就需要在运行阶段做优化。而vue是编译+运行时的框架，在编译阶段可以做很多优化处理，好比说静态DOM的提升：<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/18670705/160594522-1aa08364-b73b-483e-a51c-7a3375ef8ef3.png\"><img src=\"https://user-images.githubusercontent.com/18670705/160594522-1aa08364-b73b-483e-a51c-7a3375ef8ef3.png\" alt=\"image\" style=\"max-width: 100%;\"></a><br>\n这就导致了react学习曲线到陡峭，而vue相对来说比较简单</p>\n<h2 dir=\"auto\">2. 设计思想</h2>\n<p dir=\"auto\">vue主要的设计思想是为了满足简单，好用，性能较好，这就导致vue在设计开发阶段必须不能太增加用户的心智负担。react一开始的定位就是提出 UI 开发的新思路。react要做的就是用更好的方式去颠覆前端的开发方式。所以react一开始就引入了jsx，不可变等关机因素。</p>","author":{"login":"xuelongm","avatarUrl":"https://avatars.githubusercontent.com/u/18670705?v=4","url":"https://github.com/xuelongm"},"replies":null}}]}}},"pageContext":{"number":30,"previous":{"title":"Twitter源码中前十行的作用是？","number":29},"next":{"title":"实现数组扁平化","number":34}}},
    "staticQueryHashes": ["151096407","2861350382"]}