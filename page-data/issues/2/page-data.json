{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/2",
    "result": {"data":{"issuesJson":{"id":"14d41bf7-fd8c-5a7a-b5b6-081009ddf3bd","title":"实现 add(1)(2)(3)(4) = 10","number":2,"bodyHTML":"<h2 dir=\"auto\">问题描述</h2>\n\n\n<p dir=\"auto\">实现<strong>add</strong>函数，使得：</p>\n<p dir=\"auto\"><code class=\"notranslate\">add(1)(2)(3)(4)</code>输出结果为<strong>10</strong></p>\n<p dir=\"auto\"><code class=\"notranslate\">add(1)(2)(3)</code>输出结果为<strong>6</strong></p>\n<p dir=\"auto\">请给出满足<strong>普遍条件</strong>的答案，写出你的实现思路和完整代码</p>\n<h2 dir=\"auto\">最佳答案</h2>\n<p dir=\"auto\"><a href=\"https://github.com/BetaSu/fe-hunter/issues/2#issuecomment-1074694344\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/2/hovercard\">chanchunlei的回答</a></p>\n<h2 dir=\"auto\">答题同学须知</h2>\n<p dir=\"auto\">最佳答案由<code class=\"notranslate\">围观同学</code>的<code class=\"notranslate\">👍</code>和<a href=\"https://github.com/BetaSu\">卡颂</a>共同决定。<strong>非答题相关评论</strong>会被删除，问题相关内容讨论请在<a href=\"https://github.com/BetaSu/fe-hunter\">赏金猎人群</a>里讨论</p>\n<h2 dir=\"auto\">围观同学须知</h2>\n<p dir=\"auto\">对于你满意的答案，请不要吝惜你的<code class=\"notranslate\">👍</code>，这是评选<strong>最佳答案</strong>的标准，<strong>非答题相关评论</strong>会被删除</p>","updatedAt":"2022-03-23T02:58:58Z","upvoteCount":null,"author":{"login":"BetaSu","avatarUrl":"https://avatars.githubusercontent.com/u/15828041?u=3b08cdf9f9b49dbead9ffb020a94d925904d2b74&v=4","url":"https://github.com/BetaSu"},"category":null,"labels":{"edges":[{"node":{"name":"JS","color":"ffee58"}},{"node":{"name":"动手","color":"42a5f5"}}]},"comments":{"edges":[{"node":{"id":"IC_kwDOHCfdf85ADoGd","bodyHTML":"<p dir=\"auto\">const add = x =&gt; y =&gt; z =&gt; w =&gt; x + y + z+ w;</p>","author":{"login":"wanlum","avatarUrl":"https://avatars.githubusercontent.com/u/11306760?u=9b7ddfcfc1773b3100f62d54635008358a5ffda9&v=4","url":"https://github.com/wanlum"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ADojI","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function add() {\n\tconst _args = [...arguments];\n\tfunction fn() {\n\t\t_args.push(...arguments);\n\t\treturn fn;\n\t}\n\tfn.valueOf = function() {\n\t\treturn _args.reduce((sum, cur) =&gt; sum + cur);\n\t}\n\treturn fn;\n}\nadd(1)(2)(3)(4).valueOf();\nadd(1)(1,2,3)(2).valueOf();\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-k\">const</span> <span class=\"pl-s1\">_args</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-k\">function</span> <span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-s1\">_args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span>...<span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">_args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">sum</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">sum</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">当变量对象（函数也是对象）遇到一些情况的时候，会偷偷地调用 toString 和 valueOf 方法（隐式调用），那我们就可以改写这两个方法做一些事。</p>","author":{"login":"chanchunlei","avatarUrl":"https://avatars.githubusercontent.com/u/34532433?u=bf1081ac39accac1030a2a4f8f93bf74913f419b&v=4","url":"https://github.com/chanchunlei"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ADo9H","bodyHTML":"<p dir=\"auto\">函数柯里化：==只传递给函数一部分参数来调用它，让它返回一个函数去处理剩余的参数==</p>\n<p dir=\"auto\"><code class=\"notranslate\">const add = x =&gt; y =&gt; z =&gt; w =&gt; x + y + z+ w</code></p>\n<p dir=\"auto\">会但来晚hhhh，我也来答答</p>","author":{"login":"c0dedance","avatarUrl":"https://avatars.githubusercontent.com/u/38075730?v=4","url":"https://github.com/c0dedance"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ADo-V","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function add(...params) {\n\tconst func = add.bind(null, ...params);\n\tfunc.toString = () =&gt; params.reduce((prev, cur) =&gt; (prev += cur), 0);\n\treturn func;\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">function add(...params) {\n\tconst func = add.bind(null, ...params);\n\tfunc.toString = () =&gt; params.reduce((prev, cur) =&gt; (prev += cur), 0);\n\treturn func;\n}\n</code></pre></div>\n<p dir=\"auto\">思路：利用 bind 保存链式调用的参数，利用 == 会隐式转换，调用 toString 方法</p>","author":{"login":"GuanyuChen","avatarUrl":"https://avatars.githubusercontent.com/u/9473858?u=9adc1c9aaa1579857705be9de65aa8136170907d&v=4","url":"https://github.com/GuanyuChen"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ADpNv","bodyHTML":"<p dir=\"auto\">赏金猎人来了： window.add=()=&gt;()=&gt;()=&gt;()=&gt;10</p>","author":{"login":"0753Ljuc","avatarUrl":"https://avatars.githubusercontent.com/u/59270826?u=e3f961f6debc1ef11b75f1c4af28b6c012c4ef34&v=4","url":"https://github.com/0753Ljuc"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ADpaa","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function add(x1) {\n\tlet sum = x1\n\tfunction fun(x2) {\n\t\tsum += x2\n\t\treturn fun\n\t}\n\tfun.toString = function () {\n\t\treturn sum\n\t}\n\tfun.valueOf = function () {\n\t\treturn sum\n\t}\n\treturn fun\n}\n\nalert(add(1)(2)(3)(4))\nconsole.log(+add(1)(2)(3)(4)) // 利用 valueOf\ndocument.write(add(1)(2)(3)(4))\"><pre class=\"notranslate\"><code class=\"notranslate\">function add(x1) {\n\tlet sum = x1\n\tfunction fun(x2) {\n\t\tsum += x2\n\t\treturn fun\n\t}\n\tfun.toString = function () {\n\t\treturn sum\n\t}\n\tfun.valueOf = function () {\n\t\treturn sum\n\t}\n\treturn fun\n}\n\nalert(add(1)(2)(3)(4))\nconsole.log(+add(1)(2)(3)(4)) // 利用 valueOf\ndocument.write(add(1)(2)(3)(4))\n</code></pre></div>","author":{"login":"jerry-lllman","avatarUrl":"https://avatars.githubusercontent.com/u/45385120?u=4ddfba34a051c4b37f7b6fdfd0c5290715e510e7&v=4","url":"https://github.com/jerry-lllman"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ADpyY","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const add = function(num1, num2) {\n  return num1 + num2;\n}\nfunction curry(add, n) {\n  let count = 0;\n  let arr = [];   \n  return function reply(arg) {\n    arr.push(arg);\n    if ( ++count &gt;= n) {\n      return arr.reduce(function(p, c) {\n          return p = add(p, c);\n      }, 0) \n    } else {\n      return reply;\n    }\n  }\n}\n// 需要几个参数n就写几\nconst sum = curry(add, 4);\n\nsum(4)(3)(2)(1)  // 10\"><pre class=\"notranslate\"><code class=\"notranslate\">const add = function(num1, num2) {\n  return num1 + num2;\n}\nfunction curry(add, n) {\n  let count = 0;\n  let arr = [];   \n  return function reply(arg) {\n    arr.push(arg);\n    if ( ++count &gt;= n) {\n      return arr.reduce(function(p, c) {\n          return p = add(p, c);\n      }, 0) \n    } else {\n      return reply;\n    }\n  }\n}\n// 需要几个参数n就写几\nconst sum = curry(add, 4);\n\nsum(4)(3)(2)(1)  // 10\n</code></pre></div>","author":{"login":"Kate605690919","avatarUrl":"https://avatars.githubusercontent.com/u/23615318?u=2bf74675f2c1de255a4b513a6aa596f20ce6fd9d&v=4","url":"https://github.com/Kate605690919"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ADtmE","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\nfunction addProxy() {\n  let sum = [...arguments].reduce((prev, cur) =&gt; prev + cur, 0)\n  const proxy = new Proxy(function a() {}, {\n    get() {\n      return () =&gt; sum\n    },\n    apply(...args) {\n      const val = args[2].reduce((prev, cur) =&gt; prev + cur, 0)\n      sum += val\n      return proxy\n    }\n  })\n  return proxy\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">\nfunction addProxy() {\n  let sum = [...arguments].reduce((prev, cur) =&gt; prev + cur, 0)\n  const proxy = new Proxy(function a() {}, {\n    get() {\n      return () =&gt; sum\n    },\n    apply(...args) {\n      const val = args[2].reduce((prev, cur) =&gt; prev + cur, 0)\n      sum += val\n      return proxy\n    }\n  })\n  return proxy\n}\n</code></pre></div>","author":{"login":"aniu2016","avatarUrl":"https://avatars.githubusercontent.com/u/23627446?v=4","url":"https://github.com/aniu2016"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ADuvv","bodyHTML":"<p dir=\"auto\">测试好像不会主动调用toString方法，算违背题目了</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const add = function (a) {\n  let sum = a;\n  function _add(b) {\n    sum = sum + b;\n    return _add;\n  }\n  _add.toString = function () {\n    return sum;\n  };\n  return _add;\n};\nconsole.log(add(1)(2)(3)(4).toString());\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">add</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">sum</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">_add</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">b</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">sum</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">sum</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">_add</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-s1\">_add</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">sum</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">_add</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>","author":{"login":"cz160","avatarUrl":"https://avatars.githubusercontent.com/u/38774261?u=c6ff4f0e744ee1a7795e4f05cf4c6a5a6a8de4af&v=4","url":"https://github.com/cz160"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85ADu4o","bodyHTML":"<p dir=\"auto\">function add(n){<br>\nlet sum = 0;<br>\nlet count = 3;<br>\nsum += n;<br>\nreturn count ? _add : sum;<br>\nfunction _add(n){<br>\nsum += n;<br>\ncount--;<br>\nreturn count ? _add : sum;<br>\n}<br>\n}</p>","author":{"login":"jialong5566","avatarUrl":"https://avatars.githubusercontent.com/u/41741838?v=4","url":"https://github.com/jialong5566"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AD_mQ","bodyHTML":"<blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function add() {\n\tconst _args = [...arguments];\n\tfunction fn() {\n\t\t_args.push(...arguments);\n\t\treturn fn;\n\t}\n\tfn.valueOf = function() {\n\t\treturn _args.reduce((sum, cur) =&gt; sum + cur);\n\t}\n\treturn fn;\n}\nadd(1)(2)(3)(4).valueOf();\nadd(1)(1,2,3)(2).valueOf();\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-k\">const</span> <span class=\"pl-s1\">_args</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-k\">function</span> <span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-s1\">_args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span>...<span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">_args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">sum</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">sum</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">当变量对象（函数也是对象）遇到一些情况的时候，会偷偷地调用 toString 和 valueOf 方法（隐式调用），那我们就可以改写这两个方法做一些事。</p>\n</blockquote>\n<p dir=\"auto\">可以展开说说哪些情况会调用 valueOf 吗？</p>","author":{"login":"pan463859","avatarUrl":"https://avatars.githubusercontent.com/u/32640880?u=538459c6431832b840eea13024f03874807695fb&v=4","url":"https://github.com/pan463859"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AEBTs","bodyHTML":"<blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function add() {\n\tconst _args = [...arguments];\n\tfunction fn() {\n\t\t_args.push(...arguments);\n\t\treturn fn;\n\t}\n\tfn.valueOf = function() {\n\t\treturn _args.reduce((sum, cur) =&gt; sum + cur);\n\t}\n\treturn fn;\n}\nadd(1)(2)(3)(4).valueOf();\nadd(1)(1,2,3)(2).valueOf();\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-k\">const</span> <span class=\"pl-s1\">_args</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-k\">function</span> <span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-s1\">_args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span>...<span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">_args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">sum</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">sum</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">当变量对象（函数也是对象）遇到一些情况的时候，会偷偷地调用 toString 和 valueOf 方法（隐式调用），那我们就可以改写这两个方法做一些事。</p>\n</blockquote>\n<p dir=\"auto\">不同意这个做法，不应该去改 valueOf<br>\n下面是我的做法</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function add (a) {\n  return function (b) {\n    if (typeof b === 'number') {\n      return add(a+b);\n    }\n    return a;\n  };\n};`\n\nconst calc = add(1)(2)(3)(4)(5)(6);\nconst res = calc();\"><pre class=\"notranslate\"><code class=\"notranslate\">function add (a) {\n  return function (b) {\n    if (typeof b === 'number') {\n      return add(a+b);\n    }\n    return a;\n  };\n};`\n\nconst calc = add(1)(2)(3)(4)(5)(6);\nconst res = calc();\n</code></pre></div>","author":{"login":"wayne1874","avatarUrl":"https://avatars.githubusercontent.com/u/12590016?u=78833d14d0feb738034e2005bdddaa3a7137cfb6&v=4","url":"https://github.com/wayne1874"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AEPI3","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function add(a) {\n\tfunction sum(b) {\n\t\ta = a + b;\n\t\treturn sum;\n\t}\n\n\tsum.toString = function () {\n\t\treturn a;\n\t};\n\n\treturn sum;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-k\">function</span> <span class=\"pl-en\">sum</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">b</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">sum</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n\n\t<span class=\"pl-s1\">sum</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">sum</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"Ha0ran2001","avatarUrl":"https://avatars.githubusercontent.com/u/73927445?u=51b77bd26b8dbe99cd4a9c86f8f5051df49626a2&v=4","url":"https://github.com/Ha0ran2001"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AERh7","bodyHTML":"<p dir=\"auto\">建议：题目描述需要更严谨些；考点不刻意隐晦</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"实现add函数，使得：\nadd(1)(2)(3)(4)输出结果为10\nadd(1)(2)(3)输出结果为6\n请给出满足普遍条件的答案，写出你的实现思路和完整代码\"><pre class=\"notranslate\"><code class=\"notranslate\">实现add函数，使得：\nadd(1)(2)(3)(4)输出结果为10\nadd(1)(2)(3)输出结果为6\n请给出满足普遍条件的答案，写出你的实现思路和完整代码\n</code></pre></div>\n<p dir=\"auto\">改为</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"实现add函数使得：\nadd(1)(2)...(n-1)(n)返回1+2+...n-1+n的结果，其中n&gt;=1\"><pre class=\"notranslate\"><code class=\"notranslate\">实现add函数使得：\nadd(1)(2)...(n-1)(n)返回1+2+...n-1+n的结果，其中n&gt;=1\n</code></pre></div>\n<p dir=\"auto\">这样可以避免得到只针对示例n=4和n=3的答案。<br>\n可能原始描述中的“普遍条件”就是想表达这个意思吧。</p>\n<p dir=\"auto\">另外，这道题即便改成第二种描述方式，应该也是无法实现的。因为没有终止条件：<br>\n<code class=\"notranslate\">add</code>无法确定应该返回<code class=\"notranslate\">累加和</code>还是<code class=\"notranslate\">一个函数</code>。这就导致大家偏向<code class=\"notranslate\">toString</code>、<code class=\"notranslate\">valueOf</code>的隐式转换。<br>\n然而众所周知JavaScript中的操作符重载很不完善；隐式转换也是应该避免的。<br>\n那么题目描述还不如改成：</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"实现add函数使得：\nadd(1)(2)...(n-1)(n)()返回1+2+...n-1+n的结果，其中n&gt;=1\"><pre class=\"notranslate\"><code class=\"notranslate\">实现add函数使得：\nadd(1)(2)...(n-1)(n)()返回1+2+...n-1+n的结果，其中n&gt;=1\n</code></pre></div>\n<p dir=\"auto\">或者</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"实现add函数使得：\nadd(1)(2)...(n-1)(n).value返回1+2+...n-1+n的结果，其中n&gt;=1\"><pre class=\"notranslate\"><code class=\"notranslate\">实现add函数使得：\nadd(1)(2)...(n-1)(n).value返回1+2+...n-1+n的结果，其中n&gt;=1\n</code></pre></div>\n<p dir=\"auto\">另外一个问题：<br>\n大家在上学的时候经常遇到。题目为了“隐藏”考察点，刻意隐含甚至缺少条件。<br>\n然而，像缺少条件的情况，在高考这类考试中是不可能出现的。这也是为什么，<br>\n不少人高考成绩远高于平时考试；高三最后都要刷真题的原因。<br>\n因为平时考试出的题目本身就有问题，出题人的水平肯定也没有高考命题组的高。</p>\n<p dir=\"auto\">如果面试中遇到没有给出限制条件的问题。建议问清楚。或者根据不同限制条件讨论。<br>\n刷题的时候也要找质量高的题来刷。</p>\n<p dir=\"auto\">作为面试官，也要注意自己出的题的质量。<br>\n题目不仅有<code class=\"notranslate\">难度</code>一个维度，还有<code class=\"notranslate\">区分度</code>、<code class=\"notranslate\">效度</code>、<code class=\"notranslate\">信度</code>。</p>","author":{"login":"aztack","avatarUrl":"https://avatars.githubusercontent.com/u/782871?u=1a177ad553795ad10cb44429acb719c822d97a31&v=4","url":"https://github.com/aztack"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AEUIj","bodyHTML":"<p dir=\"auto\">再来个proxy版本的</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function add(n) {\n\tlet sum = n;\n\tconst proxy = new Proxy(function a() {}, {\n\t\tget(obj, key) {\n\t\t\treturn () =&gt; sum;\n\t\t},\n\t\tapply(receiver, ...args) {\n\t\t\tsum += args[1][0];\n\t\t\treturn proxy;\n\t\t},\n\t});\n\treturn proxy;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-k\">let</span> <span class=\"pl-s1\">sum</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">n</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-k\">const</span> <span class=\"pl-s1\">proxy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Proxy</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-en\">a</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">key</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">sum</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n\t\t<span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">receiver</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-s1\">sum</span> <span class=\"pl-c1\">+=</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">proxy</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n\t<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">proxy</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">apply 会拦截函数的调用</p>","author":{"login":"Ha0ran2001","avatarUrl":"https://avatars.githubusercontent.com/u/73927445?u=51b77bd26b8dbe99cd4a9c86f8f5051df49626a2&v=4","url":"https://github.com/Ha0ran2001"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AElUh","bodyHTML":"<blockquote>\n<blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function add() {\n\tconst _args = [...arguments];\n\tfunction fn() {\n\t\t_args.push(...arguments);\n\t\treturn fn;\n\t}\n\tfn.valueOf = function() {\n\t\treturn _args.reduce((sum, cur) =&gt; sum + cur);\n\t}\n\treturn fn;\n}\nadd(1)(2)(3)(4).valueOf();\nadd(1)(1,2,3)(2).valueOf();\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-k\">const</span> <span class=\"pl-s1\">_args</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-k\">function</span> <span class=\"pl-en\">fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-s1\">_args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span>...<span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">_args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">sum</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">sum</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">valueOf</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">当变量对象（函数也是对象）遇到一些情况的时候，会偷偷地调用 toString 和 valueOf 方法（隐式调用），那我们就可以改写这两个方法做一些事。</p>\n</blockquote>\n<p dir=\"auto\">可以展开说说哪些情况会调用 valueOf 吗？</p>\n</blockquote>\n<p dir=\"auto\">对象到原始值的类型转换会有三种变体，称为hint：第一种是对象到字符串的转换，第二种是对象到数字的转换，第三种是运算符不确定期望值的类型时。为了进行转换，内部会调用三个方法，<a href=\"hint\">Symbol.toPrimitive</a>，如果这个方法存在的话，否则，如果hint是第一种，会尝试toString和valueOf，无论哪个存在；否则，如果hint是 后面两种会尝试调用valueOf和toString。其中第一种方法处理了所有的转换情况。对于字符串的转换，优先toString，对于数学运算，优先valueOf。</p>","author":{"login":"Ha0ran2001","avatarUrl":"https://avatars.githubusercontent.com/u/73927445?u=51b77bd26b8dbe99cd4a9c86f8f5051df49626a2&v=4","url":"https://github.com/Ha0ran2001"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AEmH2","bodyHTML":"<p dir=\"auto\">前来提供思路，给大家开新的思路：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const curry = (fn, ...arg) =&gt; {\n  // 注意：此处是 &gt;= , 传入的参数大于等于原始函数fn的参数个数，则直接执行该函数\n  return arg.length &gt;= fn.length ? fn(...arg) : (..._arg) =&gt; curry(fn, ...arg, ..._arg);\n}\n\nconst addThree = (x, y, z) =&gt; x + y + z; // 三数相加\nconst addFour = (x, y, z, p) =&gt; x + y + z + p; // 四数相加\n\nconst add = curry(addThree);\nadd(1)(2)(3); // 6\n\nconst add = curry(addFour);\nadd(1)(2)(3)(4); // 10\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">curry</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">arg</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// 注意：此处是 &gt;= , 传入的参数大于等于原始函数fn的参数个数，则直接执行该函数</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arg</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&gt;=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> ? <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">arg</span><span class=\"pl-kos\">)</span> : <span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">_arg</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">curry</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">arg</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">_arg</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">addThree</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">z</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">y</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">z</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// 三数相加</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">addFour</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">z</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">p</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">y</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">z</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">p</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// 四数相加</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">add</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">curry</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">addThree</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// 6</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">add</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">curry</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">addFour</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// 10</span></pre></div>","author":{"login":"alileew","avatarUrl":"https://avatars.githubusercontent.com/u/91374678?u=984247012f5dc4f9947ad9e14d24aaafa8a7f4f5&v=4","url":"https://github.com/alileew"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AFl4c","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function binAdd() {\n    let _arr = Array.prototype.slice.call(arguments);\n\n    function fn() {\n        _arr.push(...Array.prototype.slice.call(arguments))\n        return fn;\n    }\n    fn.valueOf = function() {\n        return _arr.reduce((pre, cur) =&gt; pre + cur )\n    }\n\n    return fn;\n    \n}\n\nbinAdd(1)(2)(4).valueOf()\n7\nbinAdd(1)(2)(4, 9).valueOf()\n16\n\n\"><pre class=\"notranslate\"><code class=\"notranslate\">function binAdd() {\n    let _arr = Array.prototype.slice.call(arguments);\n\n    function fn() {\n        _arr.push(...Array.prototype.slice.call(arguments))\n        return fn;\n    }\n    fn.valueOf = function() {\n        return _arr.reduce((pre, cur) =&gt; pre + cur )\n    }\n\n    return fn;\n    \n}\n\nbinAdd(1)(2)(4).valueOf()\n7\nbinAdd(1)(2)(4, 9).valueOf()\n16\n\n\n</code></pre></div>","author":{"login":"supermanklk","avatarUrl":"https://avatars.githubusercontent.com/u/28639384?u=02c9e7b01132ff83f7ac72ffce3ea8c4e486f144&v=4","url":"https://github.com/supermanklk"},"replies":null}}]}}},"pageContext":{"number":2,"previous":null,"next":{"title":"React应用卡顿该如何排查？","number":3}}},
    "staticQueryHashes": ["151096407","2861350382"]}