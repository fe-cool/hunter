{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/8",
    "result": {"data":{"issuesJson":{"id":"d9a6ae96-4925-585e-aeca-bd737beb4cd4","title":"遇到线上bug该如何处理？","number":8,"bodyHTML":"<h2 dir=\"auto\">问题描述</h2>\n\n\n<p dir=\"auto\">经过开发、联调、测试，你的新需求终于上线了。好景不长，在平稳运行几天后，某一天突然发现<code class=\"notranslate\">线上报警陡增</code>，看来是新上线的功能有bug，请从以下顺序谈谈你的解决方式：</p>\n<ol dir=\"auto\">\n<li>发现bug的当时，你会怎么做？</li>\n<li>bug修复后，公司开始追责，其他人（测试、后端、产品）比较倾向是前端（你）的责任，你会从哪些方面反驳他们？</li>\n<li>事后复盘时，总结经验教训，你会提出哪些建议，防止类似事情再发生？</li>\n</ol>\n<h2 dir=\"auto\">最佳答案</h2>\n<p dir=\"auto\"><a href=\"https://github.com/BetaSu/fe-hunter/issues/8#issuecomment-1077034932\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/8/hovercard\">Dante-dan的回答</a>逻辑严密，给出详细排查步骤</p>\n<p dir=\"auto\"><a href=\"https://github.com/BetaSu/fe-hunter/issues/8#issuecomment-1077047577\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/8/hovercard\">jerry-lllman的回答</a>给出了具体话术示例</p>\n<h3 dir=\"auto\">答题同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">答题规范：请在<code class=\"notranslate\">一次评论</code>中完成作答，后续修改也请编辑该评论，而不是追加新的评论</p>\n</li>\n<li>\n<p dir=\"auto\">评选标准：最佳答案由<code class=\"notranslate\">围观同学</code>的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji> 和<a href=\"https://github.com/BetaSu\">卡颂</a>共同决定</p>\n</li>\n<li>\n<p dir=\"auto\">评选时间：一般是当日18：00左右评选，如果问题发布当天回答数较少，问题悬赏金额可能增加，同时悬赏时间也会增加</p>\n</li>\n</ul>\n<h3 dir=\"auto\">围观同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">对于你满意的答案，请不要吝惜你的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>，这是评选<strong>最佳答案</strong>的依据</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">非答题的评论</code>会被删除，问题相关讨论请在<a href=\"https://github.com/BetaSu/fe-hunter\">赏金猎人群</a>中进行</p>\n</li>\n</ul>","updatedAt":"2022-03-24T11:07:11Z","upvoteCount":null,"author":{"login":"BetaSu","avatarUrl":"https://avatars.githubusercontent.com/u/15828041?u=3b08cdf9f9b49dbead9ffb020a94d925904d2b74&v=4","url":"https://github.com/BetaSu"},"category":null,"labels":{"edges":[{"node":{"name":"职场","color":"64b5f6"}}]},"comments":{"edges":[{"node":{"id":"IC_kwDOHCfdf85AMfsI","bodyHTML":"<p dir=\"auto\">1、首先查看开发环境有没有相同的问题，有的话立即修改。并视问题的大小，如果涉及到功能改变，通知测试，紧急测试并再上线。<br>\n2、首先，写代码写出bug是大家都不想的结果，作为开发人员也是尽量去避免这种事情，但是百密总有一疏；其次，这个bug的具体原因是什么，是因为后端的返回值不规范而导致的bug吗，还是其他原因，不能以出问题就定调责任全在前端；再者，产品的发布，是经过产品到开发到测试的，且这个产品已经成功上线了几天，才出现的问题，那么测试环节是否有疏漏，没有在上线前检测出这个bug<br>\n3、事后复盘时，这是bug的出现体现出了开发和测试考虑上的疏漏，所以需要对这个bug进行具体的分析，从不甩锅的角度总结出产生bug的原因，并总结在之后新功能的研发中如何避免这种问题的重复出现的方法</p>","author":{"login":"PYLDora","avatarUrl":"https://avatars.githubusercontent.com/u/38790670?u=87b7f95d7854f5f2b70e766b282dfc7a0673f68d&v=4","url":"https://github.com/PYLDora"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AMgyF","bodyHTML":"<p dir=\"auto\">1、发现bug之后，马上判断一下，执行回滚操作，及时止损。<br>\n2、bug修复之后。<br>\n针对测试：这种新功能上线之前，一定是需要经过测试同学进行质量把关的，而且根据项目流程，测试同一定会给出测试用例，然后看下这次出现的bug有没有在测试用例中覆盖到，如果没有覆盖到，那就是用例不全，测试同学的专业程度不够。<br>\n针对后端：如果说测试方面没有问题，那么出现这种线上出问题的情况，除了前端代码没有做好防御性编程外，那就是后端接口没有按照规定返回数据或者性能差，可以从这些角度去反驳后端同学，<br>\n3、开始复盘，主要是有两方面。<br>\n一是项目的主流程，每个公司的部门都会有一套完善的项目开发流程，从产品的需求评审开始到项目上线，都会有一些规定的步骤，这些步骤就是确保项目无风险上线的前置条件，所以，我们需要严格遵循这套流程来进行下去，这是一个基本的要求，每个参与到项目中的成员需要清楚且执行。这是关于在项目合作流程的一个建议。<br>\n二是研发本身，比如前端，可以在项目所在的系统加一些日志监控以及bug监控之类的操作。比如可以在代码中加入一下埋点，获取用户的行为轨迹；或则加入一下ui自动化测试的东西（让ui自动化自己去线上跑ui页面，提前发现一些操作上的bug）等等这些技术上的干预，可以让项目系统更加稳定和健壮。</p>","author":{"login":"cuehuabuleng","avatarUrl":"https://avatars.githubusercontent.com/u/51027205?u=e3c8471b3949facfdeb34b3f6d90d7f07a4121a4&v=4","url":"https://github.com/cuehuabuleng"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AMjEv","bodyHTML":"<p dir=\"auto\">1.发现bug之后，里面部署之前版本，并导出日志。<br>\n把最新的包放到准生产环境，并对出现bug的功能进行相应的测试，测出的结果，与线上的日志做比较。<br>\n2.修复bug之后，首先定位问题，问题定位完之后找对应的需求，如果需求没有提及对应的，以下省略。如果对应的需求提及，那就找对应模块的开发与测试，检测测试人员测试点有无涉及。开发人员对应模块、数据有有无错误。<br>\n3、定位问题所在，在上线前多测，在开发中仔细阅读对应的需要，理解后与后端，产品、测试核对自己理解有无错误</p>","author":{"login":"Cui-cancon","avatarUrl":"https://avatars.githubusercontent.com/u/64176411?v=4","url":"https://github.com/Cui-cancon"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AMj-0","bodyHTML":"<ol dir=\"auto\">\n<li>发现线上 bug 首先第一步肯定是上报了。线上 bug 一旦发生就意味着已经对用户产生了影响，所以第一步是上报并且定损。需要评估<strong>严重程度</strong>、<strong>优先级</strong>、<strong>受影响的设备</strong>、<strong>时间范围</strong>、<strong>影响用户量</strong>，同步 QA 同学<strong>复现 bug</strong>；</li>\n<li>bug 处理方案的决策。不是所有的 bug 都有必要修复，也不是所有的 bug 都应该立即修复，所以要根据 bug 的严重程度和优先级来做第一轮判断。比如不严重的 bug，低优 bug 可以先进 backlog；再比如一些未来版本可能改版或者废弃的模块产生的 bug，可以直接放弃修复。</li>\n<li>处理需要修复的 bug；第一步是复现 bug，第二步是分析产生原因；第三步是给出修复方案。复现的方法有很多种，比如 sentry 日志，流量回放，人肉复现；分析的手段也有很多种，debug 代码，devTools；修复方案最重要的是尽量缩小影响面，同时节约工时。</li>\n<li>在有了修复方案之后，需要在决策重新对 bug 进行修复的优先级排序。因为可能一个中优的 bug，需要巨大的修复成本。这种时候我们可能就需要将优先级稍稍往后，同时选择从产品或者流程上规避这个 bug。所以这个是对 bug 的再次梳理，给出新的方案。（可能涉及到跨部门协同）</li>\n</ol>\n<blockquote>\n<p dir=\"auto\">追责</p>\n</blockquote>\n<p dir=\"auto\">其实 bug 的产生不是某个人的问题，而是整个流程的问题。大到不同部门的协同，信息的同步，信息的沟通；小到代码结构，陈年屎山，Code Review，QA 测试；</p>\n<p dir=\"auto\">所以出现 bug，先要从整体上来看，流程上是不是可以补全，代码中如何规避；再聚焦到细节，代码为什么出错，为什么上线才发现，当然写出 bug 的人自然是主要的责任人。这种情况据理力争就行了，不管是接口日志还是协作问题，找到具体真正的负责人就好了。</p>\n<blockquote>\n<p dir=\"auto\">复盘</p>\n</blockquote>\n<p dir=\"auto\">其实复盘是很有效的手段，需要做的就是将前面 2 步结合起来。</p>\n<ol dir=\"auto\">\n<li>先从 BUG 的影响上开始分析，再从解决方案的决策上给出解释；</li>\n<li>复盘研发链路上是否有疏漏</li>\n<li>整体上分析和回顾大的流程上是否存在问题，再从细节出深挖问题的根结</li>\n<li>给出避免的方案，不论是加强沟通还是统一编码风格，还是 code review 的加强</li>\n<li>从整体到细节，给出完整的 bug 原因，以及完整的避免思路</li>\n</ol>","author":{"login":"Dante-dan","avatarUrl":"https://avatars.githubusercontent.com/u/19773791?u=7b0b3348e5f055ba8589cbdaa7a13b146418c2ad&v=4","url":"https://github.com/Dante-dan"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AMnEZ","bodyHTML":"<p dir=\"auto\">我又要开始磨坏水儿～<br>\n<strong>一、发现bug的当时，你会怎么做？</strong><br>\n针对这个问题我简单答一下了，有其他同学答的比我好，稍后给他们点赞<g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>\n<p dir=\"auto\">首先，立即通知到相关同事，判断这个bug的影响程度、范围，是否严重，如可以回滚，则暂时将版本回滚。<br>\n其次，协同各方，进行bug排查，如有必要，可以直接与出现bug的用户沟通进行复现。<br>\n后续就是针对bug进行修复测试上线了。<br>\n<strong>先解决问题是最重要的。</strong></p>\n<p dir=\"auto\"><strong>二、bug修复后，公司开始追责，其他人（测试、后端、产品）比较倾向是前端（你）的责任，你会从哪些方面反驳他们？</strong><br>\n<em>坏水儿磨好了<g-emoji class=\"g-emoji\" alias=\"joy\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f602.png\">😂</g-emoji></em><br>\n首先说明，咱们程序员都是老实人，不说伤人的话，除非你不想在公司好好混。</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\"><strong>测试</strong><br>\n话不能这么说啊，这功能是我们一起负责的嘛，而且我们一起都测了好几回的啊，出了问题我也不想的嘛。（测试你是最没有资格甩锅的。功能是我写的，也是你测的，如果真的是我这里出的bug问题，你怎么就没有测出来？现在出了问题就怪我？我还想问你呢，你怎么测的，是不是上班摸<g-emoji class=\"g-emoji\" alias=\"fish\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png\">🐟</g-emoji>去了，没有好好测啊？）</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>后端</strong><br>\n这问题是反馈在前端没错，但是我页面都是根据数据来驱动的，再说了，接口我也专门给你测了，我又不是设计数据结构的人，这出了问题不能直接就怪到我头上吧。（错误在前端就是在前端啊，我特么在你家里拉粑粑，这<g-emoji class=\"g-emoji\" alias=\"hankey\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png\">💩</g-emoji>就是你家的了？你返回来的数据导致问题发生，你还甩锅？再说了，我特么还给你测接口，怎么没看到你来给我测页面啊？）</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>产品</strong><br>\na). 这个地方我记得产品文档上好像没写这种逻辑吧，而且这个需求我也跟你过了好几遍了，要不然我去把电脑拿来咱们看看有没有（等别人回答，不要直接起身就拿）。（你文档逻辑都没写清楚，你还给我再这儿叫，看我不治治你小子）<br>\nb). 上线之前我也有跟你进行上线前的交付工作，你这边也过了，也确认过了没有问题啊。（功能也给你过了，你自己都承认我写的没有问题，现在出了问题就想甩锅啊，之前你干么去了）</p>\n</li>\n</ol>\n<p dir=\"auto\">除此之外。<strong>线上报警陡增</strong> 是一个突破点，有问题你们不知道早点关注啊，现在出了问题找我？（优美的话语欢迎各位自己去想了，嘿嘿）</p>\n<p dir=\"auto\">不要直接把问题都揽到自己身上，记住，我们是<strong>一个团队，一个集体</strong>，都上线了，凭什么问题儿童就我一个人？要背锅也是咱们一起背。<br>\n另外，如果你有一个好领导还有好同事们，请不要孤身作战，拉上他们一起，当然，这得你们平时都关系要好，并且他们也会做人。</p>\n<p dir=\"auto\">总结：<strong>其实问题在谁身上真的不重要，重要的是复盘出这次问题是怎么出现的，如何发生的，又如何搞成问题变成大问题的，如何去避免，找背锅的人是永远也解决不了真正的问题的，这是一种很low的方式。另外也希望各位与共事的同事都尽量搞好关系，避免互相对立，这样即便真的要找人背锅，也可能会对你有利一点。</strong></p>\n<p dir=\"auto\">题外话，如果你是一个TL，请你一定要保护好你的下属，这种时候他再怎么有问题，对内，你可以骂 。但是对外，他就是没有问题，问题都在其他团队那里。</p>\n<p dir=\"auto\">三、事后复盘时，总结经验教训，你会提出哪些建议，防止类似事情再发生？</p>\n<p dir=\"auto\">复盘嘛，都上线才出现的问题，那肯定是这个问题不太容易出现嘛。</p>\n<ol dir=\"auto\">\n<li>所有人都定期分批次盯线上报警，及时反馈问题，及时解决，不要等问题搞大了再来找茬。</li>\n<li>产品要把文档写清楚，团队在过需求时也要一起把逻辑捋清楚</li>\n<li>上线之前大家一起测试多过几遍。发动所有人一起进行测试，别给我说什么你是后端，你只负责写接口，你是产品，只负责出文档，后端你也认真给我测，要上线了，产品也给我认认真真的过几遍。上线后也一样要过。</li>\n</ol>\n<p dir=\"auto\">希望各位在职场中都很会颠勺甩锅（不是.....<br>\n其实各位真的遇到这种时候，我还是那句话，要<strong>会做人</strong>，遇到被甩锅千万不要发脾气，跟别人争吵，这真的很low，其他人只会认为你无能狂怒，你不背锅谁背？即便你真的把锅甩出去了，就此得罪了人，以后别人也会想着办法阴你几下，可能反而得不偿失。</p>\n<p dir=\"auto\">如果觉得我今天的坏水儿磨的也还可以，也请各位大佬们给我一个<g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>，谢谢啦</p>","author":{"login":"jerry-lllman","avatarUrl":"https://avatars.githubusercontent.com/u/45385120?u=4ddfba34a051c4b37f7b6fdfd0c5290715e510e7&v=4","url":"https://github.com/jerry-lllman"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AMpFT","bodyHTML":"<p dir=\"auto\">1.1、判断bug紧急程度，不紧急（不影响业务流程），可以在下个迭代解决，紧急（影响业务流程），做版本回滚<br>\n1.2、利用工具定位问题，可以是监控系统，开发调试工具，人肉等多手段，判断问题生产的原因（1、后端接口问题，2、前端代码问题，3，产品设计缺陷）</p>\n<p dir=\"auto\">2、用事实说话，有理有据，是最强一击</p>\n<p dir=\"auto\">3、开发首先要自测，测试尽可多覆盖用例、产品要验收测试，用流程和制度减小重大事故</p>\n<p dir=\"auto\">总结：没bug的产品不是好产品</p>","author":{"login":"chenguzhen87","avatarUrl":"https://avatars.githubusercontent.com/u/28331609?u=dcb387633efc82ad62a8fd820397a587904c2b8e&v=4","url":"https://github.com/chenguzhen87"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AOH2s","bodyHTML":"<blockquote>\n<ol dir=\"auto\">\n<li>发现线上 bug 首先第一步肯定是上报了。线上 bug 一旦发生就意味着已经对用户产生了影响，所以第一步是上报并且定损。需要评估<strong>严重程度</strong>、<strong>优先级</strong>、<strong>受影响的设备</strong>、<strong>时间范围</strong>、<strong>影响用户量</strong>，同步 QA 同学<strong>复现 bug</strong>；</li>\n<li>bug 处理方案的决策。不是所有的 bug 都有必要修复，也不是所有的 bug 都应该立即修复，所以要根据 bug 的严重程度和优先级来做第一轮判断。比如不严重的 bug，低优 bug 可以先进 backlog；再比如一些未来版本可能改版或者废弃的模块产生的 bug，可以直接放弃修复。</li>\n<li>处理需要修复的 bug；第一步是复现 bug，第二步是分析产生原因；第三步是给出修复方案。复现的方法有很多种，比如 sentry 日志，流量回放，人肉复现；分析的手段也有很多种，debug 代码，devTools；修复方案最重要的是尽量缩小影响面，同时节约工时。</li>\n<li>在有了修复方案之后，需要在决策重新对 bug 进行修复的优先级排序。因为可能一个中优的 bug，需要巨大的修复成本。这种时候我们可能就需要将优先级稍稍往后，同时选择从产品或者流程上规避这个 bug。所以这个是对 bug 的再次梳理，给出新的方案。（可能涉及到跨部门协同）</li>\n</ol>\n<blockquote>\n<p dir=\"auto\">追责</p>\n</blockquote>\n<p dir=\"auto\">其实 bug 的产生不是某个人的问题，而是整个流程的问题。大到不同部门的协同，信息的同步，信息的沟通；小到代码结构，陈年屎山，Code Review，QA 测试；</p>\n<p dir=\"auto\">所以出现 bug，先要从整体上来看，流程上是不是可以补全，代码中如何规避；再聚焦到细节，代码为什么出错，为什么上线才发现，当然写出 bug 的人自然是主要的责任人。这种情况据理力争就行了，不管是接口日志还是协作问题，找到具体真正的负责人就好了。</p>\n<blockquote>\n<p dir=\"auto\">复盘</p>\n</blockquote>\n<p dir=\"auto\">其实复盘是很有效的手段，需要做的就是将前面 2 步结合起来。</p>\n<ol dir=\"auto\">\n<li>先从 BUG 的影响上开始分析，再从解决方案的决策上给出解释；</li>\n<li>复盘研发链路上是否有疏漏</li>\n<li>整体上分析和回顾大的流程上是否存在问题，再从细节出深挖问题的根结</li>\n<li>给出避免的方案，不论是加强沟通还是统一编码风格，还是 code review 的加强</li>\n<li>从整体到细节，给出完整的 bug 原因，以及完整的避免思路</li>\n</ol>\n</blockquote>\n<p dir=\"auto\">分析的挺好的<g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji></p>","author":{"login":"jerry-lllman","avatarUrl":"https://avatars.githubusercontent.com/u/45385120?u=4ddfba34a051c4b37f7b6fdfd0c5290715e510e7&v=4","url":"https://github.com/jerry-lllman"},"replies":null}}]}}},"pageContext":{"number":8,"previous":{"title":"实现一个串行请求队列","number":6},"next":{"title":"如何选择前端打包工具？","number":9}}},
    "staticQueryHashes": ["151096407","2861350382"]}