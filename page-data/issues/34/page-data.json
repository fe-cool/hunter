{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/34",
    "result": {"data":{"issuesJson":{"id":"afba0880-dabc-5747-b571-e9e11bfcdb3b","title":"实现数组扁平化","number":34,"bodyHTML":"\n<h3 dir=\"auto\">要实现的功能</h3>\n\n<p dir=\"auto\">在 JavaScript 中实现拍平数组，你有几种方法？</p>\n<h3 dir=\"auto\">代码示例</h3>\n\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 给你一个数组：[1, [2, 3, [4], 5], 6]\n// 你需要输出： [1, 2, 3, 4, 5, 6]\"><pre class=\"notranslate\"><span class=\"pl-c\">// 给你一个数组：[1, [2, 3, [4], 5], 6]</span>\n<span class=\"pl-c\">// 你需要输出： [1, 2, 3, 4, 5, 6]</span></pre></div>\n<h3 dir=\"auto\">最佳答案评选标准</h3>\n \n<ol dir=\"auto\">\n<li>如果给出多种解决方案，请简要阐明他们的优劣</li>\n<li>请写出实现思路、代码，并为代码的关键步骤增写注释</li>\n<li>附带测试用例、是加分项</li>\n<li>不需要考虑异常发生</li>\n<li>不过度设计，代码简洁优雅是加分项</li>\n</ol>\n<h2 dir=\"auto\">最佳答案</h2>\n<p dir=\"auto\"><a href=\"https://github.com/BetaSu/fe-hunter/issues/34#issuecomment-1082556189\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BetaSu/fe-hunter/issues/34/hovercard\">childrentime的回答</a></p>\n<h3 dir=\"auto\">答题同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">答题规范：请在<code class=\"notranslate\">一次评论</code>中完成作答，后续修改也请编辑该评论，而不是追加新的评论</p>\n</li>\n<li>\n<p dir=\"auto\">评选标准：最佳答案由<code class=\"notranslate\">围观同学</code>的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji> 和<a href=\"https://github.com/BetaSu\">卡颂</a>共同决定</p>\n</li>\n<li>\n<p dir=\"auto\">评选时间：一般是当日18：00左右评选，如果问题发布当天回答数较少，问题悬赏金额可能增加，同时悬赏时间也会增加</p>\n</li>\n</ul>\n<h3 dir=\"auto\">围观同学须知</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">对于你满意的答案，请不要吝惜你的 <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png\">👍</g-emoji>，这是评选<strong>最佳答案</strong>的依据</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">非答题的评论</code>会被删除，问题相关讨论请在<a href=\"https://github.com/BetaSu/fe-hunter\">赏金猎人群</a>中进行</p>\n</li>\n</ul>","updatedAt":"2022-03-31T05:58:52Z","upvoteCount":null,"author":{"login":"BetaSu","avatarUrl":"https://avatars.githubusercontent.com/u/15828041?u=3b08cdf9f9b49dbead9ffb020a94d925904d2b74&v=4","url":"https://github.com/BetaSu"},"category":null,"labels":{"edges":[{"node":{"name":"JS","color":"ffee58"}},{"node":{"name":"动手","color":"42a5f5"}}]},"comments":{"edges":[{"node":{"id":"IC_kwDOHCfdf85AhinA","bodyHTML":"<p dir=\"auto\">直接使用ES6的方法flat</p>","author":{"login":"shabbyaaa","avatarUrl":"https://avatars.githubusercontent.com/u/48679300?u=ce60faaf13476ef3b0ad1cbac791423ff56bd54d&v=4","url":"https://github.com/shabbyaaa"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85Ahits","bodyHTML":"<h2 dir=\"auto\">二维数组</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 方法一\nfunction flat(arr){\n    const res = []\n    for(let i=0;i&lt;arr.length;i++){\n        if(Array.isArray(arr[i])){\n            for(let j=0;j&lt;arr[i].length;j++){\n                res.push(arr[i][j])\n            }\n        } else {\n            res.push(arr[i])\n        }\n    }\n}\n\n// 方法二\nfunction flat(arr){\n    const res = []\n    for(x of arr){\n        res.concat(x)\n    }\n    return res\n}\n\n// 方法三\narr.reduce((acc,cur) =&gt; acc.concat(cur),[])\n\n// 方法四\n[].concat(...arr)\n\n// 方法五\n[].concat.apply(null,arr)\"><pre class=\"notranslate\"><span class=\"pl-c\">// 方法一</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">=</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span><span class=\"pl-s1\">i</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span><span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">j</span><span class=\"pl-c1\">=</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span><span class=\"pl-s1\">j</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span><span class=\"pl-s1\">j</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n                <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">j</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 方法二</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 方法三</span>\n<span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">acc</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">acc</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c\">// 方法四</span>\n<span class=\"pl-kos\">[</span><span class=\"pl-s1\"></span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c\">// 方法五</span>\n<span class=\"pl-kos\">[</span><span class=\"pl-s1\"></span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">concat</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">多维数组</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 方法一\nfunction flat(arr,res = []){\n\tarr.forEach(item =&gt; {\n        Array.isArray(item) ? flat(item,res): res.push(item)\n    })\n    return res\n}\n\n// 方法二\nfunction flat(arr){\n    return arr.reduce((acc,cur) =&gt; {\n        return Array.isArray(cur) ? acc.concat(flat(cur)) : acc.concat(cur)\n    },[])\n}\n\n// 方法三\nfunction flat(arr){\n    while(arr.some(item =&gt; Array.isArray(item))){\n        arr = [].concat(...arr)\n    }\n    return arr\n}\n\n// 方法四（要求所有元素数据类型相同，以数字型数组为例）\nfunction flat_numberArray(arr){\n    return arr.toString().split(',').map(x =&gt; Number(x))\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// 方法一</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n\t<span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span>: <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 方法二</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">acc</span><span class=\"pl-kos\">,</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-s1\">acc</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> : <span class=\"pl-s1\">acc</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 方法三</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">while</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">some</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 方法四（要求所有元素数据类型相同，以数字型数组为例）</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">flat_numberArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">split</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">','</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"Chorer","avatarUrl":"https://avatars.githubusercontent.com/u/43442630?u=a9fa211751f51a129ea1fdd6ebaaa8ab41edb62a&v=4","url":"https://github.com/Chorer"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85Ahi22","bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\n\nconst arr = [1, [2, 3, [4], 5], 6]\n\nconst { isArray } = Array\n\nconst flatten = (arr) =&gt;\n  arr.reduce((acc, cur) =&gt; {\n    return acc.concat(isArray(cur) ? flatten(cur) : cur)\n  }, [])\n\nconst _arr = flatten(arr)\n\nconsole.log(_arr) // [ 1, 2, 3, 4, 5, 6 ]\n\n\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">5</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">6</span><span class=\"pl-kos\">]</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> isArray <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Array</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">flatten</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span>\n  <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">acc</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">acc</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> : <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">_arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">_arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// [ 1, 2, 3, 4, 5, 6 ]</span>\n</pre></div>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\nconst arr = [1, [2, 3, [4], 5], 6]\n\nconst len = (arr) =&gt; arr.length\n\nconst { isArray } = Array\n\nconst flatten = (arr) =&gt; {\n  const stack = [...arr]\n  const res = []\n  while (len(stack)) {\n    const f = stack.shift()\n    if (isArray(f)) {\n      stack.unshift(...f)\n    } else {\n      res.push(f)\n    }\n  }\n  return res\n}\n\nconst _arr = flatten(arr)\n\nconsole.log(_arr)\n\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">5</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">6</span><span class=\"pl-kos\">]</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">len</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> isArray <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Array</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">flatten</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">stack</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-s1\">arr</span><span class=\"pl-kos\">]</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n  <span class=\"pl-k\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">len</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">stack</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">stack</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">f</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">stack</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">f</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">f</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">_arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">_arr</span><span class=\"pl-kos\">)</span></pre></div>","author":{"login":"nonzzz","avatarUrl":"https://avatars.githubusercontent.com/u/52351095?u=6f6f36a4ced0620abe20704520835a1fdf67fef2&v=4","url":"https://github.com/nonzzz"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85Ahj4K","bodyHTML":"<p dir=\"auto\">// 实现方式一：reduce<br>\n<code class=\"notranslate\">const flatten = arr =&gt; arr.reduce((res, cur) =&gt; res.concat(Array.isArray(cur) ? flatten(cur) : cur), []);</code></p>\n<p dir=\"auto\">// 实现方式二：tostring<br>\n<code class=\"notranslate\">const flatten2 =  arr =&gt; arr.toString().split(',').map(item =&gt; Number(item));</code></p>\n<p dir=\"auto\">// 实现方式三：join<br>\n<code class=\"notranslate\">const flatten3 =  arr =&gt; arr.join().split(',').map(item =&gt; Number(item));</code></p>\n<p dir=\"auto\">// 实现方式四：flat(Infinity)<br>\n<code class=\"notranslate\">const flatten4 = arr =&gt; arr.flat(Infinity);</code></p>\n<p dir=\"auto\">// 实现方式五：正则<br>\n<code class=\"notranslate\">const flatten5 = arr =&gt; JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g,'') + ']');</code></p>\n<p dir=\"auto\">// 实现方式六：扩展运算符</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const flatten6 = arr =&gt; {\n  while (arr.some(item =&gt; Array.isArray(item))) {\n    arr = [].concat(...arr);\n  }\n  return arr;\n};\"><pre class=\"notranslate\"><code class=\"notranslate\">const flatten6 = arr =&gt; {\n  while (arr.some(item =&gt; Array.isArray(item))) {\n    arr = [].concat(...arr);\n  }\n  return arr;\n};\n</code></pre></div>","author":{"login":"codekeqiong","avatarUrl":"https://avatars.githubusercontent.com/u/42710911?u=efdd51a32d6dde5bfc1a51cca089f1b730ebdaac&v=4","url":"https://github.com/codekeqiong"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AhkFv","bodyHTML":"<p dir=\"auto\">arr.flat(Infinity)</p>","author":{"login":"xl9-7","avatarUrl":"https://avatars.githubusercontent.com/u/81150627?u=adf39188d36f1dd3762a0039222551d412ab2591&v=4","url":"https://github.com/xl9-7"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AhkO5","bodyHTML":"<p dir=\"auto\">ES6原生支持<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\" rel=\"nofollow\">Array.prototype.flat</a></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 之前写的,直接拿来用一下\n\n// 判断是否为数组\nconst isArray = Array.isArray\n\n// 减少一级数组的嵌套深度\nconst flatten = (array) =&gt; flattenDepth(array)\n\n// 深层次扁平化数组\nconst flattenDeep = (array) =&gt; flattenDepth(array, Infinity)\n\n// 根据用户层级扁平化数组,默认一层\nconst flattenDepth = (array, depth = 1) =&gt; {\n   // 如果不是数组,返回传入的参数\n    if (!isArray(array)) return array\n   // 定义当前扁平化层级\n    let current = 0\n    const flat = (array, depth, currentDepth) =&gt; {\n        // 声明 result,作为结果返回\n        let result = []\n        // 遍历数组\n        for (const item of array) {\n           // 如果是数组且遍历深度不大于指定深度, 继续扁平化\n            if (isArray(item) &amp;&amp; currentDepth + 1 &lt;= depth) {\n                result.push(...flat(item, depth, currentDepth + 1))\n            } else {\n                // 否则,插入结果\n                result.push(item)\n            }\n        }\n        // 返回结果\n        return result\n    }\n    return flat(array, depth, current)\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// 之前写的,直接拿来用一下</span>\n\n<span class=\"pl-c\">// 判断是否为数组</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">isArray</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">isArray</span>\n\n<span class=\"pl-c\">// 减少一级数组的嵌套深度</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">flatten</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">flattenDepth</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c\">// 深层次扁平化数组</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">flattenDeep</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">flattenDepth</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Infinity</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-c\">// 根据用户层级扁平化数组,默认一层</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">flattenDepth</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">depth</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n   <span class=\"pl-c\">// 如果不是数组,返回传入的参数</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span> <span class=\"pl-s1\">array</span>\n   <span class=\"pl-c\">// 定义当前扁平化层级</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">current</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">flat</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">depth</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">currentDepth</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c\">// 声明 result,作为结果返回</span>\n        <span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n        <span class=\"pl-c\">// 遍历数组</span>\n        <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">item</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n           <span class=\"pl-c\">// 如果是数组且遍历深度不大于指定深度, 继续扁平化</span>\n            <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">currentDepth</span> <span class=\"pl-c1\">+</span> <span class=\"pl-c1\">1</span> <span class=\"pl-c1\">&lt;=</span> <span class=\"pl-s1\">depth</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span>...<span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">depth</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">currentDepth</span> <span class=\"pl-c1\">+</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-c\">// 否则,插入结果</span>\n                <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span>\n        <span class=\"pl-c\">// 返回结果</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">depth</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">current</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 测试\n// 一维\nconst test1 = () =&gt; {\n    const array = [1, 2, 3]\n    console.log(`flatten1:`, flatten(array)) // flatten1: (3) [1, 2, 3]\n    console.log(`flattenDeep1:`, flattenDeep(array)) // flattenDeep1: (3) [1, 2, 3]\n}\n\n// 二维\nconst test2 = () =&gt; {\n    const array = [[1], [2], [3]]\n    console.log(`flatten2:`, flatten(array)) // flatten2: (3) [1, 2, 3]\n    console.log(`flattenDeep2:`, flattenDeep(array)) // flattenDeep2: (3) [1, 2, 3]\n}\n\n// 三维\nconst test3 = () =&gt; {\n    const array = [[[1]], [[2]], [[3]]]\n    console.log(`flatten3:`, flatten(array)) // flatten3: (3) [Array(1), Array(1), Array(1)]\n    console.log(`flattenDeep3:`, flattenDeep(array)) // flattenDeep3: (3) [1, 2, 3]\n}\n\n// 多维\nconst test4 = () =&gt; {\n    const array = [[[[1]]], [[[2]]], [[[3]]]]\n    console.log(`flatten:`, flatten(array)) // flatten4: (3) [Array(1), Array(1), Array(1)] 粘的浏览器打印结果,无法展开\n    console.log(`flattenDeep:`, flattenDeep(array)) // flattenDeep4: (3) [1, 2, 3] \n}\nconst runTest = () =&gt; {\n    test1()\n    test2()\n    test3()\n    test4()\n}\n\nrunTest()\"><pre class=\"notranslate\"><span class=\"pl-c\">// 测试</span>\n<span class=\"pl-c\">// 一维</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">test1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">array</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`flatten1:`</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// flatten1: (3) [1, 2, 3]</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`flattenDeep1:`</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">flattenDeep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// flattenDeep1: (3) [1, 2, 3]</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 二维</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">test2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">array</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`flatten2:`</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// flatten2: (3) [1, 2, 3]</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`flattenDeep2:`</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">flattenDeep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// flattenDeep2: (3) [1, 2, 3]</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 三维</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">test3</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">array</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`flatten3:`</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// flatten3: (3) [Array(1), Array(1), Array(1)]</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`flattenDeep3:`</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">flattenDeep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// flattenDeep3: (3) [1, 2, 3]</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 多维</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">test4</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">array</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`flatten:`</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// flatten4: (3) [Array(1), Array(1), Array(1)] 粘的浏览器打印结果,无法展开</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`flattenDeep:`</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">flattenDeep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// flattenDeep4: (3) [1, 2, 3] </span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">runTest</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">test1</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">test2</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">test3</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">test4</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">runTest</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>","author":{"login":"vfiee","avatarUrl":"https://avatars.githubusercontent.com/u/42051272?u=c466fca38de5663acb520c4a0af0d2d8515ec79b&v=4","url":"https://github.com/vfiee"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AhkfH","bodyHTML":"<h3 dir=\"auto\">代码</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">原生数组方法</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function fn1(arr = []) {\n      return arr.flat(Infinity)\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">fn1</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Infinity</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</li>\n<li>\n<p dir=\"auto\">递归</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function fn2(arr = []) {\n      return arr.reduce((pre, cur) =&gt; {\n            if (Array.isArray(cur)) {\n                  pre.push(...fn2(cur))\n            } else {\n                  pre.push(cur);\n            }\n            return pre;\n      }, [])\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">fn2</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">pre</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                  <span class=\"pl-s1\">pre</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span>...<span class=\"pl-en\">fn2</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n                  <span class=\"pl-s1\">pre</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cur</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-kos\">}</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">pre</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</li>\n<li>\n<p dir=\"auto\">迭代器</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function fn3(arr = []) {\n      function* iteration(arr) {\n            for (let item of arr) {\n                  if (Array.isArray(item)) {\n                      \t// 转移迭代器控制权\n                        yield* iteration(item)\n                  } else {\n                        yield item\n                  }\n            }\n      }\n\n      return [...iteration(arr)];\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">fn3</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">function</span><span class=\"pl-c1\">*</span> <span class=\"pl-s1\">iteration</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">item</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                      \t<span class=\"pl-c\">// 转移迭代器控制权</span>\n                        <span class=\"pl-k\">yield</span><span class=\"pl-c1\">*</span> <span class=\"pl-en\">iteration</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span>\n                  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n                        <span class=\"pl-k\">yield</span> <span class=\"pl-s1\">item</span>\n                  <span class=\"pl-kos\">}</span>\n            <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span>\n\n      <span class=\"pl-k\">return</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-en\">iteration</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</li>\n<li>\n<p dir=\"auto\">栈存取</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function fn4(arr = []) {\n      // 避免修改原数组\n      arr = arr.slice()\n      const res = [];\n      while (arr.length) {\n            // 获取头部\n            const value = arr.shift();\n            // 是数组的话解构放回头部\n            if (Array.isArray(value)) {\n                  arr.unshift(...value)\n            } else {\n                  res.push(value)\n            }\n      }\n      return res;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">fn4</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c\">// 避免修改原数组</span>\n      <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-k\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c\">// 获取头部</span>\n            <span class=\"pl-k\">const</span> <span class=\"pl-s1\">value</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-c\">// 是数组的话解构放回头部</span>\n            <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                  <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n                  <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</li>\n<li>\n<p dir=\"auto\">遍历</p>\n<p dir=\"auto\">第四个方法的优化版本，相比方法四，考虑不改变原数组的情况下，也只需要一个额外数组</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function fn5(arr = []) {\n      // 避免修改原数组\n      const res = arr.slice()\n      for (let i = 0; i &lt; res.length; i++) {\n            const value = res[i];\n            if (Array.isArray(value)) {\n                  // 将数据解构插入原来元素的位置\n                  res.splice(i, 1, ...value);\n                  // 修正指针位置\n                  i--;\n            }\n      }\n      return res;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">fn5</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c\">// 避免修改原数组</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">const</span> <span class=\"pl-s1\">value</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                  <span class=\"pl-c\">// 将数据解构插入原来元素的位置</span>\n                  <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">splice</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n                  <span class=\"pl-c\">// 修正指针位置</span>\n                  <span class=\"pl-s1\">i</span><span class=\"pl-c1\">--</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</li>\n</ul>\n<h3 dir=\"auto\">测试</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"let arr = [1, [2, 3, [4], 5], 6]\n\nconsole.log(fn1(arr));\nconsole.log(fn2(arr));\nconsole.log(fn3(arr));\nconsole.log(fn4(arr));\nconsole.log(fn5(arr));\"><pre class=\"notranslate\"><span class=\"pl-k\">let</span> <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">5</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">6</span><span class=\"pl-kos\">]</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn1</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn2</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn3</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn4</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fn5</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">输出：<br>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/52490455/160753200-c1a39e88-f14f-4065-bfcf-3403bebd7c91.png\"><img src=\"https://user-images.githubusercontent.com/52490455/160753200-c1a39e88-f14f-4065-bfcf-3403bebd7c91.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>","author":{"login":"fightZy","avatarUrl":"https://avatars.githubusercontent.com/u/52490455?u=4a008fd4e5a82484f5eec0f82487368910fc9f65&v=4","url":"https://github.com/fightZy"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AhmEv","bodyHTML":"<p dir=\"auto\">可以分情况进行讨论<br>\narr为我们需要扁平的数组</p>\n<blockquote>\n<p dir=\"auto\">示例中使用箭头函数，要求node版本至少大于4.0.0，可以使用function方式定义flatten方法<br>\n示例中使用的spread运算符，要求node版本至少大于5.0.0，当node版本小于5.0.0时，可以使用其它方法实现</p>\n</blockquote>\n<h3 dir=\"auto\">如果数组为n为数组，且node版本大于11.0.0</h3>\n<p dir=\"auto\">a. 已经知数组维度为n：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"arr = arr.flat(n)\"><pre class=\"notranslate\"><span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">b.未知数组维度：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"arr = arr.flat(Infinity)\"><pre class=\"notranslate\"><span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Infinity</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">c. n为2</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"arr.flatMap(el =&gt; el)\"><pre class=\"notranslate\"><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">flatMap</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">el</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">el</span><span class=\"pl-kos\">)</span></pre></div>\n<h3 dir=\"auto\">如果数组为n维数组，且node版本小于11.0.0</h3>\n<p dir=\"auto\">a. stack</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const flatten = (arr) =&gt; {\n  // copy数组\n  const stackArr = [...arr]; \n  const res = [];\n  while (stackArr.length) {\n    const part = stackArr.shift();\n    if (Array.isArray(part)) {\n      stackArr.unshift(...part);\n    } else {\n      res.push(part);\n    }\n  }\n  return res;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">flatten</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// copy数组</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">stackArr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-s1\">arr</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span> \n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">stackArr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">part</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">stackArr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">part</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">stackArr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">part</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">part</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">b.  for循环</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const flatten = (arr) =&gt; {\n  var res = [];\n  for (let i = 0, length = arr.length; i &lt; length; i++) {\n    if (Array.isArray(arr[i])) {\n      res.push(...flatten(arr[i]));\n    } else {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">flatten</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">length</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span>...<span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">c. reduce</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const flatten = (arr) =&gt; {\n  return arr.reduce((prev, next) =&gt; {\n    return prev.concat(Array.isArray(next) ? flatten(next) : next)\n  }, [])\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">flatten</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">prev</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">prev</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span> : <span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<blockquote>\n<p dir=\"auto\">这里的reset运算符的使用可以替换成concat方法</p>\n</blockquote>\n<p dir=\"auto\">d. while</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const flatten = (arr) =&gt; {\n  while (arr.some(el =&gt; Array.isArray(el))) {\n    arr = [].concat(...arr);\n  }\n  return arr;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">flatten</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">some</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">el</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">el</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<blockquote>\n<p dir=\"auto\">同样的，这里的reset运算符也可以使用concat方法</p>\n</blockquote>\n<p dir=\"auto\">e. 翻版递归</p>\n<blockquote>\n<p dir=\"auto\">yield需要node版本大于4.0.0</p>\n</blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function* flatten(arr) {\n  for (const el of arr) {\n      if(Array.isArray(el)){\n          yield* flatten(el)\n      } else {\n          yield el\n      }\n  }\n}\nconst newArr = [...flatten(arr)]\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span><span class=\"pl-c1\">*</span> <span class=\"pl-s1\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">el</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">el</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n          <span class=\"pl-k\">yield</span><span class=\"pl-c1\">*</span> <span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">el</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-k\">yield</span> <span class=\"pl-s1\">el</span>\n      <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">newArr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-en\">flatten</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></pre></div>\n<h3 dir=\"auto\">数组为纯数字数组，且n维</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const flatten = (arr) =&gt; {\n  return arr.toString().split(',').map(el =&gt; {\n    return +el\n  })\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">flatten</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">split</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">','</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">el</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">+</span><span class=\"pl-s1\">el</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"Alexlangl","avatarUrl":"https://avatars.githubusercontent.com/u/49755039?u=05454fda082f3c2d7c07ac8a0fcf763af6fefc79&v=4","url":"https://github.com/Alexlangl"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85Ahn8d","bodyHTML":"<h1 dir=\"auto\">ES6</h1>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"arr.flat(Infinity);\"><pre class=\"notranslate\"><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">flat</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Infinity</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<h1 dir=\"auto\">数组中全为数字</h1>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"arr.toString().split(',').map(Number)\"><pre class=\"notranslate\"><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">split</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">','</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Number</span><span class=\"pl-kos\">)</span></pre></div>\n<h1 dir=\"auto\">递归</h1>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const myFlat = (arr) =&gt; {\n  const helper = (arr) =&gt; {\n    let res = [];\n    for (const item of arr) {\n      if (typeof item === 'object') {\n        res.push(...item);\n      } else {\n        res.push(item);\n      }\n    }\n    return res;\n  };\n\n  while (arr.some(item =&gt; typeof item === 'object')) {\n    arr = helper(arr);\n  }\n  return arr;\n};\n\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">myFlat</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">helper</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">item</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">item</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">some</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">item</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'object'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">helper</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<h1 dir=\"auto\">栈代替递归</h1>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const myFlat1 = (input) =&gt; {\n  const stack = [...input];\n  const res = [];\n  while (stack.length) {\n    const next = stack.pop();\n    if (Array.isArray(next)) {\n      stack.push(...next);\n    } else {\n      res.push(next);\n    }\n  }\n  return res.reverse();\n};\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">myFlat1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">input</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">stack</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-s1\">input</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">while</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">stack</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">next</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">stack</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">pop</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">stack</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">next</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reverse</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span></pre></div>\n<h1 dir=\"auto\">正则过滤</h1>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function myFlat3(arr) {\n  let str = JSON.stringify(arr);\n  // 过滤所有的中中括号\n  str = str.replace(/(\\[|\\])/g, '');\n  str = '[' + str + ']';\n  return JSON.parse(str);\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">myFlat3</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">str</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c\">// 过滤所有的中中括号</span>\n  <span class=\"pl-s1\">str</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">str</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span><span class=\"pl-kos\">(</span><span class=\"pl-cce\">\\[</span><span class=\"pl-c1\">|</span><span class=\"pl-cce\">\\]</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">/</span>g</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">''</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-s1\">str</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'['</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">str</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">']'</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">JSON</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">parse</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">str</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h1 dir=\"auto\">生成器</h1>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function* myFlat2(array, depth = 1) {\n  for (const item of array) {\n    if (Array.isArray(item) &amp;&amp; depth &gt; 0) {\n      yield* myFlat2(item, depth - 1);\n    } else {\n      yield item;\n    }\n  }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span><span class=\"pl-c1\">*</span> <span class=\"pl-s1\">myFlat2</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">array</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">depth</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">const</span> <span class=\"pl-s1\">item</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">array</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">depth</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">yield</span><span class=\"pl-c1\">*</span> <span class=\"pl-en\">myFlat2</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">depth</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">yield</span> <span class=\"pl-s1\">item</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>","author":{"login":"childrentime","avatarUrl":"https://avatars.githubusercontent.com/u/58261676?u=2457dbe0350468c49c8bf9ed4a1b0e6622649c7a&v=4","url":"https://github.com/childrentime"},"replies":null}},{"node":{"id":"IC_kwDOHCfdf85AnhHt","bodyHTML":"<p dir=\"auto\">const s = [1, [2, 3, [4], 5], 6]<br>\n// 函数体<br>\nfunction flatList (list, resList) {<br>\nresList = resList || []<br>\nfor (let value of list) {<br>\nif (Array.isArray(value)) {<br>\nflatList(value, resList)<br>\n} else {<br>\nresList[resList.length] = value<br>\n}<br>\n}<br>\nreturn resList<br>\n}<br>\n// 验证<br>\nconsole.log(flatList(s))</p>","author":{"login":"houhaizimen","avatarUrl":"https://avatars.githubusercontent.com/u/50349373?v=4","url":"https://github.com/houhaizimen"},"replies":null}}]}}},"pageContext":{"number":34,"previous":{"title":"为什么Vue没有React那么多性能优化API？","number":30},"next":{"title":"如何跨团队推进项目落地？","number":35}}},
    "staticQueryHashes": ["151096407","2861350382"]}